rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isCompanyOwner(companyId) {
      let companyPath = /databases/$(database)/documents/companies/$(companyId);
      return exists(companyPath) && get(companyPath).data.ownerId == request.auth.uid;
    }

    function isOwnerRole(companyId, userId) {
      return exists(/databases/$(database)/documents/companies/$(companyId)/members/$(userId)) &&
             get(/databases/$(database)/documents/companies/$(companyId)/members/$(userId)).data.role == 'owner';
    }

    function getUserPermissions(companyId, userId) {
      return exists(/databases/$(database)/documents/companies/$(companyId)/members/$(userId)) &&
             'permissions' in get(/databases/$(database)/documents/companies/$(companyId)/members/$(userId)).data
        ? get(/databases/$(database)/documents/companies/$(companyId)/members/$(userId)).data.permissions
        : {};
    }

    function hasPermission(companyId, userId, permission) {
      return isOwnerRole(companyId, userId) || getUserPermissions(companyId, userId)[permission] == true;
    }

    function canMemberRead(companyId) {
      return isUserAuthenticated() && (isCompanyOwner(companyId) || exists(/databases/$(database)/documents/companies/$(companyId)/members/$(request.auth.uid)));
    }

    // Group rules for members
    match /{path=**}/members/{memberDocId} {
      allow read: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Company rules
    match /companies/{companyId} {
      allow read: if canMemberRead(companyId);
      allow create: if isUserAuthenticated();
      allow update, delete: if isUserAuthenticated() && isCompanyOwner(companyId);

      // --- SUBCOLLECTIONS ---
      // Sales collection
      match /sales/{monthKey} {
        allow read: if isUserAuthenticated() && canMemberRead(companyId);
        allow write: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'sales_manage')
        );
      }
      
      // Client segments
      match /clientSegments/{clientCode} {
        allow read: if isUserAuthenticated() && canMemberRead(companyId);
        allow write: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'sales_manage')
        );
      }

      match /members/{memberUserId} {
        allow read: if canMemberRead(companyId);
        allow create: if request.auth.uid == memberUserId &&
                         request.resource.data.userId == request.auth.uid &&
                         request.resource.data.permissions != null;
        allow update: if isUserAuthenticated() &&
                       ( isCompanyOwner(companyId) ||
                         (request.auth.uid == memberUserId && !request.resource.data.keys().hasAny(['permissions', 'roleId', 'role']))
                       );
        allow delete: if isUserAuthenticated() &&
                         isCompanyOwner(companyId) &&
                         request.auth.uid != memberUserId;
      }

      match /roles/{roleId} {
        allow read: if canMemberRead(companyId);
        allow write: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'settings_roles_manage');
      }

      // Employees
      match /employees/{employeeId} {
        allow read: if isUserAuthenticated() &&
                       (
                         isCompanyOwner(companyId) ||
                         hasPermission(companyId, request.auth.uid, 'settings_employees_manage') ||
                         hasPermission(companyId, request.auth.uid, 'timesheet_view')
                       );
        allow create, delete: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'settings_employees_manage');
        allow update: if isUserAuthenticated() &&
                       ( hasPermission(companyId, request.auth.uid, 'settings_employees_manage') ||
                         (
                           request.resource.diff(resource).affectedKeys().hasAny(['timesheet', 'archivedInMonths']) &&
                           (hasPermission(companyId, request.auth.uid, 'timesheet_edit_cells') ||
                            hasPermission(companyId, request.auth.uid, 'timesheet_archive_employees') ||
                            hasPermission(companyId, request.auth.uid, 'timesheet_fill_schedule'))
                         )
                       );

        match /kpiActuals/{kpiActualsId} {
            allow read: if isUserAuthenticated() &&
                           (hasPermission(companyId, request.auth.uid, 'kpiIndividual_view_page') ||
                            (request.auth.uid == employeeId && hasPermission(companyId, request.auth.uid, 'kpiIndividual_load_actuals')));
            allow write: if isUserAuthenticated() &&
                            ( isCompanyOwner(companyId) ||
                             (request.auth.uid == employeeId && hasPermission(companyId, request.auth.uid, 'kpiIndividual_save_actuals')));
        }
      }

      // Departments
      match /departments/{departmentId} {
        allow read: if isUserAuthenticated() &&
                       (
                         isCompanyOwner(companyId) ||
                         hasPermission(companyId, request.auth.uid, 'settings_departments_manage') ||
                         hasPermission(companyId, request.auth.uid, 'timesheet_view')
                       );
        allow write: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'settings_departments_manage');
      }

      // Positions
      match /positions/{positionId} {
        allow read: if isUserAuthenticated() &&
                       (
                         isCompanyOwner(companyId) ||
                         hasPermission(companyId, request.auth.uid, 'settings_positions_manage') ||
                         hasPermission(companyId, request.auth.uid, 'timesheet_view')
                       );
        allow write: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'settings_positions_manage');
      }

      // Schedules
      match /schedules/{scheduleId} {
        allow read: if isUserAuthenticated() &&
                       (
                         isCompanyOwner(companyId) ||
                         hasPermission(companyId, request.auth.uid, 'settings_schedules_manage') ||
                         hasPermission(companyId, request.auth.uid, 'timesheet_view')
                       );
        allow write: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'settings_schedules_manage');
      }

      match /config/{configDocId} {
        allow read: if canMemberRead(companyId);
        allow write: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'timesheet_change_norm');
      }

      match /kpiSettings/{kpiSettingId} {
        allow read: if isUserAuthenticated() &&
                       (hasPermission(companyId, request.auth.uid, 'settings_kpi_constructor_manage') ||
                        hasPermission(companyId, request.auth.uid, 'kpiIndividual_view_page') ||
                        hasPermission(companyId, request.auth.uid, 'massSalary_view_page'));
        allow write: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'settings_kpi_constructor_manage');
      }

      match /massSalarySnapshots/{snapshotId} {
        allow read: if isUserAuthenticated() &&
                       (hasPermission(companyId, request.auth.uid, 'massSalary_view_page') ||
                        hasPermission(companyId, request.auth.uid, 'reports_view_dynamics'));
        allow write: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'massSalary_save_snapshot');
      }

      // Vacations
      match /vacationRequests/{vacationRequestId} {
        allow read: if canMemberRead(companyId);
        allow create: if isUserAuthenticated() &&
                          hasPermission(companyId, request.auth.uid, 'vacations_view_page');
        allow update: if isUserAuthenticated() &&
                          (hasPermission(companyId, request.auth.uid, 'vacations_manage_requests') ||
                           (request.auth.uid == resource.data.submittedById && resource.data.status == 'pending'));
        allow delete: if isUserAuthenticated() &&
                          request.auth.uid == resource.data.submittedById && resource.data.status == 'pending';
      }

      // Competencies
      match /competencyModels/{modelId} {
        allow read: if canMemberRead(companyId);
        allow create, update, delete: if isUserAuthenticated() &&
          (isCompanyOwner(companyId) || hasPermission(companyId, request.auth.uid, 'competencies_manage_models'));
      }
      match /assessments/{assessmentId} {
        allow read, write: if isUserAuthenticated() &&
          (isCompanyOwner(companyId) || hasPermission(companyId, request.auth.uid, 'competencies_assess_employees'));
      }
      match /evaluations/{evaluationId} {
        allow read, write: if canMemberRead(companyId);
      }
      match /competencyReports/{reportId} {
        allow read: if isUserAuthenticated() &&
          (isCompanyOwner(companyId) || hasPermission(companyId, request.auth.uid, 'competencies_view_reports'));
      }
      match /competencyAssessments/{assessmentId} {
        allow read: if isUserAuthenticated() && canMemberRead(companyId);
        allow create, update, delete: if isUserAuthenticated() &&
          (isCompanyOwner(companyId) || hasPermission(companyId, request.auth.uid, 'competencies_assess_employees'));
      }

      // Focus tasks
      match /focusTasks/{taskId} {
        allow read: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'focus_view');
        allow create: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'focus_create');
        allow update: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'focus_edit');
        allow delete: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'focus_manage');
        // Client notes for focus tasks
        match /notes/{clientCode} {
          allow read: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'focus_view');
          allow write: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'focus_edit');
        }
      }

      // Smart day tasks
      match /smartDayTasks/{taskId} {
        allow read: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'smartday_access');
        allow create, update, delete: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'smartday_access');
      }

      // Debts management
      match /debtComments/{commentId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'debts_view_page')
        );
        allow create: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'debts_add_comments')
        );
        allow update: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'debts_edit_comments') ||
          (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'debts_add_comments'))
        );
        allow delete: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'debts_delete_comments') ||
          (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'debts_add_comments'))
        );
      }

      match /paymentForecasts/{forecastId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'debts_view_page')
        );
        allow create: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'debts_add_forecasts')
        );
        allow update: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'debts_edit_forecasts') ||
          (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'debts_add_forecasts'))
        );
        allow delete: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'debts_delete_forecasts') ||
          (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'debts_add_forecasts'))
        );
      }

      // Plan-fact analysis
      match /plans/{planId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_view_page') ||
          (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'planfact_view_page'))
        );
        allow create: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_create_plans')
        );
        allow update: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_edit_all_plans') ||
          (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'planfact_edit_own_plans'))
        );
        allow delete: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_delete_all_plans') ||
          (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'planfact_delete_own_plans'))
        );
      }

      match /planTargets/{targetId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_view_page')
        );
        allow create, update: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_create_targets') ||
          hasPermission(companyId, request.auth.uid, 'planfact_edit_targets')
        );
        allow delete: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_edit_targets')
        );
      }

      match /planFactAnalytics/{analyticsId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_view_dashboard')
        );
        allow write: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_view_dashboard')
        );
      }
    }

    match /invites/{inviteId} {
      allow create: if isUserAuthenticated() && request.resource.data.companyId != null && isCompanyOwner(request.resource.data.companyId);
      allow read: if isUserAuthenticated() && request.auth.uid == resource.data.invitedBy;
      allow update, delete: if isUserAuthenticated() && request.auth.uid == resource.data.invitedBy;
    }
  }
} 