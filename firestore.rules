rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ---
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isCompanyOwner(companyId) {
      let companyPath = /databases/$(database)/documents/companies/$(companyId);
      return exists(companyPath) && get(companyPath).data.ownerId == request.auth.uid;
    }

    function getUserEffectivePermissions(companyId, userId) {
      return exists(/databases/$(database)/documents/companies/$(companyId)/members/$(userId))
        ? (get(/databases/$(database)/documents/companies/$(companyId)/members/$(userId)).data.role == 'owner'
            ? {
                // !!! ВАЖНО: Добавляйте сюда ВСЕ новые права !!!
                'timesheet_view': true, 'timesheet_edit_cells': true, 'timesheet_archive_employees': true,
                'timesheet_fill_schedule': true, 'timesheet_clear_month': true, 'timesheet_change_norm': true,
                'timesheet_export': true, 'massSalary_view_page': true, 'massSalary_generate_table': true,
                'massSalary_calculate_all': true, 'massSalary_save_snapshot': true, 'massSalary_export_excel': true,
                'kpiIndividual_view_page': true, 'kpiIndividual_load_actuals': true, 'kpiIndividual_calculate': true,
                'kpiIndividual_save_actuals': true, 'reports_view_page': true, 'reports_view_dynamics': true,
                'settings_employees_manage': true, 'settings_departments_manage': true, 'settings_schedules_manage': true,
                'settings_positions_manage': true, 'settings_users_access_manage': true, 'settings_roles_manage': true,
                'settings_kpi_constructor_manage': true, 'vacations_view_page': true, 'vacations_manage_requests': true,
                // Новые права для модуля компетенций:
                'competencies_view_page': true,
                'competencies_assess_employees': true,
                'competencies_manage_models': true,
                'competencies_view_reports': true,
                'competencies_view_own_assessment': true,
                // Права для дебиторки:
                'debts_view_page': true, 'debts_view_all': true, 'debts_view_department': true, 'debts_view_own': true,
                'debts_manage_comments': true, 'debts_manage_forecasts': true, 'debts_export': true,
                // Права для план-факт:
                'planfact_view_page': true, 'planfact_view_all': true, 'planfact_view_department': true, 'planfact_view_own': true,
                'planfact_create_plans': true, 'planfact_edit_own': true, 'planfact_edit_department': true, 'planfact_edit_all': true,
                'planfact_manage_targets': true, 'planfact_view_analytics': true,
                'isOwner': true,
                'smartday_access': true,
              }
            : ('permissions' in get(/databases/$(database)/documents/companies/$(companyId)/members/$(userId)).data
                ? get(/databases/$(database)/documents/companies/$(companyId)/members/$(userId)).data.permissions
                : {}
              )
          )
        : {};
    }

    function canMemberRead(companyId) {
      return isUserAuthenticated() && (isCompanyOwner(companyId) || exists(/databases/$(database)/documents/companies/$(companyId)/members/$(request.auth.uid)));
    }

    // --- ГРУППОВЫЕ ПРАВИЛА ДЛЯ MEMBERS ---
    match /{path=**}/members/{memberDocId} {
      allow read: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // --- ПРАВИЛА ДЛЯ КОМПАНИИ ---
    match /companies/{companyId} {
      allow read: if canMemberRead(companyId);
      allow create: if isUserAuthenticated();
      allow update, delete: if isUserAuthenticated() && isCompanyOwner(companyId);

      // --- ПОДКОЛЛЕКЦИИ ---
// --- ПРОДАЖІ (sales) --- ДОДАЙТЕ СЮДИ!
      match /sales/{monthKey} {
        allow read: if isUserAuthenticated() && canMemberRead(companyId);
        allow write: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          getUserEffectivePermissions(companyId, request.auth.uid).sales_manage == true
        );
      }
      
      // --- СЕГМЕНТИ КЛІЄНТІВ ---
      match /clientSegments/{clientCode} {
        allow read: if isUserAuthenticated() && canMemberRead(companyId);
        allow write: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          getUserEffectivePermissions(companyId, request.auth.uid).sales_manage == true
        );
      }

      match /members/{memberUserId} {
        allow read: if canMemberRead(companyId);
        allow create: if request.auth.uid == memberUserId &&
                         request.resource.data.userId == request.auth.uid &&
                         request.resource.data.permissions != null;
        allow update: if isUserAuthenticated() &&
                       ( isCompanyOwner(companyId) ||
                         (request.auth.uid == memberUserId && !request.resource.data.keys().hasAny(['permissions', 'roleId', 'role']))
                       );
        allow delete: if isUserAuthenticated() &&
                         isCompanyOwner(companyId) &&
                         request.auth.uid != memberUserId;
      }

      match /roles/{roleId} {
        allow read: if canMemberRead(companyId);
        allow write: if isUserAuthenticated() && getUserEffectivePermissions(companyId, request.auth.uid).settings_roles_manage == true;
      }

      // --- СОТРУДНИКИ ---
      match /employees/{employeeId} {
        allow read: if isUserAuthenticated() &&
                       (
                         isCompanyOwner(companyId) ||
                         getUserEffectivePermissions(companyId, request.auth.uid).settings_employees_manage == true ||
                         getUserEffectivePermissions(companyId, request.auth.uid).timesheet_view == true
                       );
        allow create, delete: if isUserAuthenticated() && getUserEffectivePermissions(companyId, request.auth.uid).settings_employees_manage == true;
        allow update: if isUserAuthenticated() &&
                       ( getUserEffectivePermissions(companyId, request.auth.uid).settings_employees_manage == true ||
                         (
                           request.resource.diff(resource).affectedKeys().hasAny(['timesheet', 'archivedInMonths']) &&
                           (getUserEffectivePermissions(companyId, request.auth.uid).timesheet_edit_cells == true ||
                            getUserEffectivePermissions(companyId, request.auth.uid).timesheet_archive_employees == true ||
                            getUserEffectivePermissions(companyId, request.auth.uid).timesheet_fill_schedule == true)
                         )
                       );

        match /kpiActuals/{kpiActualsId} {
            allow read: if isUserAuthenticated() &&
                           (getUserEffectivePermissions(companyId, request.auth.uid).kpiIndividual_view_page == true ||
                            (request.auth.uid == employeeId && getUserEffectivePermissions(companyId, request.auth.uid).kpiIndividual_load_actuals == true));
            allow write: if isUserAuthenticated() &&
                            ( isCompanyOwner(companyId) ||
                             (request.auth.uid == employeeId && getUserEffectivePermissions(companyId, request.auth.uid).kpiIndividual_save_actuals == true));
        }
      }

      // --- ОТДЕЛЫ ---
      match /departments/{departmentId} {
        allow read: if isUserAuthenticated() &&
                       (
                         isCompanyOwner(companyId) ||
                         getUserEffectivePermissions(companyId, request.auth.uid).settings_departments_manage == true ||
                         getUserEffectivePermissions(companyId, request.auth.uid).timesheet_view == true
                       );
        allow write: if isUserAuthenticated() && getUserEffectivePermissions(companyId, request.auth.uid).settings_departments_manage == true;
      }

      // --- ДОЛЖНОСТИ ---
      match /positions/{positionId} {
        allow read: if isUserAuthenticated() &&
                       (
                         isCompanyOwner(companyId) ||
                         getUserEffectivePermissions(companyId, request.auth.uid).settings_positions_manage == true ||
                         getUserEffectivePermissions(companyId, request.auth.uid).timesheet_view == true
                       );
        allow write: if isUserAuthenticated() && getUserEffectivePermissions(companyId, request.auth.uid).settings_positions_manage == true;
      }

      // --- ГРАФИКИ ---
      match /schedules/{scheduleId} {
        allow read: if isUserAuthenticated() &&
                       (
                         isCompanyOwner(companyId) ||
                         getUserEffectivePermissions(companyId, request.auth.uid).settings_schedules_manage == true ||
                         getUserEffectivePermissions(companyId, request.auth.uid).timesheet_view == true
                       );
        allow write: if isUserAuthenticated() && getUserEffectivePermissions(companyId, request.auth.uid).settings_schedules_manage == true;
      }

      match /config/{configDocId} {
        allow read: if canMemberRead(companyId);
        allow write: if isUserAuthenticated() && getUserEffectivePermissions(companyId, request.auth.uid).timesheet_change_norm == true;
      }

      match /kpiSettings/{kpiSettingId} {
        allow read: if isUserAuthenticated() &&
                       (getUserEffectivePermissions(companyId, request.auth.uid).settings_kpi_constructor_manage == true ||
                        getUserEffectivePermissions(companyId, request.auth.uid).kpiIndividual_view_page == true ||
                        getUserEffectivePermissions(companyId, request.auth.uid).massSalary_view_page == true);
        allow write: if isUserAuthenticated() && getUserEffectivePermissions(companyId, request.auth.uid).settings_kpi_constructor_manage == true;
      }

      match /massSalarySnapshots/{snapshotId} {
        allow read: if isUserAuthenticated() &&
                       (getUserEffectivePermissions(companyId, request.auth.uid).massSalary_view_page == true ||
                        getUserEffectivePermissions(companyId, request.auth.uid).reports_view_dynamics == true);
        allow write: if isUserAuthenticated() && getUserEffectivePermissions(companyId, request.auth.uid).massSalary_save_snapshot == true;
      }

      // --- ОТПУСКА ---
      match /vacationRequests/{vacationRequestId} {
        allow read: if canMemberRead(companyId);
        allow create: if isUserAuthenticated() &&
                          (getUserEffectivePermissions(companyId, request.auth.uid).vacations_view_page == true);
        allow update: if isUserAuthenticated() &&
                          (getUserEffectivePermissions(companyId, request.auth.uid).vacations_manage_requests == true ||
                           (request.auth.uid == resource.data.submittedById && resource.data.status == 'pending'));
        allow delete: if isUserAuthenticated() &&
                          request.auth.uid == resource.data.submittedById && resource.data.status == 'pending';
      }

      // --- КОМПЕТЕНЦИИ (COMPETENCIES) ---
      match /competencyModels/{modelId} {
        allow read: if canMemberRead(companyId);
        allow create, update, delete: if isUserAuthenticated() &&
          (isCompanyOwner(companyId) || getUserEffectivePermissions(companyId, request.auth.uid).competencies_manage_models == true);
      }
      match /assessments/{assessmentId} {
        allow read, write: if isUserAuthenticated() &&
          (isCompanyOwner(companyId) || getUserEffectivePermissions(companyId, request.auth.uid).competencies_assess_employees == true);
      }
      match /evaluations/{evaluationId} {
        allow read, write: if canMemberRead(companyId);
      }
      match /competencyReports/{reportId} {
        allow read: if isUserAuthenticated() &&
          (isCompanyOwner(companyId) || getUserEffectivePermissions(companyId, request.auth.uid).competencies_view_reports == true);
      }
      match /competencyAssessments/{assessmentId} {
        allow read: if isUserAuthenticated() && canMemberRead(companyId);
        allow create, update, delete: if isUserAuthenticated() &&
          (isCompanyOwner(companyId) || getUserEffectivePermissions(companyId, request.auth.uid).competencies_assess_employees == true);
      }
      // Добавляйте другие коллекции компетенций по аналогии, если появятся
      // --- ФОКУСНІ ЗАДАЧІ ---
      match /focusTasks/{taskId} {
        allow read: if isUserAuthenticated() && getUserEffectivePermissions(companyId, request.auth.uid).focus_view == true;
        allow create: if isUserAuthenticated() && getUserEffectivePermissions(companyId, request.auth.uid).focus_create == true;
        allow update: if isUserAuthenticated() && getUserEffectivePermissions(companyId, request.auth.uid).focus_edit == true;
        allow delete: if isUserAuthenticated() && getUserEffectivePermissions(companyId, request.auth.uid).focus_manage == true;
        // --- ПОМЕТКИ КЛИЕНТОВ ДЛЯ ФОКУСНЫХ ЗАДАЧ ---
        match /notes/{clientCode} {
          allow read: if isUserAuthenticated() && getUserEffectivePermissions(companyId, request.auth.uid).focus_view == true;
          allow write: if isUserAuthenticated() && getUserEffectivePermissions(companyId, request.auth.uid).focus_edit == true;
        }
      }

      // --- ЗАДАЧІ ДЛЯ "СТВОРИ МІЙ ДЕНЬ" ---
      match /smartDayTasks/{taskId} {
        allow read: if isUserAuthenticated() && getUserEffectivePermissions(companyId, request.auth.uid).smartday_access == true;
        allow create, update, delete: if isUserAuthenticated() && getUserEffectivePermissions(companyId, request.auth.uid).smartday_access == true;
      }

      // --- ДЕБІТОРСЬКА ЗАБОРГОВАНІСТЬ ---
      match /debtComments/{clientCode} {
        allow read: if isUserAuthenticated() && (
          getUserEffectivePermissions(companyId, request.auth.uid).debts_view_page == true ||
          getUserEffectivePermissions(companyId, request.auth.uid).debts_view_all == true ||
          getUserEffectivePermissions(companyId, request.auth.uid).debts_view_department == true ||
          getUserEffectivePermissions(companyId, request.auth.uid).debts_view_own == true
        );
        allow create, update: if isUserAuthenticated() && (
          getUserEffectivePermissions(companyId, request.auth.uid).debts_manage_comments == true ||
          isCompanyOwner(companyId)
        );
        allow delete: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          (getUserEffectivePermissions(companyId, request.auth.uid).debts_manage_comments == true && 
           resource.data.updatedBy == request.auth.uid)
        );
      }

      match /paymentForecasts/{clientCode} {
        allow read: if isUserAuthenticated() && (
          getUserEffectivePermissions(companyId, request.auth.uid).debts_view_page == true ||
          getUserEffectivePermissions(companyId, request.auth.uid).debts_view_all == true ||
          getUserEffectivePermissions(companyId, request.auth.uid).debts_view_department == true ||
          getUserEffectivePermissions(companyId, request.auth.uid).debts_view_own == true
        );
        allow create, update: if isUserAuthenticated() && (
          getUserEffectivePermissions(companyId, request.auth.uid).debts_manage_forecasts == true ||
          isCompanyOwner(companyId)
        );
        allow delete: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          (getUserEffectivePermissions(companyId, request.auth.uid).debts_manage_forecasts == true && 
           resource.data.createdBy == request.auth.uid)
        );
      }

      // --- ПЛАН-ФАКТ ---
      match /plans/{planId} {
        allow read: if isUserAuthenticated() && (
          getUserEffectivePermissions(companyId, request.auth.uid).planfact_view_page == true ||
          getUserEffectivePermissions(companyId, request.auth.uid).planfact_view_all == true ||
          (getUserEffectivePermissions(companyId, request.auth.uid).planfact_view_department == true && 
           // TODO: Добавить проверку отдела менеджера
           true) ||
          (getUserEffectivePermissions(companyId, request.auth.uid).planfact_view_own == true && 
           resource.data.createdBy == request.auth.uid)
        );
        allow create: if isUserAuthenticated() && (
          getUserEffectivePermissions(companyId, request.auth.uid).planfact_create_plans == true ||
          isCompanyOwner(companyId)
        );
        allow update: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          getUserEffectivePermissions(companyId, request.auth.uid).planfact_edit_all == true ||
          (getUserEffectivePermissions(companyId, request.auth.uid).planfact_edit_department == true && 
           // TODO: Добавить проверку отдела
           true) ||
          (getUserEffectivePermissions(companyId, request.auth.uid).planfact_edit_own == true && 
           resource.data.createdBy == request.auth.uid)
        );
        allow delete: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          (getUserEffectivePermissions(companyId, request.auth.uid).planfact_edit_all == true) ||
          (resource.data.createdBy == request.auth.uid && 
           getUserEffectivePermissions(companyId, request.auth.uid).planfact_edit_own == true)
        );
      }

      match /planTargets/{targetId} {
        allow read: if isUserAuthenticated() && (
          getUserEffectivePermissions(companyId, request.auth.uid).planfact_view_page == true ||
          getUserEffectivePermissions(companyId, request.auth.uid).planfact_view_all == true ||
          getUserEffectivePermissions(companyId, request.auth.uid).planfact_view_department == true ||
          getUserEffectivePermissions(companyId, request.auth.uid).planfact_view_own == true
        );
        allow create, update, delete: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          getUserEffectivePermissions(companyId, request.auth.uid).planfact_manage_targets == true ||
          getUserEffectivePermissions(companyId, request.auth.uid).planfact_edit_all == true
        );
      }

      match /planFactAnalytics/{analyticsId} {
        allow read: if isUserAuthenticated() && (
          getUserEffectivePermissions(companyId, request.auth.uid).planfact_view_analytics == true ||
          getUserEffectivePermissions(companyId, request.auth.uid).planfact_view_all == true ||
          isCompanyOwner(companyId)
        );
        allow create, update: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          getUserEffectivePermissions(companyId, request.auth.uid).planfact_view_analytics == true
        );
      }
    }

    match /invites/{inviteId} {
      allow create: if isUserAuthenticated() && request.resource.data.companyId != null && isCompanyOwner(request.resource.data.companyId);
      allow read: if isUserAuthenticated() && request.auth.uid == resource.data.invitedBy;
      allow update, delete: if isUserAuthenticated() && request.auth.uid == resource.data.invitedBy;
    }
  }
} 