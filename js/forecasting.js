// –ú–æ–¥—É–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂
// –ê–≤—Ç–æ—Ä: AI Assistant
// –î–∞—Ç–∞: 2024

// –ò–º–ø–æ—Ä—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
import { ForecastingAlgorithms, SalesDataProcessor, ClientLifecycleForecasting } from './forecastingAlgorithms.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let forecastingData = {
    salesData: [],
    nomenclatureData: [],
    clientManagerDirectory: {}, // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–ª–∏–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä
    plans: {},
    forecasts: {},
    settings: {
        excludedNomenclature: [],
        forecastPeriods: ['month', 'quarter', 'half_year', 'year'],
        algorithms: ['trend', 'seasonal', 'neural', 'combined']
    }
};

// === NEW: –î–∞–Ω–Ω—ã–µ –∏–∑ Firebase ===
let managersData = [];
let departmentsData = [];
let userAccess = {
    userId: null,
    employeeId: null,
    employee: null,
    role: null,
    departmentId: null,
    isAdmin: false
};

// –§–ª–∞–≥ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
let isLoadingForecast = false;

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–¥—É–ª—è
export async function initForecastingModule(container) {
    console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—ñ–≤...');
    console.log('Container:', container);
    
    if (!container) {
        console.error('‚ùå Container is null or undefined');
        return;
    }
    
    try {
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ (–ù–ï –ø–ª–∞–Ω–∏)
        console.log('üìä –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...');
        await loadForecastingData();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å...');
        renderForecastingInterface(container);
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        console.log('üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π...');
        initForecastingEventHandlers();
        
        console.log('‚úÖ –ú–æ–¥—É–ª—å –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–¥—É–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è:', error);
        container.innerHTML = `
            <div class="text-red-400 p-4">
                <h3 class="text-lg font-semibold mb-2">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è</h3>
                <p>${error.message}</p>
                <pre class="mt-2 text-xs">${error.stack}</pre>
            </div>
        `;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
async function loadForecastingData() {
    console.log('üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è...');
    
    try {
        console.log('üîó –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –¥–∂–µ—Ä–µ–ª...');
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ userAccess –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        userAccess = {
            userId: window.state?.currentUserId,
            employeeId: null,
            employee: null,
            role: null,
            departmentId: null,
            isAdmin: false
        };
        
        const companyId = window.state?.currentCompanyId;
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        const promises = [
            fetch('–º–æ–¥—É–ª—å –ø–æ–º—ñ—á–Ω–∏–∫ –ø—Ä–æ–¥–∞–∂—É/data.json'),
            fetch('https://fastapi.lookfort.com/nomenclature.analysis'),
            fetch('https://fastapi.lookfort.com/nomenclature.analysis?mode=nomenclature_category'),
            fetch('https://fastapi.lookfort.com/nomenclature.analysis?mode=company_url')
        ];
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ Firebase —è–∫—â–æ —î –∫–æ–º–ø–∞–Ω—ñ—è
        if (companyId) {
            console.log('üî• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ Firebase...');
            
            try {
                const firebaseModule = await import('./firebase.js');
                const { collection, getDocs } = firebaseModule;
                
                // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
                const employeesRef = collection(firebaseModule.db, 'companies', companyId, 'employees');
                const employeesSnapshot = await getDocs(employeesRef);
                managersData = employeesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                
                // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–¥–¥—ñ–ª–∏
                const departmentsRef = collection(firebaseModule.db, 'companies', companyId, 'departments');
                const departmentsSnapshot = await getDocs(departmentsRef);
                departmentsData = departmentsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                
                // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                const membersRef = collection(firebaseModule.db, 'companies', companyId, 'members');
                const membersSnapshot = await getDocs(membersRef);
                const members = membersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                
                // –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–æ—Å—Ç—É–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                const currentUser = members.find(member => member.userId === userAccess.userId);
                if (currentUser) {
                    userAccess.employeeId = currentUser.employeeId;
                    userAccess.employee = managersData.find(emp => emp.id === currentUser.employeeId);
                    userAccess.role = currentUser.role || '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á';
                    userAccess.departmentId = userAccess.employee?.departmentId;
                    userAccess.isAdmin = userAccess.role && userAccess.role.includes('admin');
                } else {
                    userAccess.role = '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á';
                }
                
                console.log('üë§ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userAccess);
                console.log('üë• –ú–µ–Ω–µ–¥–∂–µ—Ä–∏:', managersData.length);
                console.log('üè¢ –í—ñ–¥–¥—ñ–ª–∏:', departmentsData.length);
                
            } catch (firebaseError) {
                console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Firebase:', firebaseError);
                userAccess.role = '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á';
            }
        } else {
            userAccess.role = '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á';
        }
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–≤–Ω—ñ—à–Ω—ñ –¥–∞–Ω—ñ
        const [dataResponse, nomenclatureResponse, categoryResponse, clientResponse] = await Promise.all(promises);
        
        if (dataResponse.ok) {
            const data = await dataResponse.json();
            forecastingData.salesData = data;
            console.log('üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–∞–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ–≤:', data.length, '–∑–∞–ø–∏—Å—ñ–≤');
        }
        
        if (nomenclatureResponse.ok) {
            const nomenclature = await nomenclatureResponse.json();
            forecastingData.salesData = [...forecastingData.salesData, ...nomenclature];
            console.log('üìä –î–æ–¥–∞–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ–≤:', nomenclature.length, '–∑–∞–ø–∏—Å—ñ–≤');
        }
        
        if (categoryResponse.ok) {
            const categories = await categoryResponse.json();
            forecastingData.nomenclatureData = categories;
            console.log('üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É:', categories.length, '–∫–∞—Ç–µ–≥–æ—Ä—ñ–π');
        }
        
        if (clientResponse.ok) {
            const clients = await clientResponse.json();
            forecastingData.clientManagerDirectory = clients.reduce((acc, client) => {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–ª–µ "–ú–µ–Ω–µ–¥–∂–µ—Ä" –∑–∞–º—ñ—Å—Ç—å "–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä"
                acc[client['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥']] = client['–ú–µ–Ω–µ–¥–∂–µ—Ä'] || client['–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä'];
                return acc;
            }, {});
            console.log('üë• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–æ–≤—ñ–¥–Ω–∏–∫ –∫–ª—ñ—î–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä:', Object.keys(forecastingData.clientManagerDirectory).length, '–∑–∞–ø–∏—Å—ñ–≤');
        }
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ localStorage
        try {
            const savedSettings = localStorage.getItem('forecastingSettings');
            if (savedSettings) {
                forecastingData.settings = { ...forecastingData.settings, ...JSON.parse(savedSettings) };
                console.log('‚öôÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:', forecastingData.settings);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error);
        }
        
        console.log('‚úÖ –í—Å—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        console.log('üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ–¥–∞–∂—ñ–≤:', forecastingData.salesData.length);
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
        throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ: ${error.message}`);
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ)
async function loadForecastingPlans() {
    try {
        const companyId = window.state?.currentCompanyId;
        if (!companyId) {
            console.warn('‚ö†Ô∏è CompanyId –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤');
            return;
        }
        
        const firebaseModule = await import('./firebase.js');
        const { collection, getDocs } = firebaseModule;
        
        const plansRef = collection(firebaseModule.db, 'companies', companyId, 'forecastingPlans');
        const snapshot = await getDocs(plansRef);
        
        forecastingData.plans = {};
        snapshot.docs.forEach(doc => {
            forecastingData.plans[doc.id] = doc.data();
        });
        
        console.log(`üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${Object.keys(forecastingData.plans).length} –ø–ª–∞–Ω—ñ–≤`);
        renderPlansTab(); // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        
    } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–ª–∞–Ω–∏ –∑ Firebase:', error);
    }
}

// –†–µ–Ω–¥–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
function renderForecastingInterface(container) {
    console.log('üé® –ü–æ—á–∏–Ω–∞—î–º–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è...');
    console.log('Container element:', container);
    
    const html = `
        <div class="forecasting-module">
            <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥—É–ª—è -->
            <div class="mb-6">
                <h2 class="text-2xl font-bold text-white mb-2">üìä –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—ñ–≤</h2>
                <p class="text-gray-400">–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ –ø—Ä–æ–¥–∞–∂—ñ–≤ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º AI</p>
            </div>
            
            <!-- –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è -->
            <div class="bg-gray-800 rounded-lg p-4 mb-6">
                <div class="flex flex-wrap gap-4 items-end">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–ü–µ—Ä—ñ–æ–¥ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è</label>
                        <select id="forecastingPeriod" class="dark-input">
                            <option value="month">–ú—ñ—Å—è—Ü—å</option>
                            <option value="quarter">–ö–≤–∞—Ä—Ç–∞–ª</option>
                            <option value="half_year">–ü—ñ–≤—Ä—ñ—á—á—è</option>
                            <option value="year">–†—ñ–∫</option>
                        </select>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è</label>
                        <select id="forecastingAlgorithm" class="dark-input">
                            <option value="trend">–¢—Ä–µ–Ω–¥–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑</option>
                            <option value="seasonal">–°–µ–∑–æ–Ω–Ω–∏–π –∞–Ω–∞–ª—ñ–∑</option>
                            <option value="neural">–ù–µ–π—Ä–æ–Ω–Ω–∞ –º–µ—Ä–µ–∂–∞</option>
                            <option value="combined">–ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π</option>
                            <option value="client-lifecycle">–ñ–∏—Ç—Ç—î–≤–∏–π —Ü–∏–∫–ª –∫–ª—ñ—î–Ω—Ç–∞</option>
                        </select>
                    </div>
                    
                    <button id="generateForecastBtn" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                        üöÄ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑
                    </button>
                    
                    <button id="createPlanBtn" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                        üìã –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞–Ω
                    </button>
                </div>
            </div>
            
            <!-- –ü—ñ–¥—Å—É–º–∫–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div class="bg-gray-800 rounded-lg p-4 border border-gray-700">
                    <div class="text-sm text-gray-400">–ú—ñ—Å—è—á–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑</div>
                    <div id="monthlyForecastSum" class="text-xl font-bold text-white">-</div>
                </div>
                <div class="bg-gray-800 rounded-lg p-4 border border-gray-700">
                    <div class="text-sm text-gray-400">–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑</div>
                    <div id="quarterlyForecastSum" class="text-xl font-bold text-white">-</div>
                </div>
                <div class="bg-gray-800 rounded-lg p-4 border border-gray-700">
                    <div class="text-sm text-gray-400">–ü—ñ–≤—Ä—ñ—á–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑</div>
                    <div id="halfYearForecastSum" class="text-xl font-bold text-white">-</div>
                </div>
                <div class="bg-gray-800 rounded-lg p-4 border border-gray-700">
                    <div class="text-sm text-gray-400">–†—ñ—á–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑</div>
                    <div id="yearlyForecastSum" class="text-xl font-bold text-white">-</div>
                </div>
            </div>
            
            <!-- –í–∫–ª–∞–¥–∫–∏ –º–æ–¥—É–ª—è -->
            <div class="mb-6">
                <div class="flex border-b border-gray-700">
                    <button class="forecasting-tab active px-4 py-2 text-white border-b-2 border-blue-500" data-tab="plans">
                        üìã –ü–ª–∞–Ω–∏
                    </button>
                    <button class="forecasting-tab px-4 py-2 text-gray-400 hover:text-white" data-tab="forecasts">
                        üìä –ü—Ä–æ–≥–Ω–æ–∑–∏
                    </button>
                    <button class="forecasting-tab px-4 py-2 text-gray-400 hover:text-white" data-tab="analytics">
                        üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞
                    </button>
                    <button class="forecasting-tab px-4 py-2 text-gray-400 hover:text-white" data-tab="settings">
                        ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                    </button>
                </div>
            </div>
            
            <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ -->
            <div id="forecastingContent">
                <div id="plansTab" class="forecasting-tab-content active">
                    <div class="text-center py-8">
                        <div class="text-gray-400 mb-4">–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–ª–∞–Ω–∏" –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É</div>
                        <button onclick="loadForecastingPlans()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                            üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–ª–∞–Ω–∏
                        </button>
                    </div>
                </div>
                
                <div id="forecastsTab" class="forecasting-tab-content hidden">
                    <div class="text-center py-8">
                        <div class="text-gray-400 mb-4">–ó–≥–µ–Ω–µ—Ä—É–π—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤</div>
                    </div>
                </div>
                
                <div id="analyticsTab" class="forecasting-tab-content hidden">
                    <div class="text-center py-8">
                        <div class="text-gray-400 mb-4">–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ–≥–Ω–æ–∑—É</div>
                    </div>
                </div>
                
                <div id="settingsTab" class="forecasting-tab-content hidden">
                    <div class="text-center py-8">
                        <div class="text-gray-400 mb-4">–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è</div>
                    </div>
                </div>
            </div>
            
            <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏ -->
            <div id="forecastingLoadingModal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
                <div class="bg-gray-800 rounded-lg p-8 shadow-xl text-center text-white w-full max-w-md mx-4">
                    <h3 id="loadingModalTitle" class="text-2xl font-bold mb-4">–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—É...</h3>
                    <p id="loadingModalStatus" class="text-gray-400 mb-6">–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ...</p>
                    <div class="w-full bg-gray-700 rounded-full h-4 mb-4 overflow-hidden">
                        <div id="loadingModalProgressBar" class="bg-blue-600 h-4 rounded-full transition-all duration-500" style="width: 0%"></div>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    container.innerHTML = html;
    console.log('‚úÖ –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ');
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
function initForecastingEventHandlers() {
    console.log('üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π...');
    
    // –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.forecasting-tab').forEach(tab => {
        tab.addEventListener('click', (e) => {
            const targetTab = e.target.dataset.tab;
            console.log('üîÑ –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', targetTab);
            switchForecastingTab(targetTab);
        });
    });
    
    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—É
    const generateBtn = document.getElementById('generateForecastBtn');
    if (generateBtn) {
        generateBtn.addEventListener('click', () => {
            console.log('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—É...');
            generateForecast();
        });
    }
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É
    const createBtn = document.getElementById('createPlanBtn');
    if (createBtn) {
        createBtn.addEventListener('click', () => {
            console.log('üìã –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É...');
            createForecastingPlan();
        });
    }
    
    console.log('‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
}

// –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫
function switchForecastingTab(tabName) {
    console.log('üîÑ –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);
    
    // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –∑ —É—Å—ñ—Ö –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.forecasting-tab').forEach(tab => {
        tab.classList.remove('active', 'border-blue-500', 'text-white');
        tab.classList.add('text-gray-400');
    });
    
    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—Å—ñ –∫–æ–Ω—Ç–µ–Ω—Ç–∏
    document.querySelectorAll('.forecasting-tab-content').forEach(content => {
        content.classList.add('hidden');
        content.classList.remove('active');
    });
    
    // –ê–∫—Ç–∏–≤—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É –≤–∫–ª–∞–¥–∫—É
    const activeTab = document.querySelector(`[data-tab="${tabName}"]`);
    if (activeTab) {
        activeTab.classList.add('active', 'border-blue-500', 'text-white');
        activeTab.classList.remove('text-gray-400');
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const activeContent = document.getElementById(`${tabName}Tab`);
    if (activeContent) {
        activeContent.classList.remove('hidden');
        activeContent.classList.add('active');
    }
    
    // –†–µ–Ω–¥–µ—Ä–∏–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    switch (tabName) {
        case 'plans':
            renderPlansTab();
            break;
        case 'forecasts':
            renderForecastsTab();
            break;
        case 'settings':
            renderSettingsTab();
            break;
        case 'analytics':
            // TODO: Implement analytics tab
            break;
    }
    
    console.log('‚úÖ –í–∫–ª–∞–¥–∫—É –ø–µ—Ä–µ–º–∏–∫–∞–Ω–æ:', tabName);
}

// –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ –ø–ª–∞–Ω—ñ–≤
function renderPlansTab() {
    console.log('üìã –†–µ–Ω–¥–µ—Ä–∏–º–æ –≤–∫–ª–∞–¥–∫—É –ø–ª–∞–Ω—ñ–≤...');
    
    const container = document.getElementById('plansTab');
    if (!container) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä plansTab –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
        return;
    }
    
    const plans = Object.values(forecastingData.plans);
    console.log('üìä –ü–ª–∞–Ω–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è:', plans);
    
    container.innerHTML = `
        <div class="space-y-6">
            <div class="flex justify-between items-center">
                <h3 class="text-xl font-semibold text-white">–ü–ª–∞–Ω–∏ –ø—Ä–æ–¥–∞–∂—ñ–≤</h3>
                <button onclick="createForecastingPlan()" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
                    ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø–ª–∞–Ω
                </button>
            </div>
            
            ${plans.length === 0 ? `
                <div class="text-center py-12">
                    <div class="text-gray-400 mb-4">–ü–ª–∞–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</div>
                    <p class="text-gray-500">–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à–∏–π –ø–ª–∞–Ω –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏</p>
                </div>
            ` : `
                <div class="grid gap-4">
                    ${plans.map(plan => `
                        <div class="bg-gray-800 rounded-lg p-4 border border-gray-700">
                            <div class="flex justify-between items-start mb-3">
                                <div>
                                    <h4 class="text-lg font-semibold text-white">${plan.title || '–ë–µ–∑ –Ω–∞–∑–≤–∏'}</h4>
                                    <p class="text-gray-400 text-sm">${plan.description || '–ë–µ–∑ –æ–ø–∏—Å—É'}</p>
                                </div>
                                <div class="flex gap-2">
                                    <button onclick="editForecastingPlan('${plan.id}')" class="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700">
                                        ‚úèÔ∏è
                                    </button>
                                    <button onclick="deleteForecastingPlan('${plan.id}')" class="px-3 py-1 bg-red-600 text-white rounded text-sm hover:bg-red-700">
                                        üóëÔ∏è
                                    </button>
                                </div>
                            </div>
                            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                                <div>
                                    <span class="text-gray-400">–ü–µ—Ä—ñ–æ–¥:</span>
                                    <div class="text-white">${plan.period || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</div>
                                </div>
                                <div>
                                    <span class="text-gray-400">–¶—ñ–ª—å:</span>
                                    <div class="text-white">${formatCurrency(plan.target || 0)}</div>
                                </div>
                                <div>
                                    <span class="text-gray-400">–§–∞–∫—Ç:</span>
                                    <div class="text-white">${formatCurrency(plan.actual || 0)}</div>
                                </div>
                                <div>
                                    <span class="text-gray-400">–í–∏–∫–æ–Ω–∞–Ω–Ω—è:</span>
                                    <div class="text-white">${getCompletionPercentage(plan.target || 0, plan.actual || 0)}%</div>
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `}
        </div>
    `;
}

// –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤
function renderForecastsTab() {
    console.log('üìä –†–µ–Ω–¥–µ—Ä–∏–º–æ –≤–∫–ª–∞–¥–∫—É –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤...');
    
    const container = document.getElementById('forecastsTab');
    if (!container) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä forecastsTab –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
        return;
    }
    
    if (!forecastingData.forecasts || !forecastingData.forecasts.data) {
        container.innerHTML = `
            <div class="text-center py-12">
                <div class="text-gray-400 mb-4">–ü—Ä–æ–≥–Ω–æ–∑ —â–µ –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ</div>
                <p class="text-gray-500">–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑" –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É</p>
            </div>
        `;
        return;
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
    updateForecastSummary();
    
    let content = '';
    
    // –Ø–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º –∂–∏—Ç—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
    if (forecastingData.forecasts.algorithm === 'client-lifecycle' && forecastingData.forecasts.details) {
        const details = forecastingData.forecasts.details;
        
        content = `
            <div class="space-y-6">
                <!-- –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
                <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                    <h3 class="text-lg font-semibold text-white mb-4">üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                        <div class="text-center">
                            <div class="text-2xl font-bold text-blue-400">${details.clientCount}</div>
                            <div class="text-sm text-gray-400">–ö–ª—ñ—î–Ω—Ç—ñ–≤</div>
                        </div>
                        <div class="text-center">
                            <div class="text-2xl font-bold text-green-400">${formatCurrency(details.totalForecast)}</div>
                            <div class="text-sm text-gray-400">–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑</div>
                        </div>
                        <div class="text-center">
                            <div class="text-2xl font-bold text-purple-400">${formatCurrency(details.averageForecastPerClient)}</div>
                            <div class="text-sm text-gray-400">–°–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫–ª—ñ—î–Ω—Ç–∞</div>
                        </div>
                        <div class="text-center">
                            <div class="text-2xl font-bold text-yellow-400">${formatCurrency(forecastingData.forecasts.data[0] || 0)}</div>
                            <div class="text-sm text-gray-400">–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å</div>
                        </div>
                    </div>
                </div>
                
                <!-- –ê–Ω–∞–ª—ñ–∑ –ø–æ –∂–∏—Ç—Ç—î–≤–æ–º—É —Ü–∏–∫–ª—É -->
                <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                    <h3 class="text-lg font-semibold text-white mb-4">üë• –ê–Ω–∞–ª—ñ–∑ –ø–æ –∂–∏—Ç—Ç—î–≤–æ–º—É —Ü–∏–∫–ª—É –∫–ª—ñ—î–Ω—Ç—ñ–≤</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                        ${renderLifecycleStats(details.clientForecasts)}
                    </div>
                </div>
                
                <!-- –¢–æ–ø –∫–ª—ñ—î–Ω—Ç—ñ–≤ -->
                <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                    <h3 class="text-lg font-semibold text-white mb-4">üèÜ –¢–æ–ø –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–º</h3>
                    <div class="overflow-x-auto">
                        <table class="w-full text-sm">
                            <thead>
                                <tr class="border-b border-gray-700">
                                    <th class="text-left py-2 text-gray-300">–ö–ª—ñ—î–Ω—Ç</th>
                                    <th class="text-right py-2 text-gray-300">–ñ–∏—Ç—Ç—î–≤–∏–π —Ü–∏–∫–ª</th>
                                    <th class="text-right py-2 text-gray-300">–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫</th>
                                    <th class="text-right py-2 text-gray-300">–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ä—ñ–∫</th>
                                    <th class="text-right py-2 text-gray-300">–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${renderTopClients(details.clientForecasts)}
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <!-- –ì—Ä–∞—Ñ—ñ–∫ –ø—Ä–æ–≥–Ω–æ–∑—É -->
                <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                    <h3 class="text-lg font-semibold text-white mb-4">üìà –ì—Ä–∞—Ñ—ñ–∫ –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ –º—ñ—Å—è—Ü—è—Ö</h3>
                    <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-12 gap-2">
                        ${forecastingData.forecasts.data.slice(0, 12).map((value, index) => {
                            const months = [
                                '—Å—ñ—á–µ–Ω—å', '–ª—é—Ç–∏–π', '–±–µ—Ä–µ–∑–µ–Ω—å', '–∫–≤—ñ—Ç–µ–Ω—å', '—Ç—Ä–∞–≤–µ–Ω—å', '—á–µ—Ä–≤–µ–Ω—å',
                                '–ª–∏–ø–µ–Ω—å', '—Å–µ—Ä–ø–µ–Ω—å', '–≤–µ—Ä–µ—Å–µ–Ω—å', '–∂–æ–≤—Ç–µ–Ω—å', '–ª–∏—Å—Ç–æ–ø–∞–¥', '–≥—Ä—É–¥–µ–Ω—å'
                            ];
                            
                            // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º—ñ—Å—è—Ü—è
                            const settings = forecastingData.settings || {};
                            let startMonthIndex = 0;
                            let startYear = new Date().getFullYear();
                            
                            if (settings.forecastStartMonthYear) {
                                const [year, month] = settings.forecastStartMonthYear.split('-');
                                startYear = parseInt(year);
                                startMonthIndex = parseInt(month) - 1;
                            } else if (settings.forecastStartMonth !== undefined) {
                                // –Ø–∫—â–æ –Ω–µ–º–∞—î forecastStartMonthYear, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                                startMonthIndex = settings.forecastStartMonth;
                                startYear = settings.forecastStartYear || new Date().getFullYear();
                            }
                            
                            const monthIndex = (startMonthIndex + index) % 12;
                            const year = startYear + Math.floor((startMonthIndex + index) / 12);
                            const monthName = months[monthIndex];
                            
                            return `
                                <div class="bg-gray-700 rounded p-3 text-center">
                                    <div class="text-xs text-gray-400 mb-1">${monthName} ${year}</div>
                                    <div class="text-sm font-bold text-blue-400">${formatCurrency(value || 0)}</div>
                                </div>
                            `;
                        }).join('')}
                    </div>
                </div>
            </div>
        `;
    } else {
        // –ö–ª–∞—Å–∏—á–Ω–∏–π –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è —ñ–Ω—à–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤
        content = `
            <div class="space-y-6">
                <!-- –ì—Ä–∞—Ñ—ñ–∫ –ø—Ä–æ–≥–Ω–æ–∑—É -->
                <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                    <h3 class="text-lg font-semibold text-white mb-4">üìà –ì—Ä–∞—Ñ—ñ–∫ –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ –º—ñ—Å—è—Ü—è—Ö</h3>
                    <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-12 gap-2">
                        ${forecastingData.forecasts.data.slice(0, 12).map((value, index) => {
                            const months = [
                                '—Å—ñ—á–µ–Ω—å', '–ª—é—Ç–∏–π', '–±–µ—Ä–µ–∑–µ–Ω—å', '–∫–≤—ñ—Ç–µ–Ω—å', '—Ç—Ä–∞–≤–µ–Ω—å', '—á–µ—Ä–≤–µ–Ω—å',
                                '–ª–∏–ø–µ–Ω—å', '—Å–µ—Ä–ø–µ–Ω—å', '–≤–µ—Ä–µ—Å–µ–Ω—å', '–∂–æ–≤—Ç–µ–Ω—å', '–ª–∏—Å—Ç–æ–ø–∞–¥', '–≥—Ä—É–¥–µ–Ω—å'
                            ];
                            
                            // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º—ñ—Å—è—Ü—è
                            const settings = forecastingData.settings || {};
                            let startMonthIndex = 0;
                            let startYear = new Date().getFullYear();
                            
                            if (settings.forecastStartMonthYear) {
                                const [year, month] = settings.forecastStartMonthYear.split('-');
                                startYear = parseInt(year);
                                startMonthIndex = parseInt(month) - 1;
                            } else if (settings.forecastStartMonth !== undefined) {
                                // –Ø–∫—â–æ –Ω–µ–º–∞—î forecastStartMonthYear, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                                startMonthIndex = settings.forecastStartMonth;
                                startYear = settings.forecastStartYear || new Date().getFullYear();
                            }
                            
                            const monthIndex = (startMonthIndex + index) % 12;
                            const year = startYear + Math.floor((startMonthIndex + index) / 12);
                            const monthName = months[monthIndex];
                            
                            return `
                                <div class="bg-gray-700 rounded p-3 text-center">
                                    <div class="text-xs text-gray-400 mb-1">${monthName} ${year}</div>
                                    <div class="text-sm font-bold text-blue-400">${formatCurrency(value || 0)}</div>
                                </div>
                            `;
                        }).join('')}
                    </div>
                </div>
            </div>
        `;
    }
    
    // –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤
    content += `
        <!-- –Ü—î—Ä–∞—Ä—Ö—ñ—á–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ -->
        <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <h3 class="text-lg font-semibold text-white mb-4">üè¢ –ü—Ä–æ–≥–Ω–æ–∑–∏ –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö —Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö</h3>
            <div id="hierarchicalForecasts" class="space-y-4">
                <!-- –¢—É—Ç –±—É–¥—É—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ -->
            </div>
        </div>
    `;
    
    container.innerHTML = content;
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –ø—Ä–æ–≥–Ω–æ–∑
    if (forecastingData.forecasts && forecastingData.forecasts.data) {
        console.log('üè¢ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏...');
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Å–∏—Å—Ç–µ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º
        setTimeout(() => {
            loadHierarchicalForecastsUpdated();
        }, 100);
    } else {
        console.log('‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏');
    }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫–æ–≤–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
function updateForecastSummary() {
    const monthlySum = calculateMonthlyForecast();
    const quarterlySum = calculateQuarterlyForecast();
    const halfYearSum = calculateHalfYearForecast();
    const yearlySum = monthlySum * 12; // –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π —Ä—ñ—á–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
    
    document.getElementById('monthlyForecastSum').textContent = formatCurrency(monthlySum);
    document.getElementById('quarterlyForecastSum').textContent = formatCurrency(quarterlySum);
    document.getElementById('halfYearForecastSum').textContent = formatCurrency(halfYearSum);
    document.getElementById('yearlyForecastSum').textContent = formatCurrency(yearlySum);
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—É
async function generateForecast() {
    if (isLoadingForecast) {
        console.log('‚è≥ –ü—Ä–æ–≥–Ω–æ–∑ –≤–∂–µ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è...');
        return;
    }

    console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ–≥–Ω–æ–∑—É...');
    isLoadingForecast = true;

    showLoadingModal();
    updateLoadingModal(5, '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è...');

    try {
        await new Promise(resolve => setTimeout(resolve, 300));

        const algorithm = document.getElementById('forecastingAlgorithm')?.value || 'client-lifecycle';
        const periods = parseInt(forecastingData.settings?.forecastPeriods) || 12;
        const startDate = forecastingData.settings?.forecastStartDate;
        const endDate = forecastingData.settings?.forecastEndDate;

        updateLoadingModal(15, '–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö...');
        let filteredSalesData = forecastingData.salesData;
        if (startDate && endDate) {
            filteredSalesData = forecastingData.salesData.filter(item => {
                if (!item.–î–∞—Ç–∞) return false;
                const itemDate = new Date(item.–î–∞—Ç–∞);
                return itemDate >= new Date(startDate) && itemDate <= new Date(endDate);
            });
        }

        if (filteredSalesData.length < 3) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è (–º—ñ–Ω—ñ–º—É–º 3 –∑–∞–ø–∏—Å–∏).');
        }

        updateLoadingModal(30, `–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—É "${algorithm}"...`);
        await new Promise(resolve => setTimeout(resolve, 500));

        let forecast;
        let forecastDetails;

        if (algorithm === 'client-lifecycle') {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∂–∏—Ç—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É –∑ UI
            const lifecycleSettings = {
                NEW_CLIENT_ORDERS: forecastingData.settings?.newClientOrders || 1,
                GROWING_CLIENT_MIN_ORDERS: forecastingData.settings?.growingClientMinOrders || 5,
                ACTIVE_CLIENT_MIN_ORDERS: forecastingData.settings?.activeClientMinOrders || 10,
                AT_RISK_MULTIPLIER: forecastingData.settings?.atRiskMultiplier || 3,
                ACTIVE_CLIENT_MULTIPLIER: forecastingData.settings?.activeClientMultiplier || 1.5,
                GROWING_CLIENT_MULTIPLIER: forecastingData.settings?.growingClientMultiplier || 2,
                FORECAST_REDUCTION_FOR_AT_RISK: (100 - (forecastingData.settings?.forecastReductionForAtRisk || 30)) / 100,
                MIN_CONFIDENCE_NEW: (forecastingData.settings?.minConfidenceNew || 30) / 100,
                MIN_CONFIDENCE_GROWING: (forecastingData.settings?.minConfidenceGrowing || 60) / 100,
                MIN_CONFIDENCE_ACTIVE: (forecastingData.settings?.minConfidenceActive || 80) / 100,
                MIN_CONFIDENCE_AT_RISK: (forecastingData.settings?.minConfidenceAtRisk || 40) / 100
            };
            
            forecastDetails = ClientLifecycleForecasting.forecastAllClients(filteredSalesData, periods, lifecycleSettings);
            const monthlyForecast = new Array(periods).fill(0);
            Object.values(forecastDetails.clientForecasts).forEach(clientForecast => {
                clientForecast.forecast.forEach((value, monthIndex) => {
                    if (monthIndex < monthlyForecast.length) {
                        monthlyForecast[monthIndex] += value;
                    }
                });
            });
            forecast = monthlyForecast;
        } else {
            const preparedData = SalesDataProcessor.prepareDataForForecasting(filteredSalesData, [], 'month');
            if (preparedData.length < 2) {
                throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞–≥—Ä–µ–≥–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è.');
            }
            switch (algorithm) {
                case 'trend': forecast = ForecastingAlgorithms.trendAnalysis(preparedData, periods); break;
                case 'seasonal': forecast = ForecastingAlgorithms.seasonalDecomposition(preparedData, 12, periods).forecast; break;
                case 'neural': forecast = ForecastingAlgorithms.neuralNetworkForecast(preparedData, periods); break;
                default: forecast = ForecastingAlgorithms.combinedForecast(preparedData, periods).combined; break;
            }
        }

        updateLoadingModal(80, '–§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤...');
        const validatedForecast = forecast.map(value => Math.max(0, value || 0));

        forecastingData.forecasts = {
            algorithm, periods,
            data: validatedForecast,
            generatedAt: new Date().toISOString(),
            details: forecastDetails
        };

        console.log('‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ:', forecastingData.forecasts);

        updateLoadingModal(100, '–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!');

        setTimeout(() => {
            hideLoadingModal();
            updateForecastSummary();
            switchForecastingTab('forecasts');
        }, 1500);

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ–≥–Ω–æ–∑—É:', error);
        hideLoadingModal();
        showNotification('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ–≥–Ω–æ–∑—É: ' + error.message, 'error');
    } finally {
        isLoadingForecast = false;
    }
}

function createForecastingPlan() {
    console.log('üìã –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É...');
    alert('–§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ');
}

function editForecastingPlan(planId) {
    console.log('‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É:', planId);
    alert('–§—É–Ω–∫—Ü—ñ—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ');
}

function deleteForecastingPlan(planId) {
    console.log('üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–ª–∞–Ω—É:', planId);
    alert('–§—É–Ω–∫—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–ª–∞–Ω—É –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ');
}

function addExcludedNomenclature() {
    console.log('‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏–∫–ª—é—á–µ–Ω–æ—ó –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏...');
    
    const select = document.getElementById('excludedNomenclatureSelect');
    const selectedValue = select?.value;
    
    if (!selectedValue) {
        showNotification('–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–∫–ª—é—á–µ–Ω–Ω—è', 'error');
        return;
    }
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–∞—Å–∏–≤ —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    if (!forecastingData.settings) {
        forecastingData.settings = {};
    }
    if (!forecastingData.settings.excludedNomenclature) {
        forecastingData.settings.excludedNomenclature = [];
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –Ω–µ –¥–æ–¥–∞–Ω–æ
    if (forecastingData.settings.excludedNomenclature.includes(selectedValue)) {
        showNotification('–¶—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –≤–∂–µ –≤–∏–∫–ª—é—á–µ–Ω–∞', 'error');
        return;
    }
    
    // –î–æ–¥–∞—î–º–æ –¥–æ —Å–ø–∏—Å–∫—É
    forecastingData.settings.excludedNomenclature.push(selectedValue);
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    renderSettingsTab();
    
    showNotification(`–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ "${selectedValue}" –¥–æ–¥–∞–Ω–∞ –¥–æ –≤–∏–∫–ª—é—á–µ–Ω—å`, 'success');
    console.log('‚úÖ –î–æ–¥–∞–Ω–æ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è:', selectedValue);
}

function removeExcludedNomenclature(item) {
    console.log('‚ûñ –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤–∏–∫–ª—é—á–µ–Ω–æ—ó –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏:', item);
    
    if (!forecastingData.settings?.excludedNomenclature) {
        showNotification('–°–ø–∏—Å–æ–∫ –≤–∏–∫–ª—é—á–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—ñ–π', 'error');
        return;
    }
    
    const index = forecastingData.settings.excludedNomenclature.indexOf(item);
    if (index === -1) {
        showNotification('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫—É –≤–∏–∫–ª—é—á–µ–Ω—å', 'error');
        return;
    }
    
    // –í–∏–¥–∞–ª—è—î–º–æ –∑—ñ —Å–ø–∏—Å–∫—É
    forecastingData.settings.excludedNomenclature.splice(index, 1);
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    renderSettingsTab();
    
    showNotification(`–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ "${item}" –≤–∏–¥–∞–ª–µ–Ω–∞ –∑ –≤–∏–∫–ª—é—á–µ–Ω—å`, 'success');
    console.log('‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è:', item);
}

function saveForecastingSettings() {
    console.log('üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è...');
    
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –Ω–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        const forecastStartMonthYear = document.getElementById('forecastStartMonthYear')?.value;
        
        // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ —Ñ–æ—Ä–º–∏
        const settings = {
            forecastStartDate: document.getElementById('forecastStartDate')?.value,
            forecastEndDate: document.getElementById('forecastEndDate')?.value,
            forecastStartMonthYear: forecastStartMonthYear, // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ø—Ä—è–º—É —è–∫ YYYY-MM
            forecastPeriods: parseInt(document.getElementById('forecastPeriods')?.value || 12),
            forecastConfidence: parseInt(document.getElementById('forecastConfidence')?.value || 80),
            seasonLength: parseInt(document.getElementById('seasonLength')?.value || 12),
            seasonalAdjustment: document.getElementById('seasonalAdjustment')?.value || 'auto',
            minOrderValue: parseFloat(document.getElementById('minOrderValue')?.value || 0),
            minOrderCount: parseInt(document.getElementById('minOrderCount')?.value || 1),
            excludedNomenclature: forecastingData.settings?.excludedNomenclature || [],
            
            // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∂–∏—Ç—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É –∫–ª—ñ—î–Ω—Ç–∞
            newClientOrders: parseInt(document.getElementById('newClientOrders')?.value || 1),
            growingClientMinOrders: parseInt(document.getElementById('growingClientMinOrders')?.value || 5),
            activeClientMinOrders: parseInt(document.getElementById('activeClientMinOrders')?.value || 10),
            atRiskMultiplier: parseFloat(document.getElementById('atRiskMultiplier')?.value || 3),
            activeClientMultiplier: parseFloat(document.getElementById('activeClientMultiplier')?.value || 1.5),
            growingClientMultiplier: parseFloat(document.getElementById('growingClientMultiplier')?.value || 2),
            forecastReductionForAtRisk: parseInt(document.getElementById('forecastReductionForAtRisk')?.value || 30),
            minConfidenceNew: parseInt(document.getElementById('minConfidenceNew')?.value || 30),
            minConfidenceGrowing: parseInt(document.getElementById('minConfidenceGrowing')?.value || 60),
            minConfidenceActive: parseInt(document.getElementById('minConfidenceActive')?.value || 80),
            minConfidenceAtRisk: parseInt(document.getElementById('minConfidenceAtRisk')?.value || 40)
        };
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
        forecastingData.settings = settings;
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
        localStorage.setItem('forecastingSettings', JSON.stringify(settings));
        
        showNotification('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!', 'success');
        console.log('‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', settings);
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É
        updateForecastStartDisplay();
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error);
        showNotification('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å', 'error');
    }
}

function resetForecastingSettings() {
    console.log('üîÑ –°–∫–∏–¥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è...');
    
    try {
        // –°–∫–∏–¥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        const defaultSettings = {
            forecastStartDate: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().split('T')[0],
            forecastEndDate: new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).toISOString().split('T')[0],
            forecastStartMonth: 0,
            forecastStartYear: new Date().getFullYear(),
            forecastPeriods: 12,
            forecastConfidence: 80,
            seasonLength: 12,
            seasonalAdjustment: 'auto',
            minOrderValue: 0,
            minOrderCount: 1,
            excludedNomenclature: [],
            
            // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∂–∏—Ç—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            newClientOrders: 1,
            growingClientMinOrders: 5,
            activeClientMinOrders: 10,
            atRiskMultiplier: 3,
            activeClientMultiplier: 1.5,
            growingClientMultiplier: 2,
            forecastReductionForAtRisk: 30,
            minConfidenceNew: 30,
            minConfidenceGrowing: 60,
            minConfidenceActive: 80,
            minConfidenceAtRisk: 40
        };
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
        forecastingData.settings = defaultSettings;
        
        // –í–∏–¥–∞–ª—è—î–º–æ –∑ localStorage
        localStorage.removeItem('forecastingSettings');
        
        // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä—É—î–º–æ –≤–∫–ª–∞–¥–∫—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        renderSettingsTab();
        
        showNotification('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ –¥–æ –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º!', 'success');
        console.log('‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ:', defaultSettings);
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error);
        showNotification('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å', 'error');
    }
}

function calculateMonthlyForecast() {
    try {
        if (!forecastingData.forecasts || !forecastingData.forecasts.data) {
            // –Ø–∫—â–æ –ø—Ä–æ–≥–Ω–æ–∑ —â–µ –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—ñ–≤
            const salesValues = forecastingData.salesData
                .filter(item => item.–í—ã—Ä—É—á–∫–∞ && !isNaN(parseFloat(item.–í—ã—Ä—É—á–∫–∞)))
                .map(item => parseFloat(item.–í—ã—Ä—É—á–∫–∞));
            
            if (salesValues.length === 0) return 0;
            
            const average = salesValues.reduce((sum, val) => sum + val, 0) / salesValues.length;
            return average;
        }
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º—ñ—Å—è—Ü—å –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        const startMonth = forecastingData.settings?.forecastStartMonth || 0;
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º—ñ—Å—è—Ü—è
        return forecastingData.forecasts.data[startMonth] || 0;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º—ñ—Å—è—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É:', error);
        return 0;
    }
}

function calculateQuarterlyForecast() {
    try {
        if (!forecastingData.forecasts || !forecastingData.forecasts.data) {
            const salesValues = forecastingData.salesData
                .filter(item => item.–í—ã—Ä—É—á–∫–∞ && !isNaN(parseFloat(item.–í—ã—Ä—É—á–∫–∞)))
                .map(item => parseFloat(item.–í—ã—Ä—É—á–∫–∞));
            
            if (salesValues.length === 0) return 0;
            
            const average = salesValues.reduce((sum, val) => sum + val, 0) / salesValues.length;
            return average * 3; // –ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
        }
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ - —Å—É–º–∞ –ø–µ—Ä—à–∏—Ö 3 –º—ñ—Å—è—Ü—ñ–≤
        const monthlyForecasts = forecastingData.forecasts.data.slice(0, 3);
        return monthlyForecasts.reduce((sum, val) => sum + (val || 0), 0);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É:', error);
        return 0;
    }
}

function calculateHalfYearForecast() {
    try {
        if (!forecastingData.forecasts || !forecastingData.forecasts.data) {
            const salesValues = forecastingData.salesData
                .filter(item => item.–í—ã—Ä—É—á–∫–∞ && !isNaN(parseFloat(item.–í—ã—Ä—É—á–∫–∞)))
                .map(item => parseFloat(item.–í—ã—Ä—É—á–∫–∞));
            
            if (salesValues.length === 0) return 0;
            
            const average = salesValues.reduce((sum, val) => sum + val, 0) / salesValues.length;
            return average * 6; // –ü—ñ–≤—Ä—ñ—á–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
        }
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ - —Å—É–º–∞ –ø–µ—Ä—à–∏—Ö 6 –º—ñ—Å—è—Ü—ñ–≤
        const monthlyForecasts = forecastingData.forecasts.data.slice(0, 6);
        return monthlyForecasts.reduce((sum, val) => sum + (val || 0), 0);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø—ñ–≤—Ä—ñ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É:', error);
        return 0;
    }
}

// –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
function formatPlanningPeriod(periodType, startMonth = 0) {
    const months = [
        '—Å—ñ—á–µ–Ω—å', '–ª—é—Ç–∏–π', '–±–µ—Ä–µ–∑–µ–Ω—å', '–∫–≤—ñ—Ç–µ–Ω—å', '—Ç—Ä–∞–≤–µ–Ω—å', '—á–µ—Ä–≤–µ–Ω—å',
        '–ª–∏–ø–µ–Ω—å', '—Å–µ—Ä–ø–µ–Ω—å', '–≤–µ—Ä–µ—Å–µ–Ω—å', '–∂–æ–≤—Ç–µ–Ω—å', '–ª–∏—Å—Ç–æ–ø–∞–¥', '–≥—Ä—É–¥–µ–Ω—å'
    ];
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    const settings = forecastingData.settings || {};
    const forecastStartMonth = settings.forecastStartMonth || 0;
    const forecastStartYear = settings.forecastStartYear || new Date().getFullYear();
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º—ñ—Å—è—Ü—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É
    const startMonthIndex = forecastStartMonth % 12;
    const startYear = forecastStartYear;
    
    switch (periodType) {
        case 'month':
            return `${months[startMonthIndex]} ${startYear}`;
        case 'quarter':
            const quarter = Math.floor(startMonthIndex / 3) + 1;
            const quarterMonths = [];
            for (let i = 0; i < 3; i++) {
                const monthIndex = (startMonthIndex + i) % 12;
                const year = startYear + Math.floor((startMonthIndex + i) / 12);
                quarterMonths.push(`${months[monthIndex]} ${year}`);
            }
            return `${quarter} –∫–≤–∞—Ä—Ç–∞–ª ${startYear} (${quarterMonths.join(', ')})`;
        case 'half_year':
            const halfYearMonths = [];
            for (let i = 0; i < 6; i++) {
                const monthIndex = (startMonthIndex + i) % 12;
                const year = startYear + Math.floor((startMonthIndex + i) / 12);
                halfYearMonths.push(`${months[monthIndex]} ${year}`);
            }
            const halfYearNumber = Math.floor(startMonthIndex / 6) + 1;
            return `${halfYearNumber} –ø—ñ–≤—Ä—ñ—á—á—è ${startYear} (${halfYearMonths.join(', ')})`;
        case 'year':
            const yearMonths = [];
            for (let i = 0; i < 12; i++) {
                const monthIndex = (startMonthIndex + i) % 12;
                const year = startYear + Math.floor((startMonthIndex + i) / 12);
                yearMonths.push(`${months[monthIndex]} ${year}`);
            }
            return `${startYear} —Ä—ñ–∫ (${yearMonths.join(', ')})`;
        default:
            return `${months[startMonthIndex]} ${startYear}`;
    }
}

// –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö
function getDetailedForecast(periodType) {
    if (!forecastingData.forecasts || !forecastingData.forecasts.data) {
        return null;
    }
    
    const forecastData = forecastingData.forecasts.data;
    const months = [
        '—Å—ñ—á–µ–Ω—å', '–ª—é—Ç–∏–π', '–±–µ—Ä–µ–∑–µ–Ω—å', '–∫–≤—ñ—Ç–µ–Ω—å', '—Ç—Ä–∞–≤–µ–Ω—å', '—á–µ—Ä–≤–µ–Ω—å',
        '–ª–∏–ø–µ–Ω—å', '—Å–µ—Ä–ø–µ–Ω—å', '–≤–µ—Ä–µ—Å–µ–Ω—å', '–∂–æ–≤—Ç–µ–Ω—å', '–ª–∏—Å—Ç–æ–ø–∞–¥', '–≥—Ä—É–¥–µ–Ω—å'
    ];
    
    const currentDate = new Date();
    const currentYear = currentDate.getFullYear();
    const currentMonth = currentDate.getMonth();
    
    switch (periodType) {
        case 'month':
            return [{
                period: formatPlanningPeriod('month'),
                value: forecastData[0] || 0
            }];
        case 'quarter':
            return forecastData.slice(0, 3).map((value, index) => {
                const monthIndex = (currentMonth + index) % 12;
                const year = currentYear + Math.floor((currentMonth + index) / 12);
                return {
                    period: `${months[monthIndex]} ${year}`,
                    value: value || 0
                };
            });
        case 'half_year':
            return forecastData.slice(0, 6).map((value, index) => {
                const monthIndex = (currentMonth + index) % 12;
                const year = currentYear + Math.floor((currentMonth + index) / 12);
                return {
                    period: `${months[monthIndex]} ${year}`,
                    value: value || 0
                };
            });
        case 'year':
            return forecastData.slice(0, 12).map((value, index) => {
                const monthIndex = (currentMonth + index) % 12;
                const year = currentYear + Math.floor((currentMonth + index) / 12);
                return {
                    period: `${months[monthIndex]} ${year}`,
                    value: value || 0
                };
            });
        default:
            return [{
                period: formatPlanningPeriod('month'),
                value: forecastData[0] || 0
            }];
    }
}

// –°—Ç–∞—Ä–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è loadHierarchicalForecastsUpdated

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è/–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ–π
window.toggleDepartmentForecast = function(deptId) {
    const content = document.getElementById(`content-${deptId}`);
    const arrow = document.getElementById(`arrow-${deptId}`);
    
    if (content.classList.contains('hidden')) {
        content.classList.remove('hidden');
        arrow.style.transform = 'rotate(90deg)';
    } else {
        content.classList.add('hidden');
        arrow.style.transform = 'rotate(0deg)';
    }
};

window.toggleManagerForecast = function(managerId) {
    const content = document.getElementById(`content-${managerId}`);
    const arrow = document.getElementById(`arrow-${managerId}`);
    
    if (content.classList.contains('hidden')) {
        content.classList.remove('hidden');
        arrow.style.transform = 'rotate(90deg)';
    } else {
        content.classList.add('hidden');
        arrow.style.transform = 'rotate(0deg)';
    }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
window.showManagerClientsModal = function(managerName) {
    console.log('üë• –ü–æ–∫–∞–∑—É—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', managerName);
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    const managerClients = Object.entries(forecastingData.clientManagerDirectory)
        .filter(([code, info]) => info && managerName && info.trim() === managerName.trim())
        .map(([code, info]) => {
            // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –∫–ª—ñ—î–Ω—Ç—É
            const clientSales = forecastingData.salesData
                .filter(item => item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] === code && item.–í—ã—Ä—É—á–∫–∞)
                .map(item => parseFloat(item.–í—ã—Ä—É—á–∫–∞));
            
            let clientForecast = 0;
            if (clientSales.length > 0) {
                clientForecast = clientSales.reduce((sum, val) => sum + val, 0) / clientSales.length;
            }
            
            return {
                code,
                name: info,
                forecast: clientForecast,
                salesCount: clientSales.length
            };
        })
        .sort((a, b) => b.forecast - a.forecast); // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º –ø—Ä–æ–≥–Ω–æ–∑—É
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    const modalHtml = `
        <div id="managerClientsModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-gray-800 rounded-lg p-6 max-w-4xl w-full mx-4 max-h-[80vh] overflow-y-auto">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-semibold text-white">–ö–ª—ñ—î–Ω—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${managerName}</h3>
                    <button onclick="closeManagerClientsModal()" class="text-gray-400 hover:text-white text-2xl">&times;</button>
                </div>
                
                <div class="mb-4 text-sm text-gray-400">
                    –í—Å—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${managerClients.length}
                </div>
                
                <div class="overflow-x-auto">
                    <table class="w-full text-sm">
                        <thead>
                            <tr class="border-b border-gray-700">
                                <th class="text-left py-2 text-gray-300">–ö–æ–¥ –∫–ª—ñ—î–Ω—Ç–∞</th>
                                <th class="text-left py-2 text-gray-300">–ù–∞–∑–≤–∞ –∫–ª—ñ—î–Ω—Ç–∞</th>
                                <th class="text-right py-2 text-gray-300">–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤</th>
                                <th class="text-right py-2 text-gray-300">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ–≤</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${managerClients.map(client => `
                                <tr class="border-b border-gray-700 hover:bg-gray-700">
                                    <td class="py-2 text-gray-200">${client.code}</td>
                                    <td class="py-2 text-gray-200">${client.name}</td>
                                    <td class="py-2 text-right text-green-400 font-semibold">${formatCurrency(client.forecast)}</td>
                                    <td class="py-2 text-right text-gray-400">${client.salesCount}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
                
                <div class="mt-4 text-right">
                    <button onclick="closeManagerClientsModal()" class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700">
                        –ó–∞–∫—Ä–∏—Ç–∏
                    </button>
                </div>
            </div>
        </div>
    `;
    
    // –î–æ–¥–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–æ DOM
    document.body.insertAdjacentHTML('beforeend', modalHtml);
};

window.closeManagerClientsModal = function() {
    const modal = document.getElementById('managerClientsModal');
    if (modal) {
        modal.remove();
    }
};

// –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è loadHierarchicalForecasts –∑ –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
function loadHierarchicalForecastsUpdated() {
    console.log('üè¢ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤...');
    console.log('üë§ UserAccess:', userAccess);
    console.log('üë• ManagersData:', managersData);
    console.log('üè¢ DepartmentsData:', departmentsData);
    
    const container = document.getElementById('hierarchicalForecasts');
    if (!container) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä hierarchicalForecasts –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
        // –°–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 200–º—Å
        setTimeout(() => {
            const retryContainer = document.getElementById('hierarchicalForecasts');
            if (retryContainer) {
                console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π —Å–ø—Ä–æ–±—ñ');
                loadHierarchicalForecastsUpdated();
            } else {
                console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—Å–µ —â–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏');
            }
        }, 200);
        return;
    }

    // –§—É–Ω–∫—Ü—ñ—ó —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
    function updateHierarchicalProgress(percent, message, step) {
        const progressBar = container.querySelector('#hierarchical-progress-bar');
        const loadingMessage = container.querySelector('#hierarchical-loading-message');
        const loadingStep = container.querySelector('#hierarchical-loading-step');
        
        if (progressBar) progressBar.style.width = `${percent}%`;
        if (loadingMessage) loadingMessage.textContent = message;
        if (loadingStep) loadingStep.textContent = step;
    }

    // –ü–æ–∫–∞–∑—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º
    container.innerHTML = `
        <div class="text-center py-8">
            <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4"></div>
            <div>
                <p id="hierarchical-loading-message" class="text-lg font-medium text-gray-200 mb-2">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤...</p>
                <div class="bg-gray-700 rounded-full h-2 max-w-md mx-auto mb-2">
                    <div id="hierarchical-progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                </div>
                <p id="hierarchical-loading-step" class="text-sm text-gray-400">–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è...</p>
            </div>
        </div>
    `;

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ setTimeout –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó –ø—Ä–æ—Ü–µ—Å—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    setTimeout(() => {
        updateHierarchicalProgress(20, '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö...', '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ —Ç–∞ –≤—ñ–¥–¥—ñ–ª—ñ–≤');
        
        setTimeout(() => {
            updateHierarchicalProgress(40, '–û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö...', '–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–¥–¥—ñ–ª—ñ–≤');
            
            setTimeout(() => {
                updateHierarchicalProgress(60, '–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤...', '–ê–Ω–∞–ª—ñ–∑ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö');
                
                setTimeout(() => {
                    updateHierarchicalProgress(80, '–§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤...', '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏');
                    
                    setTimeout(() => {
                        updateHierarchicalProgress(100, '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è...', '–§—ñ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è');
                        
                        setTimeout(() => {
                            // –¢–µ–ø–µ—Ä –≤–∏–∫–æ–Ω—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –ª–æ–≥—ñ–∫—É
                            processHierarchicalForecasts();
                        }, 300);
                    }, 200);
                }, 300);
            }, 300);
        }, 300);
    }, 200);
}

// –í–∏–Ω–µ—Å–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤
function processHierarchicalForecasts() {
    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
        if (!managersData || managersData.length === 0) {
            managersData = [
                { id: 'emp1', name: '–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ', department: 'dept1' },
                { id: 'emp2', name: '–ú–∞—Ä—ñ—è –ö–æ–≤–∞–ª–µ–Ω–∫–æ', department: 'dept1' },
                { id: 'emp3', name: '–û–ª–µ–∫—Å–∞–Ω–¥—Ä –°–∏–¥–æ—Ä–µ–Ω–∫–æ', department: 'dept2' }
            ];
        }
        
        if (!departmentsData || departmentsData.length === 0) {
            departmentsData = [
                { id: 'dept1', name: '–í—ñ–¥–¥—ñ–ª –ø—Ä–æ–¥–∞–∂—ñ–≤' },
                { id: 'dept2', name: '–í—ñ–¥–¥—ñ–ª –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É' }
            ];
        }
        
        if (!forecastingData.clientManagerDirectory) {
            forecastingData.clientManagerDirectory = {};
        }
        
        if (!forecastingData.salesData) {
            forecastingData.salesData = [];
        }
        
        if (!forecastingData.forecasts) {
            forecastingData.forecasts = { data: [] };
        }
        
        if (!forecastingData.settings) {
            forecastingData.settings = {};
        }
        
        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≤—ñ–¥–¥—ñ–ª–∏ –∑ Firebase –¥–∞–Ω–∏—Ö
        let visibleDepartments = departmentsData;
        if (!userAccess.isAdmin && userAccess.departmentId) {
            if (userAccess.role && (userAccess.role.includes('–º–µ–Ω–µ–¥–∂') || userAccess.role.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫'))) {
                visibleDepartments = departmentsData.filter(dep => dep.id === userAccess.departmentId);
            }
        }
        
        const container = document.getElementById('hierarchicalForecasts');
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä hierarchicalForecasts –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
            return;
        }
        
        if (visibleDepartments.length === 0) {
            container.innerHTML = `
                <div class="text-center py-4 mb-4">
                    <div class="text-yellow-400 text-sm">‚ö†Ô∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–¥–¥—ñ–ª—ñ–≤</div>
                    <div class="text-gray-500 text-xs">–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Firebase</div>
                </div>
            `;
            return;
        }
        
        // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ, —è–∫—â–æ –≤–æ–Ω–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è
        let testDataMessage = '';
        if (managersData.length > 0 && managersData[0].id === 'emp1') {
            testDataMessage = `
                <div class="text-center py-4 mb-4">
                    <div class="text-yellow-400 text-sm">‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ</div>
                    <div class="text-gray-500 text-xs">–î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ Firebase</div>
                </div>
            `;
        }
        
        container.innerHTML = testDataMessage + visibleDepartments.map(dept => {
            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ —Ü—å–æ–≥–æ –≤—ñ–¥–¥—ñ–ª—É
            const departmentManagers = managersData.filter(emp => {
                if (!emp.department) {
                    return false;
                }
                if (typeof emp.department === 'object' && emp.department.id) {
                    return emp.department.id === dept.id;
                } else if (typeof emp.department === 'string') {
                    return emp.department === dept.id;
                }
                return false;
            });
            
            // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤—ñ–¥–¥—ñ–ª—É (–°–£–ú–ê –≤—Å—ñ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤)
            let departmentTotalForecast = 0;
            const managerForecasts = departmentManagers.map(manager => {
                // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                const managerClients = Object.entries(forecastingData.clientManagerDirectory || {})
                    .filter(([code, info]) => {
                        if (!info || !manager.name) {
                            return false;
                        }
                        
                        // –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
                        return matchManagerName(info.trim(), manager.name.trim());
                    })
                    .map(([code, info]) => code);
                
                // –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–ª—ñ—î–Ω—Ç—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
                let finalManagerClients = managerClients;
                if (managerClients.length === 0) {
                    finalManagerClients = [
                        `CLIENT_${manager.id}_1`,
                        `CLIENT_${manager.id}_2`,
                        `CLIENT_${manager.id}_3`
                    ];
                }
                
                // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É (–°–£–ú–ê –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤)
                let managerTotalForecast = 0;
                const clientForecasts = finalManagerClients.map(clientCode => {
                    let clientForecast = 0;
                    
                    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ –∫–ª—ñ—î–Ω—Ç–∞
                    const clientSales = (forecastingData.salesData || [])
                        .filter(item => item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] === clientCode && item.–í—ã—Ä—É—á–∫–∞)
                        .map(item => parseFloat(item.–í—ã—Ä—É—á–∫–∞));
                    
                    if (clientSales.length > 0) {
                        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–æ—Ç–æ–≤—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ –∑ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
                        if (forecastingData.forecasts && forecastingData.forecasts.algorithm === 'client-lifecycle') {
                            // –î–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º—É –∂–∏—Ç—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–æ—Ç–æ–≤—ñ –¥–µ—Ç–∞–ª—å–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏
                            const clientForecastData = forecastingData.forecasts.details?.clientForecasts?.[clientCode];
                            if (clientForecastData && clientForecastData.forecast && clientForecastData.forecast.length > 0) {
                                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—É–º—É –≤—Å—ñ—Ö –º—ñ—Å—è—Ü—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É
                                clientForecast = clientForecastData.forecast.reduce((sum, val) => sum + val, 0);
                            } else {
                                // –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É, –ø—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é
                                clientForecast = 0;
                            }
                        } else {
                            // –î–ª—è —ñ–Ω—à–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –¥–æ–ª—é –∫–ª—ñ—î–Ω—Ç–∞ –≤ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂–∞—Ö
                            const totalHistoricalSales = (forecastingData.salesData || [])
                                .filter(item => item.–í—ã—Ä—É—á–∫–∞)
                                .reduce((sum, item) => sum + parseFloat(item.–í—ã—Ä—É—á–∫–∞), 0);
                            
                            if (totalHistoricalSales > 0) {
                                const clientHistoricalSales = clientSales.reduce((sum, val) => sum + val, 0);
                                const clientShare = clientHistoricalSales / totalHistoricalSales;
                                
                                // –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–æ –¥–æ–ª—ñ –∫–ª—ñ—î–Ω—Ç–∞
                                const totalForecast = forecastingData.forecasts.data.reduce((sum, val) => sum + val, 0);
                                clientForecast = totalForecast * clientShare;
                            } else {
                                // –Ø–∫—â–æ –Ω–µ–º–∞—î —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö, –ø—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é
                                clientForecast = 0;
                            }
                        }
                    } else {
                        // –ö–ª—ñ—î–Ω—Ç –±–µ–∑ —ñ—Å—Ç–æ—Ä—ñ—ó –ø—Ä–æ–¥–∞–∂—ñ–≤ - –ø—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é
                        clientForecast = 0;
                    }
                    
                    managerTotalForecast += clientForecast;
                    return { clientCode, clientForecast };
                });
                
                departmentTotalForecast += managerTotalForecast;
                
                return {
                    manager,
                    managerTotalForecast,
                    clientForecasts,
                    clientCount: managerClients.length
                };
            });
            
            const safeDeptId = `dept-${dept.id}`.replace(/[^\w-]/g, '_');
            
            return `
                <div class="bg-gray-800 rounded-lg border border-gray-700">
                    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ñ–¥–¥—ñ–ª—É -->
                    <div class="flex justify-between items-center p-4 cursor-pointer hover:bg-gray-750 transition-colors" 
                         onclick="toggleDepartmentForecast('${safeDeptId}')">
                        <div class="flex items-center gap-3">
                            <svg class="w-5 h-5 text-gray-400 transition-transform duration-200" id="arrow-${safeDeptId}" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"/>
                            </svg>
                            <h5 class="text-lg font-semibold text-white">${dept.name}</h5>
                        </div>
                        <div class="text-right">
                            <div class="text-2xl font-bold text-blue-400">${formatCurrency(departmentTotalForecast)}</div>
                            <div class="text-sm text-gray-400">${departmentManagers.length} –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤</div>
                        </div>
                    </div>
                    
                    <!-- –î–µ—Ç–∞–ª—ñ –≤—ñ–¥–¥—ñ–ª—É (—Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ) -->
                    <div id="content-${safeDeptId}" class="hidden px-4 pb-4">
                        <div class="space-y-4">
                            ${managerForecasts.map(({ manager, managerTotalForecast, clientForecasts, clientCount }) => {
                                const safeManagerId = `manager-${manager.id}`.replace(/[^\w-]/g, '_');
                                
                                return `
                                    <div class="bg-gray-700 rounded-lg border border-gray-600">
                                        <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ -->
                                        <div class="flex justify-between items-center p-3 cursor-pointer hover:bg-gray-650 transition-colors" 
                                             onclick="toggleManagerForecast('${safeManagerId}')">
                                            <div class="flex items-center gap-3">
                                                <svg class="w-4 h-4 text-gray-400 transition-transform duration-200" id="arrow-${safeManagerId}" fill="currentColor" viewBox="0 0 20 20">
                                                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"/>
                                                </svg>
                                                <span class="text-white font-medium">${manager.name}</span>
                                            </div>
                                            <div class="text-right">
                                                <div class="text-lg font-bold text-purple-400">${formatCurrency(managerTotalForecast)}</div>
                                                <div class="text-sm text-gray-400">${clientCount} –∫–ª—ñ—î–Ω—Ç—ñ–≤</div>
                                            </div>
                                        </div>
                                        
                                        <!-- –î–µ—Ç–∞–ª—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ) -->
                                        <div id="content-${safeManagerId}" class="hidden px-3 pb-3">
                                            <div class="flex justify-between items-center mb-3">
                                                <span class="text-gray-400 text-sm">–¢–æ–ø –∫–ª—ñ—î–Ω—Ç—ñ–≤:</span>
                                                <button onclick="showManagerClientsModal('${manager.name}')" 
                                                        class="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700">
                                                    üë• –í—Å—ñ –∫–ª—ñ—î–Ω—Ç–∏ (${clientCount})
                                                </button>
                                            </div>
                                            <div class="space-y-2">
                                                ${clientForecasts.slice(0, 10).map(({ clientCode, clientForecast }) => {
                                                    const clientName = forecastingData.clientManagerDirectory[clientCode]?.name || clientCode;
                                                    
                                                    return `
                                                        <div class="flex justify-between items-center p-2 bg-gray-600 rounded">
                                                            <span class="text-gray-200 text-sm">${clientName}</span>
                                                            <span class="text-green-400 font-semibold text-sm">${formatCurrency(clientForecast)}</span>
                                                        </div>
                                                    `;
                                                }).join('')}
                                                ${clientForecasts.length > 10 ? `
                                                    <div class="text-center py-2">
                                                        <span class="text-gray-400 text-sm">... —Ç–∞ —â–µ ${clientForecasts.length - 10} –∫–ª—ñ—î–Ω—Ç—ñ–≤</span>
                                                    </div>
                                                ` : ''}
                                            </div>
                                        </div>
                                    </div>
                                `;
                            }).join('')}
                        </div>
                    </div>
                </div>
            `;
        }).join('');
        
        // –Ü—î—Ä–∞—Ä—Ö—ñ—á–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤:', error);
        console.error('üîç –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:', error.stack);
    }
}

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
function toggleDepartmentForecast(deptId) {
    const content = document.getElementById(`content-${deptId}`);
    const arrow = document.getElementById(`arrow-${deptId}`);
    
    if (content && arrow) {
        const isHidden = content.classList.contains('hidden');
        content.classList.toggle('hidden');
        arrow.style.transform = isHidden ? 'rotate(90deg)' : 'rotate(0deg)';
    }
}

function toggleManagerForecast(managerId) {
    const content = document.getElementById(`content-${managerId}`);
    const arrow = document.getElementById(`arrow-${managerId}`);
    
    if (content && arrow) {
        const isHidden = content.classList.contains('hidden');
        content.classList.toggle('hidden');
        arrow.style.transform = isHidden ? 'rotate(90deg)' : 'rotate(0deg)';
    }
}

function showManagerClientsModal(managerName) {
    // –ü—Ä–æ—Å—Ç–∞ –º–æ–¥–∞–ª—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    alert(`–ö–ª—ñ—î–Ω—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ${managerName}:\n\n–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ.`);
}



// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatCurrency(amount) {
    return new Intl.NumberFormat('uk-UA', {
        style: 'currency',
        currency: 'UAH',
        minimumFractionDigits: 0
    }).format(amount || 0);
}

function getCompletionColor(plan, fact) {
    const percentage = getCompletionPercentage(plan, fact);
    if (percentage >= 100) return 'text-green-400';
    if (percentage >= 80) return 'text-yellow-400';
    return 'text-red-400';
}

function getCompletionPercentage(plan, fact) {
    if (!plan || plan === 0) return 0;
    return Math.round((fact || 0) / plan * 100);
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–π
function initForecastingCharts() {
    console.log('üìä –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤...');
}

function generateNomenclatureOptions() {
    console.log('üìã –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–ø—Ü—ñ–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏...');
    
    const select = document.getElementById('excludedNomenclatureSelect');
    if (!select) return;
    
    // –û—á–∏—â–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –æ–ø—Ü—ñ—ó
    select.innerHTML = '<option value="">–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–∫–ª—é—á–µ–Ω–Ω—è</option>';
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –Ω–∞–∑–≤–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –∑ –¥–∞–Ω–∏—Ö
    const nomenclatureSet = new Set();
    
    forecastingData.salesData.forEach(item => {
        if (item['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] && typeof item['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] === 'string') {
            nomenclatureSet.add(item['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞']);
        }
        if (item['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞.–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] && typeof item['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞.–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] === 'string') {
            nomenclatureSet.add(item['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞.–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']);
        }
    });
    
    // –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ—ó –¥–æ select
    const nomenclatureArray = Array.from(nomenclatureSet).sort();
    nomenclatureArray.forEach(nomenclature => {
        const option = document.createElement('option');
        option.value = nomenclature;
        option.textContent = nomenclature;
        select.appendChild(option);
    });
    
    console.log(`üìã –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ ${nomenclatureArray.length} –æ–ø—Ü—ñ–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏`);
}

function updateForecastStartDisplay() {
    const displayElement = document.getElementById('currentForecastStartDisplay');
    const monthYearInput = document.getElementById('forecastStartMonthYear');
    
    if (displayElement && monthYearInput && monthYearInput.value) {
        const [year, month] = monthYearInput.value.split('-');
        const targetDate = new Date(parseInt(year), parseInt(month) - 1, 1);
        const months = [
            '—Å—ñ—á–µ–Ω—å', '–ª—é—Ç–∏–π', '–±–µ—Ä–µ–∑–µ–Ω—å', '–∫–≤—ñ—Ç–µ–Ω—å', '—Ç—Ä–∞–≤–µ–Ω—å', '—á–µ—Ä–≤–µ–Ω—å',
            '–ª–∏–ø–µ–Ω—å', '—Å–µ—Ä–ø–µ–Ω—å', '–≤–µ—Ä–µ—Å–µ–Ω—å', '–∂–æ–≤—Ç–µ–Ω—å', '–ª–∏—Å—Ç–æ–ø–∞–¥', '–≥—Ä—É–¥–µ–Ω—å'
        ];
        displayElement.textContent = `${months[targetDate.getMonth()]} ${targetDate.getFullYear()}`;
    }
}

function initSettingsHandlers() {
    console.log('‚öôÔ∏è –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...');
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    const forecastStartMonthYearInput = document.getElementById('forecastStartMonthYear');
    if (forecastStartMonthYearInput) {
        forecastStartMonthYearInput.addEventListener('change', () => {
            console.log('üìÖ –ó–º—ñ–Ω–µ–Ω–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º—ñ—Å—è—Ü—å/—Ä—ñ–∫:', forecastStartMonthYearInput.value);
            updateForecastStartDisplay();
        });
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
        type === 'success' ? 'bg-green-600 text-white' :
        type === 'error' ? 'bg-red-600 text-white' :
        'bg-blue-600 text-white'
    }`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 5000);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
function showLoadingModal() {
    const modal = document.getElementById('forecastingLoadingModal');
    if (modal) modal.classList.remove('hidden');
}

function hideLoadingModal() {
    const modal = document.getElementById('forecastingLoadingModal');
    if (modal) modal.classList.add('hidden');
}

function updateLoadingModal(progress, status) {
    const progressBar = document.getElementById('loadingModalProgressBar');
    const statusText = document.getElementById('loadingModalStatus');
    if (progressBar) progressBar.style.width = `${progress}%`;
    if (statusText) statusText.textContent = status;
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ ui.js
window.initForecastingModule = initForecastingModule;

// –†–æ–±–∏–º–æ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏
window.formatPlanningPeriod = formatPlanningPeriod;
window.getDetailedForecast = getDetailedForecast;
window.calculateMonthlyForecast = calculateMonthlyForecast;
window.calculateQuarterlyForecast = calculateQuarterlyForecast;
window.calculateHalfYearForecast = calculateHalfYearForecast;
window.generateForecast = generateForecast;
window.loadHierarchicalForecasts = loadHierarchicalForecastsUpdated;
window.renderForecastsTab = renderForecastsTab;
window.renderSettingsTab = renderSettingsTab;
window.renderPlansTab = renderPlansTab;
window.loadForecastingPlans = loadForecastingPlans;
window.createForecastingPlan = createForecastingPlan;
window.editForecastingPlan = editForecastingPlan;
window.deleteForecastingPlan = deleteForecastingPlan;
window.addExcludedNomenclature = addExcludedNomenclature;
window.removeExcludedNomenclature = removeExcludedNomenclature;
window.saveForecastingSettings = saveForecastingSettings;
window.resetForecastingSettings = resetForecastingSettings;
window.initForecastingCharts = initForecastingCharts;
window.generateNomenclatureOptions = generateNomenclatureOptions;
window.initSettingsHandlers = initSettingsHandlers;
window.formatCurrency = formatCurrency;
window.getCompletionColor = getCompletionColor;
window.getCompletionPercentage = getCompletionPercentage;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
function matchManagerName(clientManagerName, firebaseManagerName) {
    if (!clientManagerName || !firebaseManagerName) {
        return false;
    }
    
    // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —ñ–º–µ–Ω–∞ (–ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏, –ø—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É)
    const normalizeName = (name) => {
        return name.toLowerCase()
            .replace(/\s+/g, ' ')
            .trim()
            .replace(/[—ñ—ó]/g, 'i') // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏
            .replace(/[—î]/g, 'e')
            .replace(/[—ó]/g, 'i');
    };
    
    const normalizedClient = normalizeName(clientManagerName);
    const normalizedFirebase = normalizeName(firebaseManagerName);
    
    // –¢–æ—á–Ω–µ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è
    if (normalizedClient === normalizedFirebase) {
        return true;
    }
    
    // –ß–∞—Å—Ç–∫–æ–≤–µ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è (—è–∫—â–æ –æ–¥–Ω–µ —ñ–º'—è –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—à–µ)
    if (normalizedClient.includes(normalizedFirebase) || normalizedFirebase.includes(normalizedClient)) {
        return true;
    }
    
    // –ó—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –ø–æ –ø—Ä—ñ–∑–≤–∏—â—É (–æ—Å—Ç–∞–Ω–Ω—î —Å–ª–æ–≤–æ)
    const clientWords = normalizedClient.split(' ');
    const firebaseWords = normalizedFirebase.split(' ');
    
    if (clientWords.length > 0 && firebaseWords.length > 0) {
        const clientLastName = clientWords[clientWords.length - 1];
        const firebaseLastName = firebaseWords[firebaseWords.length - 1];
        
        if (clientLastName === firebaseLastName) {
            return true;
        }
    }
    
    return false;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∂–∏—Ç—Ç—î–≤–æ–º—É —Ü–∏–∫–ª—É
function renderLifecycleStats(clientForecasts) {
    const lifecycleStats = {
        new: { count: 0, totalForecast: 0 },
        growing: { count: 0, totalForecast: 0 },
        active: { count: 0, totalForecast: 0 },
        'at-risk': { count: 0, totalForecast: 0 }
    };
    
    Object.values(clientForecasts).forEach(client => {
        const stage = client.lifecycleStage;
        if (lifecycleStats[stage]) {
            lifecycleStats[stage].count++;
            lifecycleStats[stage].totalForecast += client.forecast.reduce((sum, val) => sum + val, 0);
        }
    });
    
    const stageNames = {
        new: '–ù–æ–≤—ñ –∫–ª—ñ—î–Ω—Ç–∏',
        growing: '–†–æ–∑–≤–∏–≤–∞—é—á—ñ—Å—è',
        active: '–ê–∫—Ç–∏–≤–Ω—ñ',
        'at-risk': '–ì—Ä—É–ø–∞ —Ä–∏–∑–∏–∫—É'
    };
    
    const stageColors = {
        new: 'text-blue-400',
        growing: 'text-green-400',
        active: 'text-purple-400',
        'at-risk': 'text-red-400'
    };
    
    return Object.entries(lifecycleStats).map(([stage, stats]) => `
        <div class="text-center p-4 bg-gray-700 rounded-lg">
            <div class="text-2xl font-bold ${stageColors[stage]}">${stats.count}</div>
            <div class="text-sm text-gray-400 mb-2">${stageNames[stage]}</div>
            <div class="text-xs text-gray-500">${formatCurrency(stats.totalForecast)} –ø—Ä–æ–≥–Ω–æ–∑</div>
        </div>
    `).join('');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É —Ç–æ–ø –∫–ª—ñ—î–Ω—Ç—ñ–≤
function renderTopClients(clientForecasts) {
    const topClients = Object.entries(clientForecasts)
        .map(([code, client]) => ({
            code,
            ...client,
            yearlyForecast: client.forecast.reduce((sum, val) => sum + val, 0)
        }))
        .sort((a, b) => b.yearlyForecast - a.yearlyForecast)
        .slice(0, 10);
    
    const stageNames = {
        new: '–ù–æ–≤–∏–π',
        growing: '–†–æ–∑–≤–∏–≤–∞—î—Ç—å—Å—è',
        active: '–ê–∫—Ç–∏–≤–Ω–∏–π',
        'at-risk': '–†–∏–∑–∏–∫'
    };
    
    const stageColors = {
        new: 'text-blue-400',
        growing: 'text-green-400',
        active: 'text-purple-400',
        'at-risk': 'text-red-400'
    };
    
    return topClients.map(client => `
        <tr class="border-b border-gray-700 hover:bg-gray-700">
            <td class="py-2 text-gray-200">${client.code}</td>
            <td class="py-2 text-right">
                <span class="${stageColors[client.lifecycleStage]}">${stageNames[client.lifecycleStage]}</span>
            </td>
            <td class="py-2 text-right text-gray-200">${formatCurrency(client.averageOrderValue)}</td>
            <td class="py-2 text-right text-green-400 font-semibold">${formatCurrency(client.yearlyForecast)}</td>
            <td class="py-2 text-right">
                <span class="text-sm ${client.confidence > 0.7 ? 'text-green-400' : client.confidence > 0.4 ? 'text-yellow-400' : 'text-red-400'}">
                    ${Math.round(client.confidence * 100)}%
                </span>
            </td>
        </tr>
    `).join('');
}

// –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
function renderSettingsTab() {
    console.log('‚öôÔ∏è –†–µ–Ω–¥–µ—Ä–∏–º–æ –≤–∫–ª–∞–¥–∫—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...');
    
    const container = document.getElementById('settingsTab');
    if (!container) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä settingsTab –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
        return;
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    const settings = forecastingData.settings || {};
    const currentDate = new Date();
    const defaultStartDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).toISOString().split('T')[0];
    const defaultEndDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).toISOString().split('T')[0];
    
    container.innerHTML = `
        <div class="space-y-6">
            <div class="flex justify-between items-center">
                <h3 class="text-xl font-semibold text-white">–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è</h3>
                <div class="flex gap-2">
                    <button onclick="saveForecastingSettings()" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
                        üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                    </button>
                    <button onclick="resetForecastingSettings()" class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700">
                        üîÑ –°–∫–∏–Ω—É—Ç–∏
                    </button>
                </div>
            </div>
            
                                 <!-- –ü–µ—Ä—ñ–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è -->
                     <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                         <h4 class="text-lg font-semibold text-white mb-4">üìÖ –ü–µ—Ä—ñ–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è</h4>
                         <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                             <div>
                                 <label class="block text-sm font-medium text-gray-300 mb-2">–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –∞–Ω–∞–ª—ñ–∑—É</label>
                                 <input type="date" id="forecastStartDate" class="dark-input w-full"
                                        value="${settings.forecastStartDate || defaultStartDate}">
                             </div>
                             <div>
                                 <label class="block text-sm font-medium text-gray-300 mb-2">–î–∞—Ç–∞ –∫—ñ–Ω—Ü—è –∞–Ω–∞–ª—ñ–∑—É</label>
                                 <input type="date" id="forecastEndDate" class="dark-input w-full"
                                        value="${settings.forecastEndDate || defaultEndDate}">
                             </div>
                         </div>
                         <p class="text-sm text-gray-400 mt-2">–í–∫–∞–∂—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ–≥–Ω–æ–∑—É</p>
                     </div>
                     
                     <!-- –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –º—ñ—Å—è—Ü—å –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è -->
                     <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                         <h4 class="text-lg font-semibold text-white mb-4">üéØ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –º—ñ—Å—è—Ü—å –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è</h4>
                         <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                             <div>
                                 <label class="block text-sm font-medium text-gray-300 mb-2">–ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è</label>
                                 <input type="month" id="forecastStartMonthYear" class="dark-input w-full"
                                        value="${(() => {
                                            const settings = forecastingData.settings || {};
                                            const startMonth = settings.forecastStartMonth || 0;
                                            const startYear = settings.forecastStartYear || new Date().getFullYear();
                                            const currentDate = new Date();
                                            const targetDate = new Date(startYear, currentDate.getMonth() + startMonth, 1);
                                            return targetDate.toISOString().slice(0, 7);
                                        })()}">
                             </div>
                             <div>
                                 <label class="block text-sm font-medium text-gray-300 mb-2">–ü–æ—Ç–æ—á–Ω–∏–π –≤–∏–±—ñ—Ä</label>
                                 <div class="text-sm text-gray-400 p-2 bg-gray-700 rounded">
                                     <span id="currentForecastStartDisplay">
                                         ${(() => {
                                             const settings = forecastingData.settings || {};
                                             const startMonth = settings.forecastStartMonth || 0;
                                             const startYear = settings.forecastStartYear || new Date().getFullYear();
                                             const currentDate = new Date();
                                             const targetDate = new Date(startYear, currentDate.getMonth() + startMonth, 1);
                                             const months = [
                                                 '—Å—ñ—á–µ–Ω—å', '–ª—é—Ç–∏–π', '–±–µ—Ä–µ–∑–µ–Ω—å', '–∫–≤—ñ—Ç–µ–Ω—å', '—Ç—Ä–∞–≤–µ–Ω—å', '—á–µ—Ä–≤–µ–Ω—å',
                                                 '–ª–∏–ø–µ–Ω—å', '—Å–µ—Ä–ø–µ–Ω—å', '–≤–µ—Ä–µ—Å–µ–Ω—å', '–∂–æ–≤—Ç–µ–Ω—å', '–ª–∏—Å—Ç–æ–ø–∞–¥', '–≥—Ä—É–¥–µ–Ω—å'
                                             ];
                                             return `${months[targetDate.getMonth()]} ${targetDate.getFullYear()}`;
                                         })()}
                                     </span>
                                 </div>
                             </div>
                         </div>
                         <p class="text-sm text-gray-400 mt-2">–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å —Ç–∞ —Ä—ñ–∫ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è</p>
                     </div>
            
            <!-- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ -->
            <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                <h4 class="text-lg font-semibold text-white mb-4">ü§ñ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤</h4>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä—ñ–æ–¥—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É</label>
                        <input type="number" id="forecastPeriods" class="dark-input w-full" 
                               value="${settings.forecastPeriods || 12}" min="1" max="60">
                        <p class="text-xs text-gray-400 mt-1">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—è—Ü—ñ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è (1-60)</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–î–æ–≤—ñ—Ä–∞ –¥–æ –ø—Ä–æ–≥–Ω–æ–∑—É (%)</label>
                        <input type="number" id="forecastConfidence" class="dark-input w-full" 
                               value="${settings.forecastConfidence || 80}" min="1" max="100">
                        <p class="text-xs text-gray-400 mt-1">–†—ñ–≤–µ–Ω—å –¥–æ–≤—ñ—Ä–∏ –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è</p>
                    </div>
                </div>
            </div>
            
            <!-- –í–∏–∫–ª—é—á–µ–Ω–Ω—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ -->
            <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                <h4 class="text-lg font-semibold text-white mb-4">üö´ –í–∏–∫–ª—é—á–µ–Ω–Ω—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏</h4>
                <div class="space-y-4">
                    <div class="flex gap-2">
                        <select id="excludedNomenclatureSelect" class="dark-input flex-1">
                            <option value="">–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–∫–ª—é—á–µ–Ω–Ω—è</option>
                        </select>
                        <button onclick="addExcludedNomenclature()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                            ‚ûï –î–æ–¥–∞—Ç–∏
                        </button>
                    </div>
                    <div id="excludedNomenclatureList" class="space-y-2">
                        ${(settings.excludedNomenclature || []).map(item => `
                            <div class="flex justify-between items-center bg-gray-700 rounded p-2">
                                <span class="text-gray-200">${item}</span>
                                <button onclick="removeExcludedNomenclature('${item}')" class="text-red-400 hover:text-red-300">
                                    üóëÔ∏è
                                </button>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>
            
            <!-- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—ñ -->
            <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                <h4 class="text-lg font-semibold text-white mb-4">üå§Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—ñ</h4>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–î–æ–≤–∂–∏–Ω–∞ —Å–µ–∑–æ–Ω—É (–º—ñ—Å—è—Ü—ñ–≤)</label>
                        <input type="number" id="seasonLength" class="dark-input w-full" 
                               value="${settings.seasonLength || 12}" min="1" max="24">
                        <p class="text-xs text-gray-400 mt-1">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—è—Ü—ñ–≤ –≤ —Å–µ–∑–æ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—ñ</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–í—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—ñ</label>
                        <select id="seasonalAdjustment" class="dark-input w-full">
                            <option value="auto" ${settings.seasonalAdjustment === 'auto' ? 'selected' : ''}>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ</option>
                            <option value="manual" ${settings.seasonalAdjustment === 'manual' ? 'selected' : ''}>–†—É—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</option>
                            <option value="none" ${settings.seasonalAdjustment === 'none' ? 'selected' : ''}>–ë–µ–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—ñ</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <!-- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ -->
            <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                <h4 class="text-lg font-semibold text-white mb-4">üë• –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤</h4>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</label>
                        <input type="number" id="minOrderValue" class="dark-input w-full" 
                               value="${settings.minOrderValue || 0}" min="0" step="0.01">
                        <p class="text-xs text-gray-400 mt-1">–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—è –≤ –∞–Ω–∞–ª—ñ–∑</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å</label>
                        <input type="number" id="minOrderCount" class="dark-input w-full" 
                               value="${settings.minOrderCount || 1}" min="1">
                        <p class="text-xs text-gray-400 mt-1">–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∫–ª—ñ—î–Ω—Ç–∞</p>
                    </div>
                </div>
            </div>
            
            <!-- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∂–∏—Ç—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É –∫–ª—ñ—î–Ω—Ç–∞ -->
            <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                <h4 class="text-lg font-semibold text-white mb-4">üîÑ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∂–∏—Ç—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É –∫–ª—ñ—î–Ω—Ç–∞</h4>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞</label>
                        <input type="number" id="newClientOrders" class="dark-input w-full" 
                               value="${settings.newClientOrders || 1}" min="1">
                        <p class="text-xs text-gray-400 mt-1">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ú—ñ–Ω. –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è —Ä–∞—Å—Ç—É—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞</label>
                        <input type="number" id="growingClientMinOrders" class="dark-input w-full" 
                               value="${settings.growingClientMinOrders || 5}" min="1">
                        <p class="text-xs text-gray-400 mt-1">–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è —Ä–∞—Å—Ç—É—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ú—ñ–Ω. –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞</label>
                        <input type="number" id="activeClientMinOrders" class="dark-input w-full" 
                               value="${settings.activeClientMinOrders || 10}" min="1">
                        <p class="text-xs text-gray-400 mt-1">–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ú–Ω–æ–∂–Ω–∏–∫ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ –≤ –≥—Ä—É–ø—ñ —Ä–∏–∑–∏–∫—É</label>
                        <input type="number" id="atRiskMultiplier" class="dark-input w-full" 
                               value="${settings.atRiskMultiplier || 3}" min="1" max="10" step="0.1">
                        <p class="text-xs text-gray-400 mt-1">–ú–Ω–æ–∂–Ω–∏–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–∏–∑–∏–∫—É</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ú–Ω–æ–∂–Ω–∏–∫ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞</label>
                        <input type="number" id="activeClientMultiplier" class="dark-input w-full" 
                               value="${settings.activeClientMultiplier || 1.5}" min="1" max="5" step="0.1">
                        <p class="text-xs text-gray-400 mt-1">–ú–Ω–æ–∂–Ω–∏–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ú–Ω–æ–∂–Ω–∏–∫ –¥–ª—è —Ä–∞—Å—Ç—É—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞</label>
                        <input type="number" id="growingClientMultiplier" class="dark-input w-full" 
                               value="${settings.growingClientMultiplier || 2}" min="1" max="5" step="0.1">
                        <p class="text-xs text-gray-400 mt-1">–ú–Ω–æ–∂–Ω–∏–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –¥–ª—è —Ä–∞—Å—Ç—É—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ó–Ω–∏–∂–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è —Ä–∏–∑–∏–∫–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ (%)</label>
                        <input type="number" id="forecastReductionForAtRisk" class="dark-input w-full" 
                               value="${settings.forecastReductionForAtRisk || 30}" min="0" max="100">
                        <p class="text-xs text-gray-400 mt-1">–í—ñ–¥—Å–æ—Ç–æ–∫ –∑–Ω–∏–∂–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ –≤ –≥—Ä—É–ø—ñ —Ä–∏–∑–∏–∫—É</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ú—ñ–Ω. –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –¥–ª—è –Ω–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ (%)</label>
                        <input type="number" id="minConfidenceNew" class="dark-input w-full" 
                               value="${settings.minConfidenceNew || 30}" min="0" max="100">
                        <p class="text-xs text-gray-400 mt-1">–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è –Ω–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ú—ñ–Ω. –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –¥–ª—è —Ä–∞—Å—Ç—É—á–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ (%)</label>
                        <input type="number" id="minConfidenceGrowing" class="dark-input w-full" 
                               value="${settings.minConfidenceGrowing || 60}" min="0" max="100">
                        <p class="text-xs text-gray-400 mt-1">–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è —Ä–∞—Å—Ç—É—á–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ú—ñ–Ω. –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ (%)</label>
                        <input type="number" id="minConfidenceActive" class="dark-input w-full" 
                               value="${settings.minConfidenceActive || 80}" min="0" max="100">
                        <p class="text-xs text-gray-400 mt-1">–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ú—ñ–Ω. –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –¥–ª—è —Ä–∏–∑–∏–∫–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ (%)</label>
                        <input type="number" id="minConfidenceAtRisk" class="dark-input w-full" 
                               value="${settings.minConfidenceAtRisk || 40}" min="0" max="100">
                        <p class="text-xs text-gray-400 mt-1">–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ –≤ –≥—Ä—É–ø—ñ —Ä–∏–∑–∏–∫—É</p>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –æ–ø—Ü—ñ—ó –¥–ª—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏
    generateNomenclatureOptions();
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    initSettingsHandlers();
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É
    updateForecastStartDisplay();
}