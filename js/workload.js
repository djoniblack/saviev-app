// workload.js - –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
import * as firebase from './firebase.js';

// === –ù–ê–°–¢–†–û–ô–ö–ò –û–¢–õ–ê–î–ö–ò ===
const WORKLOAD_DEBUG_MODE = window.location.hostname === 'localhost' || 
                           window.location.search.includes('debug=true') ||
                           localStorage.getItem('workloadDebugMode') === 'true';

const WORKLOAD_LOG_LEVEL = WORKLOAD_DEBUG_MODE ? 'verbose' : 'error';

const logger = {
    verbose: (...args) => WORKLOAD_DEBUG_MODE && WORKLOAD_LOG_LEVEL === 'verbose' && console.log('[WORKLOAD VERBOSE]', ...args),
    info: (...args) => ['verbose', 'info'].includes(WORKLOAD_LOG_LEVEL) && console.log('[WORKLOAD INFO]', ...args),
    warn: (...args) => ['verbose', 'info', 'warn'].includes(WORKLOAD_LOG_LEVEL) && console.warn('[WORKLOAD WARN]', ...args),
    error: (...args) => console.error('[WORKLOAD ERROR]', ...args)
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–∫–∏
window.toggleWorkloadDebug = function() {
    const newMode = !WORKLOAD_DEBUG_MODE;
    localStorage.setItem('workloadDebugMode', newMode.toString());
    logger.info(`–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ workload ${newMode ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.`);
};

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–º –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
 */
class WorkloadModule {
    constructor() {
        // === –°–û–°–¢–û–Ø–ù–ò–ï –ú–û–î–£–õ–Ø ===
        this.isInitialized = false;
        this.isFrozen = false;
        this.container = null;
        this.elements = {};
        
        // === –î–ê–ù–ù–´–ï ===
        this.workloadData = [];
        this.managersData = [];
        this.departmentsData = [];
        this.salesData = [];
        this.clientsData = [];
        this.tasksData = [];
        this.clientLinks = {};
        
        // === –§–ò–õ–¨–¢–†–´ ===
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        const now = new Date();
        const currentMonth = now.getMonth();
        const currentYear = now.getFullYear();
        const firstDayOfMonth = new Date(currentYear, currentMonth, 1);
        const lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0);
        
        this.filters = {
            department: '',
            manager: '',
            period: 'current_month', // –ò–∑–º–µ–Ω–µ–Ω–æ —Å '3' –Ω–∞ 'current_month'
            dateFrom: firstDayOfMonth.toISOString().split('T')[0], // YYYY-MM-DD
            dateTo: lastDayOfMonth.toISOString().split('T')[0], // YYYY-MM-DD
            status: '',
            search: ''
        };
        
        // === –ö–≠–®–ò ===
        this.renderCache = new Map();
        this.eventListeners = new Map();
        
        // === –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï ===
        this.autoUpdateInterval = null;
        this.lastUpdateTime = null;
        this.isAutoUpdateEnabled = true;
        this.isUpdateInProgress = false;
        this.AUTO_UPDATE_INTERVAL = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
    }
    
    /**
     * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è
     */
    async init(container) {
        logger.info('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...');
        
        // –ï—Å–ª–∏ –º–æ–¥—É–ª—å –±—ã–ª –∑–∞–º–æ—Ä–æ–∂–µ–Ω, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        if (this.isFrozen && this.isInitialized) {
            logger.info('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è –∏–∑ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
            this.isFrozen = false;
            this.container = container;
            this._createHTMLStructure();
            this._cacheElements();
            this._initEventListeners();
            this._renderWorkload();
            if (this.isAutoUpdateEnabled) {
                this._startAutoUpdate();
            }
            logger.info('‚úÖ –ú–æ–¥—É–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –∫—ç—à–∞');
            return;
        }
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if (this.isInitialized) {
            logger.warn('‚ö†Ô∏è –ú–æ–¥—É–ª—å –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        
        if (!container) {
            logger.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
            return;
        }
        
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            this.container = container;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if (!this._checkPermissions()) {
                this._renderAccessDenied();
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            this._createHTMLStructure();
            
            // –ö—ç—à–∏—Ä—É–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
            this._cacheElements();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this._initEventListeners();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await this._loadData();
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            this._calculateMetrics();
            
            // –†–µ–Ω–¥–µ—Ä–∏–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this._renderWorkload();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if (this.isAutoUpdateEnabled) {
                this._startAutoUpdate();
            }
            
            this.isInitialized = true;
            logger.info('‚úÖ –ú–æ–¥—É–ª—å –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', error);
            this._renderError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
        }
    }
    
    /**
     * "–ú—è–≥–∫–∞—è" –æ—á–∏—Å—Ç–∫–∞ - –∑–∞–º–æ—Ä–æ–∑–∫–∞ –º–æ–¥—É–ª—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
     */
    freeze() {
        logger.info('‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∫–∞ –º–æ–¥—É–ª—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)...');
        
        if (!this.isInitialized) {
            logger.warn('‚ö†Ô∏è –ú–æ–¥—É–ª—å –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        
        try {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            this._stopAutoUpdate();
            
            // –û—á–∏—â–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π (–Ω–æ –Ω–µ –¥–∞–Ω–Ω—ã–µ!)
            this._removeAllEventListeners();
            
            // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            if (this.container) {
                this.container.innerHTML = '';
                this.container = null;
            }
            
            // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã DOM (–¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è!)
            this.elements = {};
            
            this.isFrozen = true;
            logger.info('‚ùÑÔ∏è –ú–æ–¥—É–ª—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω (–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)');
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏ –º–æ–¥—É–ª—è:', error);
        }
    }
    
    /**
     * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–æ–¥—É–ª—è
     */
    cleanup() {
        logger.info('üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–æ–¥—É–ª—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...');
        
        if (!this.isInitialized && !this.isFrozen) {
            logger.warn('‚ö†Ô∏è –ú–æ–¥—É–ª—å –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        
        try {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            this._stopAutoUpdate();
            
            // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
            this._removeAllEventListeners();
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à–∏
            this.renderCache.clear();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            this.workloadData = [];
            this.managersData = [];
            this.departmentsData = [];
            this.salesData = [];
            this.clientsData = [];
            this.tasksData = [];
            this.clientLinks = {};
            this.filters = {
                department: '',
                manager: '',
                period: '3',
                dateFrom: '',
                dateTo: '',
                status: '',
                search: ''
            };
            this.lastUpdateTime = null;
            this.isUpdateInProgress = false;
            
            // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            if (this.container) {
                this.container.innerHTML = '';
                this.container = null;
            }
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            this.elements = {};
            
            this.isInitialized = false;
            this.isFrozen = false;
            logger.info('‚úÖ –ú–æ–¥—É–ª—å –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω');
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–æ–¥—É–ª—è:', error);
        }
    }
    
    /**
     * –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –≤ departmentDashboard.js)
     */
    _validateAndDebugData() {
        logger.info('=== –í–ê–õ–Ü–î–ê–¶–Ü–Ø –î–ê–ù–ò–• ===');
        logger.info('–ó–∞–ø–∏—Å–∏ –ø—Ä–æ–¥–∞–∂:', this.salesData.length);
        logger.info('–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏:', this.managersData.length);
        logger.info('–í—ñ–¥–¥—ñ–ª–∏:', this.departmentsData.length);
        logger.info('–ö–ª—ñ—î–Ω—Ç–∏:', this.clientsData.length);
        logger.info('–ó–∞–¥–∞—á—ñ:', this.tasksData.length);
        
        // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂
        if (this.salesData.length > 0) {
            logger.info('–ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–¥–∞–∂:', this.salesData[0]);
            logger.info('–ü–æ–ª—è –≤ –∑–∞–ø–∏—Å–∞—Ö –ø—Ä–æ–¥–∞–∂:', Object.keys(this.salesData[0]));
            
            // –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç –ø—Ä–æ–¥–∞–∂
            const julyDate = new Date('2025-07-01');
            const beforeJuly = this.salesData.filter(sale => {
                const saleDate = new Date(sale['–î–∞—Ç–∞'] || sale['Date'] || '');
                return saleDate < julyDate;
            }).length;
            const fromJuly = this.salesData.filter(sale => {
                const saleDate = new Date(sale['–î–∞—Ç–∞'] || sale['Date'] || '');
                return saleDate >= julyDate;
            }).length;
            
            logger.info('–†–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–∞—Ç–∞—Ö:');
            logger.info('  - –î–æ –ª–∏–ø–Ω—è 2025:', beforeJuly);
            logger.info('  - –ó –ª–∏–ø–Ω—è 2025:', fromJuly);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
            const dates = this.salesData.map(sale => new Date(sale['–î–∞—Ç–∞'] || sale['Date'] || '')).filter(date => !isNaN(date));
            if (dates.length > 0) {
                const minDate = new Date(Math.min(...dates));
                const maxDate = new Date(Math.max(...dates));
                logger.info('–î—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –ø—Ä–æ–¥–∞–∂:', minDate.toLocaleDateString('uk-UA'), '-', maxDate.toLocaleDateString('uk-UA'));
            }
        }
        
        // –ê–Ω–∞–ª–∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        if (this.managersData.length > 0) {
            logger.info('–ü—Ä–∏–∫–ª–∞–¥ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞:', this.managersData[0]);
            logger.info('–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ –∑ –≤—ñ–¥–¥—ñ–ª–∞–º–∏:', this.managersData.filter(emp => emp.department).length);
        }
        
        // –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á
        if (this.tasksData.length > 0) {
            logger.info('–ü—Ä–∏–∫–ª–∞–¥ –∑–∞–¥–∞—á—ñ:', this.tasksData[0]);
            logger.info('–ó–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–¥–∞—á—ñ:', this.tasksData.filter(task => 
                task.status === 'completed' || task.status === '–∑–∞–≤–µ—Ä—à–µ–Ω–æ'
            ).length);
        }
        
        logger.info('=== –ö–Ü–ù–ï–¶–¨ –í–ê–õ–Ü–î–ê–¶–Ü–á ===');
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
     */
    _checkPermissions() {
        try {
            return window.hasPermission?.('workload_view_page') ?? true;
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤:', error);
            return true; // Fallback
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥—É–ª—è
     */
    _createHTMLStructure() {
        this.container.innerHTML = `
            <div class="workload-module bg-gray-800 rounded-xl shadow-lg p-6">
                <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ -->
                <div class="workload-header mb-6">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-2xl font-bold text-white">–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤</h2>
                        <div class="workload-controls flex items-center gap-4">
                            <div id="autoUpdateStatus" class="text-sm text-gray-400">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
                            <button id="autoUpdateToggle" class="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm">
                                –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                            </button>
                        </div>
                    </div>
                    
                    <!-- –í–∫–ª–∞–¥–∫–∏ -->
                    <div class="workload-tabs flex border-b border-gray-600">
                        <button id="dashboardTab" class="workload-tab px-4 py-2 text-white border-b-2 border-blue-500 bg-blue-600 bg-opacity-20">
                            üìä –î–∞—à–±–æ—Ä–¥
                        </button>
                        <button id="tableTab" class="workload-tab px-4 py-2 text-gray-300 hover:text-white border-b-2 border-transparent hover:border-gray-500">
                            üìã –¢–∞–±–ª–∏—Ü—è
                        </button>
                        <button id="analyticsTab" class="workload-tab px-4 py-2 text-gray-300 hover:text-white border-b-2 border-transparent hover:border-gray-500">
                            üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞
                        </button>
                    </div>
                </div>
                
                <!-- –§–∏–ª—å—Ç—Ä—ã -->
                <div class="workload-filters bg-gray-700 rounded-lg p-4 mb-6">
                    <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-1">–í—ñ–¥–¥—ñ–ª</label>
                            <select id="departmentFilter" class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded text-white">
                                <option value="">–í—Å—ñ –≤—ñ–¥–¥—ñ–ª–∏</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-1">–ú–µ–Ω–µ–¥–∂–µ—Ä</label>
                            <select id="managerFilter" class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded text-white">
                                <option value="">–í—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-1">–ü–µ—Ä—ñ–æ–¥</label>
                            <select id="periodFilter" class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded text-white">
                                <option value="current_month" selected>–ü–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å</option>
                                <option value="1">1 –º—ñ—Å—è—Ü—å</option>
                                <option value="3">3 –º—ñ—Å—è—Ü—ñ</option>
                                <option value="6">6 –º—ñ—Å—è—Ü—ñ–≤</option>
                                <option value="12">12 –º—ñ—Å—è—Ü—ñ–≤</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-1">–î–∞—Ç–∞ –∑</label>
                            <input type="date" id="dateFromFilter" class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded text-white">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-1">–î–∞—Ç–∞ –ø–æ</label>
                            <input type="date" id="dateToFilter" class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded text-white">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-1">–î—ñ—ó</label>
                            <button id="refreshData" class="px-3 py-2 bg-green-600 text-white rounded hover:bg-green-700">
                                –û–Ω–æ–≤–∏—Ç–∏
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- –ö–æ–Ω—Ç–µ–Ω—Ç -->
                <div id="workloadContent" class="workload-content">
                    <div class="text-center py-8">
                        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mb-4"></div>
                        <p class="text-gray-200">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>
                    </div>
                </div>
            </div>
        `;
    }
    
    /**
     * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    _cacheElements() {
        this.elements = {
            // –í–∫–ª–∞–¥–∫–∏
            dashboardTab: this.container.querySelector('#dashboardTab'),
            tableTab: this.container.querySelector('#tableTab'),
            analyticsTab: this.container.querySelector('#analyticsTab'),
            
            // –ö–æ–Ω—Ç—Ä–æ–ª—ã
            autoUpdateStatus: this.container.querySelector('#autoUpdateStatus'),
            autoUpdateToggle: this.container.querySelector('#autoUpdateToggle'),
            refreshData: this.container.querySelector('#refreshData'),
            
            // –§–∏–ª—å—Ç—Ä—ã
            departmentFilter: this.container.querySelector('#departmentFilter'),
            managerFilter: this.container.querySelector('#managerFilter'),
            periodFilter: this.container.querySelector('#periodFilter'),
            dateFromFilter: this.container.querySelector('#dateFromFilter'),
            dateToFilter: this.container.querySelector('#dateToFilter'),
            
            // –ö–æ–Ω—Ç–µ–Ω—Ç
            content: this.container.querySelector('#workloadContent')
        };
        
        logger.verbose('üìù DOM —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    _initEventListeners() {
        // –í–∫–ª–∞–¥–∫–∏
        this._addEventListener('dashboardTab', 'click', () => this._switchTab('dashboard'));
        this._addEventListener('tableTab', 'click', () => this._switchTab('table'));
        this._addEventListener('analyticsTab', 'click', () => this._switchTab('analytics'));
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        this._addEventListener('autoUpdateToggle', 'click', () => this._toggleAutoUpdate());
        this._addEventListener('refreshData', 'click', () => this._refreshData());
        
        // –§–∏–ª—å—Ç—Ä—ã
        this._addEventListener('departmentFilter', 'change', (e) => {
            this.filters.department = e.target.value;
            this._updateManagersFilter();
            this._applyFilters();
        });
        
        this._addEventListener('managerFilter', 'change', (e) => {
            this.filters.manager = e.target.value;
            this._applyFilters();
        });
        
        this._addEventListener('periodFilter', 'change', (e) => {
            this.filters.period = e.target.value;
            this._applyFilters();
        });
        
        this._addEventListener('dateFromFilter', 'change', (e) => {
            this.filters.dateFrom = e.target.value;
            this._applyFilters();
        });
        
        this._addEventListener('dateToFilter', 'change', (e) => {
            this.filters.dateTo = e.target.value;
            this._applyFilters();
        });
        
        logger.verbose('üéß –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º
     */
    _addEventListener(elementId, event, handler, options) {
        const element = this.elements[elementId];
        if (!element) return;
        
        const key = `${elementId}-${event}`;
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.eventListeners.has(key)) {
            const oldHandler = this.eventListeners.get(key);
            element.removeEventListener(event, oldHandler, options);
        }
        
        element.addEventListener(event, handler, options);
        this.eventListeners.set(key, handler);
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    _removeAllEventListeners() {
        this.eventListeners.forEach((handler, key) => {
            const [elementId, event] = key.split('-');
            const element = this.elements[elementId];
            if (element) {
                element.removeEventListener(event, handler);
            }
        });
        this.eventListeners.clear();
        logger.info('üßπ –í—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –æ—á–∏—â–µ–Ω—ã');
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
     */
    _switchTab(tabName) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤–∫–ª–∞–¥–æ–∫
        const allTabs = this.container.querySelectorAll('.workload-tab');
        allTabs.forEach(tab => {
            tab.classList.remove('text-white', 'border-blue-500', 'bg-blue-600', 'bg-opacity-20');
            tab.classList.add('text-gray-300', 'border-transparent');
        });
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        const activeTab = this.container.querySelector(`#${tabName}Tab`);
        if (activeTab) {
            activeTab.classList.remove('text-gray-300', 'border-transparent');
            activeTab.classList.add('text-white', 'border-blue-500', 'bg-blue-600', 'bg-opacity-20');
        }
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        switch(tabName) {
            case 'dashboard':
                this._renderDashboard();
                break;
            case 'table':
                this._renderTable();
                break;
            case 'analytics':
                this._renderAnalytics();
                break;
        }
        
        logger.info(`üìä –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tabName}`);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    _updateAutoUpdateStatus(message, className = 'text-gray-400') {
        if (this.elements.autoUpdateStatus) {
            this.elements.autoUpdateStatus.textContent = message;
            this.elements.autoUpdateStatus.className = `text-sm ${className}`;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
     */
    _renderAccessDenied() {
        this.container.innerHTML = `
            <div class="bg-red-900/20 border border-red-500 rounded-xl p-8 text-center">
                <h2 class="text-2xl font-bold text-white mb-4">–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ</h2>
                <p class="text-red-200">–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤.</p>
            </div>
        `;
    }
    
    /**
     * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
     */
    _renderError(message) {
        this.container.innerHTML = `
            <div class="bg-red-900/20 border border-red-500 rounded-xl p-8 text-center">
                <h2 class="text-2xl font-bold text-white mb-4">–ü–æ–º–∏–ª–∫–∞</h2>
                <p class="text-red-200">${message}</p>
                <button onclick="location.reload()" class="mt-4 px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700">
                    –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑
                </button>
            </div>
        `;
    }
    
    // === –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –°–õ–ï–î–£–Æ–©–ò–• –≠–¢–ê–ü–û–í ===
    
    async _loadData() {
        logger.info('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...');
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –æ—Ç–¥–µ–ª–æ–≤
            const { managers, departments } = await this._loadEmployeesAndDepartments();
            this.managersData = managers;
            this.departmentsData = departments;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂
            await this._loadSalesData();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
            await this._loadClientsData();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á
            await this._loadTasksData();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
            await this._loadClientLinks();
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            this._populateFilters();
            
            logger.info('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –æ—Ç–¥–µ–ª–æ–≤
     */
    async _loadEmployeesAndDepartments() {
        try {
            const companyId = window.state?.currentCompanyId;
            if (!companyId) {
                logger.error('‚ùå ID –∫–æ–º–ø–∞–Ω—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                return { managers: [], departments: [] };
            }
            
            logger.info('üë• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ —Ç–∞ –≤—ñ–¥–¥—ñ–ª—ñ–≤...');
            logger.info('üè¢ Company ID:', companyId);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ window.state –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            const allEmployees = window.state?.allEmployees || [];
            const departments = window.state?.departments || [];
            
            logger.info('üë• –í—Å—ñ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏:', allEmployees.length);
            logger.info('üè¢ –í—Å—ñ –≤—ñ–¥–¥—ñ–ª–∏:', departments.length);

            // –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö)
            const managers = allEmployees.filter(emp => {
                if (emp.role === 'manager') return true;
                if (emp.position) {
                    const position = emp.position.toLowerCase();
                    return position.includes('–º–µ–Ω–µ–¥–∂–µ—Ä') || 
                           position.includes('manager') || 
                           position.includes('sales') ||
                           position.includes('–ø—Ä–æ–¥–∞–∂');
                }
                return false;
            });
            
            logger.info('üë§ –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏:', managers.length);

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            if (managers.length === 0) {
                logger.warn('üîç –ú–µ–Ω–µ–¥–∂–µ—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—Å—ñ—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤');
                return {
                    managers: allEmployees,
                    departments: departments
                };
            }
            
            return {
                managers: managers,
                departments: departments
            };
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –æ—Ç–¥–µ–ª–æ–≤:', error);
            return { managers: [], departments: [] };
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂
     */
    async _loadSalesData() {
        try {
            logger.info('üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂...');
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            const [staticDataRes, apiDataRes, refDataRes] = await Promise.all([
                fetch('–º–æ–¥—É–ª—å –ø–æ–º—ñ—á–Ω–∏–∫ –ø—Ä–æ–¥–∞–∂—É/data.json'),
                fetch('https://fastapi.lookfort.com/nomenclature.analysis'),
                fetch('https://fastapi.lookfort.com/nomenclature.analysis?mode=company_url')
            ]);
            
            const staticData = await staticDataRes.json();
            const apiData = await apiDataRes.json();
            const refData = await refDataRes.json();
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ —Å —É—á–µ—Ç–æ–º –¥–∞—Ç
            // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ 07.2025, API –¥–∞–Ω–Ω—ã–µ —Å 07.2025
            const cutoffDate = new Date('2025-07-01');
            
            const filteredStaticData = staticData.filter(sale => {
                const saleDate = new Date(sale['–î–∞—Ç–∞'] || sale['Date'] || '');
                return saleDate < cutoffDate;
            });
            
            const filteredApiData = apiData.filter(sale => {
                const saleDate = new Date(sale['–î–∞—Ç–∞'] || sale['Date'] || '');
                return saleDate >= cutoffDate;
            });
            
            this.salesData = [...filteredStaticData, ...filteredApiData];
            
            logger.info(`üìä –°—Ç–∞—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ (–¥–æ 07.2025): ${filteredStaticData.length} –∑–∞–ø–∏—Å—ñ–≤`);
            logger.info(`üìä API –¥–∞–Ω—ñ (–∑ 07.2025): ${filteredApiData.length} –∑–∞–ø–∏—Å—ñ–≤`);
            logger.info(`üìä –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: ${this.salesData.length}`);
            
            // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
            this.clientLinks = Object.fromEntries(
                refData.map(item => [item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'], item['–ø–æ—Å–∏–ª–∞–Ω–Ω—è']])
            );
            
            logger.info(`üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.salesData.length} –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ–¥–∞–∂`);
            logger.info(`üîó –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${Object.keys(this.clientLinks).length} –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤`);
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂:', error);
            this.salesData = [];
            this.clientLinks = {};
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
     */
    async _loadClientsData() {
        try {
            logger.info('üë• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤...');
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ (–∫–∞–∫ –≤ departmentDashboard.js)
            const response = await fetch('https://fastapi.lookfort.com/nomenclature.analysis?mode=company_url');
            const clientsFromAPI = await response.json();
            
            // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
            const clientManagerDirectory = {};
            clientsFromAPI.forEach(item => {
                const code = item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] || item['–ö–ª—ñ—î–Ω—Ç.–ö–æ–¥'];
                if (code) {
                    clientManagerDirectory[code] = {
                        manager: item['–ú–µ–Ω–µ–¥–∂–µ—Ä'],
                        link: item['–ø–æ—Å–∏–ª–∞–Ω–Ω—è'],
                        name: item['–ö–ª–∏–µ–Ω—Ç.–ù–∞–∑–≤–∞–Ω–∏–µ'] || code
                    };
                }
            });
            
            logger.info(`üë• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–ª—ñ—î–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä: ${Object.keys(clientManagerDirectory).length} –∑–∞–ø–∏—Å—ñ–≤`);
            
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            const clientsMap = new Map();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
            Object.entries(clientManagerDirectory).forEach(([clientCode, clientInfo]) => {
                clientsMap.set(clientCode, {
                    code: clientCode,
                    name: clientInfo.name,
                    manager: clientInfo.manager,
                    sphere: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂
                    link: clientInfo.link || '',
                    firstSale: null,
                    lastSale: null,
                    totalRevenue: 0,
                    salesCount: 0,
                    sales: [] // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂
                });
            });
            
            // –¢–µ–ø–µ—Ä—å –æ–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∞–º–∏
            this.salesData.forEach(sale => {
                const clientCode = sale['–ö–ª—ñ—î–Ω—Ç.–ö–æ–¥'] || sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] || sale['–ö–ª–∏–µ–Ω—Ç'] || '';
                const clientName = sale['–ö–ª—ñ—î–Ω—Ç'] || sale['–ö–ª–∏–µ–Ω—Ç'] || clientCode;
                const manager = sale['–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä'] || sale['–ú–µ–Ω–µ–¥–∂–µ—Ä'] || '';
                const sphere = sale['–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'] || '';
                const date = new Date(sale['–î–∞—Ç–∞']);
                const revenue = parseFloat(sale['–í—ã—Ä—É—á–∫–∞']?.toString().replace(/\s/g, '').replace(',', '.')) || 0;
                
                if (clientsMap.has(clientCode)) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                    const client = clientsMap.get(clientCode);
                    client.sphere = sphere || client.sphere;
                    client.lastSale = date > (client.lastSale || new Date(0)) ? date : client.lastSale;
                    client.firstSale = date < (client.firstSale || new Date(9999, 11, 31)) ? date : client.firstSale;
                    client.totalRevenue += revenue;
                    client.salesCount++;
                    client.sales.push(sale);
                } else {
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ)
                    clientsMap.set(clientCode, {
                        code: clientCode,
                        name: clientName,
                        manager: manager,
                        sphere: sphere,
                        link: this.clientLinks[clientCode] || '',
                        firstSale: date,
                        lastSale: date,
                        totalRevenue: revenue,
                        salesCount: 1,
                        sales: [sale]
                    });
                }
            });
            
            this.clientsData = Array.from(clientsMap.values());
            
            logger.info(`üë• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.clientsData.length} –∫–ª—ñ—î–Ω—Ç—ñ–≤ (–≤–∫–ª—é—á–∞—é—á–∏ –≤—Å—ñ—Ö –∑ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞)`);
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
            this.clientsData = [];
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
     */
    async _loadTasksData() {
        try {
            logger.info('üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å...');
            
            const companyId = window.state?.currentCompanyId;
            if (!companyId) {
                logger.warn('‚ö†Ô∏è ID –∫–æ–º–ø–∞–Ω—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å');
                this.tasksData = [];
                return;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ Firebase
            const tasksRef = firebase.collection(firebase.db, 'companies', companyId, 'managerCalendarTasks');
            const tasksSnapshot = await firebase.getDocs(tasksRef);
            
            this.tasksData = [];
            tasksSnapshot.forEach(doc => {
                const data = doc.data();
                this.tasksData.push({
                    taskId: data.taskId,
                    ID: data.taskId,
                    –î–∞—Ç–∞: data.originalDate,
                    '–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è': data.modifiedDate || data.originalDate,
                    –î–µ–ª–æ: data.taskDescription,
                    –ú–µ–Ω–µ–¥–∂–µ—Ä: data.managerName,
                    '–ö–ª–∏–µ–Ω—Ç.–ù–∞–∑–≤–∞–Ω–∏–µ': data.clientName,
                    '–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥': data.clientCode,
                    '–ö–ª–∏–µ–Ω—Ç.–°—Å—ã–ª–∫–∞': data.clientLink || '',
                    departmentName: data.departmentName,
                    status: data.status || 'active',
                    originalDate: data.originalDate
                });
            });
            
            logger.info(`üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.tasksData.length} –∑–∞–≤–¥–∞–Ω—å –∑ Firebase`);
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', error);
            this.tasksData = [];
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
     */
    async _loadClientLinks() {
        try {
            // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ _loadSalesData()
            logger.info(`üîó –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –≥–æ—Ç–æ–≤–∏–π: ${Object.keys(this.clientLinks).length} –∑–∞–ø–∏—Å—ñ–≤`);
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Å—Å—ã–ª–æ–∫:', error);
            this.clientLinks = {};
        }
    }
    
    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–∞–Ω–Ω—ã–º–∏
     */
    _populateFilters() {
        try {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –æ—Ç–¥–µ–ª–æ–≤
            const departmentFilter = this.elements.departmentFilter;
            if (departmentFilter) {
                departmentFilter.innerHTML = '<option value="">–í—Å—ñ –≤—ñ–¥–¥—ñ–ª–∏</option>';
                this.departmentsData.forEach(dept => {
                    const option = document.createElement('option');
                    option.value = dept.id;
                    option.textContent = dept.name;
                    departmentFilter.appendChild(option);
                });
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            const managerFilter = this.elements.managerFilter;
            if (managerFilter) {
                managerFilter.innerHTML = '<option value="">–í—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏</option>';
                this.managersData.forEach(manager => {
                    const option = document.createElement('option');
                    option.value = manager.id;
                    option.textContent = manager.name;
                    managerFilter.appendChild(option);
                });
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–∞—Ç
            const dateFromFilter = this.elements.dateFromFilter;
            const dateToFilter = this.elements.dateToFilter;
            const periodFilter = this.elements.periodFilter;
            
            if (dateFromFilter && dateToFilter && periodFilter) {
                dateFromFilter.value = this.filters.dateFrom;
                dateToFilter.value = this.filters.dateTo;
                periodFilter.value = this.filters.period;
            }
            
            logger.info('‚úÖ –§—ñ–ª—å—Ç—Ä–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –¥–∞–Ω–∏–º–∏');
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞
     */
    _updateManagersFilter() {
        try {
            const departmentFilter = this.elements.departmentFilter;
            const managerFilter = this.elements.managerFilter;
            
            if (!departmentFilter || !managerFilter) return;
            
            const selectedDepartment = departmentFilter.value;
            
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            managerFilter.innerHTML = '<option value="">–í—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏</option>';
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ—Ç–¥–µ–ª—É
            const filteredManagers = selectedDepartment 
                ? this.managersData.filter(manager => manager.department === selectedDepartment)
                : this.managersData;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            filteredManagers.forEach(manager => {
                const option = document.createElement('option');
                option.value = manager.id;
                option.textContent = manager.name;
                managerFilter.appendChild(option);
            });
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            managerFilter.value = '';
            this.filters.manager = '';
            
            logger.info(`üîÑ –§—ñ–ª—å—Ç—Ä –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ: ${filteredManagers.length} –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –¥–ª—è –≤—ñ–¥–¥—ñ–ª—É ${selectedDepartment || '–≤—Å—ñ'}`);
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', error);
        }
    }
    
    /**
     * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
     */
    _sortTable(field) {
        try {
            logger.info(`üîÑ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ø–æ –ø–æ–ª—é: ${field}`);
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            this.workloadData.sort((a, b) => b[field] - a[field]);
            
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            this._renderTable();
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
        }
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º
     */
    _applyFilters() {
        try {
            logger.info('üîç –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤...');
            
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const filteredData = this._getFilteredData();
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –≤–º–µ—Å—Ç–æ –æ–±—â–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const activeTab = this.container.querySelector('.workload-tab.text-white');
            logger.verbose('üîç –ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞:', activeTab ? activeTab.id : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            
            if (activeTab) {
                const tabName = activeTab.id.replace('Tab', '');
                logger.verbose('üìä –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –≤–∫–ª–∞–¥–∫–∏:', tabName);
                
                switch(tabName) {
                    case 'dashboard':
                        this._renderDashboard();
                        break;
                    case 'table':
                        this._renderTable();
                        break;
                    case 'analytics':
                        this._renderAnalytics();
                        break;
                    default:
                        logger.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞:', tabName, '–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥');
                        this._renderDashboard();
                }
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥
                logger.warn('‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥');
                this._renderDashboard();
            }
            
            logger.info(`‚úÖ –§—ñ–ª—å—Ç—Ä–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ, –ø–æ–∫–∞–∑–∞–Ω–æ ${filteredData.length} –∑–∞–ø–∏—Å—ñ–≤`);
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    _getFilteredData() {
        let filteredData = [...this.workloadData];
        
        logger.verbose('üîç –ù–∞—á–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è:', {
            totalRecords: this.workloadData.length,
            filters: this.filters
        });
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–¥–µ–ª—É
        if (this.filters.department) {
            filteredData = filteredData.filter(item => 
                item.departmentId === this.filters.department
            );
            logger.verbose(`üè¢ –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–¥–µ–ª—É ${this.filters.department}: ${filteredData.length} –∑–∞–ø–∏—Å–µ–π`);
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        if (this.filters.manager) {
            filteredData = filteredData.filter(item => 
                item.managerId === this.filters.manager
            );
            logger.verbose(`üë§ –§–∏–ª—å—Ç—Ä –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É ${this.filters.manager}: ${filteredData.length} –∑–∞–ø–∏—Å–µ–π`);
        }
        
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É
        if (this.filters.period) {
            let fromDate = null;
            let toDate = null;
            
            if (this.filters.period === 'current_month') {
                // –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—ã –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                if (this.filters.dateFrom && this.filters.dateTo) {
                    fromDate = new Date(this.filters.dateFrom);
                    toDate = new Date(this.filters.dateTo);
                }
            } else {
                // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
                const months = parseInt(this.filters.period);
                fromDate = new Date();
                fromDate.setMonth(fromDate.getMonth() - months);
                toDate = new Date();
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
            if (fromDate && toDate) {
                const beforeFilter = filteredData.length;
                filteredData = filteredData.filter(item => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø–µ—Ä–∏–æ–¥–µ
                    const hasSalesActivity = item.salesList && item.salesList.some(sale => {
                        const saleDate = new Date(sale['–î–∞—Ç–∞'] || sale['Date'] || '');
                        return saleDate >= fromDate && saleDate <= toDate;
                    });
                    
                    const hasTaskActivity = item.tasksList && item.tasksList.some(task => {
                        const taskDate = new Date(task.originalDate || task['–î–∞—Ç–∞'] || '');
                        return taskDate >= fromDate && taskDate <= toDate;
                    });
                    
                    return hasSalesActivity || hasTaskActivity;
                });
                logger.verbose(`üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É ${fromDate.toISOString().split('T')[0]} - ${toDate.toISOString().split('T')[0]}: ${beforeFilter} ‚Üí ${filteredData.length} –∑–∞–ø–∏—Å–µ–π`);
            }
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥)
        if (this.filters.period !== 'current_month') {
            if (this.filters.dateFrom) {
                const fromDate = new Date(this.filters.dateFrom);
                const beforeFilter = filteredData.length;
                filteredData = filteredData.filter(item => {
                    const hasSalesActivity = item.salesList && item.salesList.some(sale => {
                        const saleDate = new Date(sale['–î–∞—Ç–∞'] || sale['Date'] || '');
                        return saleDate >= fromDate;
                    });
                    
                    const hasTaskActivity = item.tasksList && item.tasksList.some(task => {
                        const taskDate = new Date(task.originalDate || task['–î–∞—Ç–∞'] || '');
                        return taskDate >= fromDate;
                    });
                    
                    return hasSalesActivity || hasTaskActivity;
                });
                logger.verbose(`üìÖ –§–∏–ª—å—Ç—Ä —Å –¥–∞—Ç—ã ${this.filters.dateFrom}: ${beforeFilter} ‚Üí ${filteredData.length} –∑–∞–ø–∏—Å–µ–π`);
            }
            
            if (this.filters.dateTo) {
                const toDate = new Date(this.filters.dateTo);
                const beforeFilter = filteredData.length;
                filteredData = filteredData.filter(item => {
                    const hasSalesActivity = item.salesList && item.salesList.some(sale => {
                        const saleDate = new Date(sale['–î–∞—Ç–∞'] || sale['Date'] || '');
                        return saleDate <= toDate;
                    });
                    
                    const hasTaskActivity = item.tasksList && item.tasksList.some(task => {
                        const taskDate = new Date(task.originalDate || task['–î–∞—Ç–∞'] || '');
                        return taskDate <= toDate;
                    });
                    
                    return hasSalesActivity || hasTaskActivity;
                });
                logger.verbose(`üìÖ –§–∏–ª—å—Ç—Ä –¥–æ –¥–∞—Ç—ã ${this.filters.dateTo}: ${beforeFilter} ‚Üí ${filteredData.length} –∑–∞–ø–∏—Å–µ–π`);
            }
        }
        
        logger.verbose('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', {
            filteredRecords: filteredData.length,
            sampleData: filteredData.slice(0, 2).map(item => ({
                name: item.managerName,
                isDepartment: item.isDepartment,
                clients: item.totalClients,
                sales: item.salesList?.length || 0,
                tasks: item.tasksList?.length || 0
            }))
        });
        
        return filteredData;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    async _refreshData() {
        try {
            logger.info('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (this.elements.content) {
                this.elements.content.innerHTML = `
                    <div class="text-center py-8">
                        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mb-4"></div>
                        <p class="text-gray-200">–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...</p>
                    </div>
                `;
            }
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await this._loadData();
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            this._calculateMetrics();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            this._renderWorkload();
            
            logger.info('‚úÖ –î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            this._renderError('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö');
        }
    }
    
    _calculateMetrics() {
        logger.info('üìà –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...');
        
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –≤ departmentDashboard.js)
            this._validateAndDebugData();
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫
            let filterFromDate = null;
            let filterToDate = null;
            
            if (this.filters.period === 'current_month' && this.filters.dateFrom && this.filters.dateTo) {
                filterFromDate = new Date(this.filters.dateFrom);
                filterToDate = new Date(this.filters.dateTo);
            } else if (this.filters.period && this.filters.period !== 'current_month') {
                const months = parseInt(this.filters.period);
                filterFromDate = new Date();
                filterFromDate.setMonth(filterFromDate.getMonth() - months);
                filterToDate = new Date();
            } else if (this.filters.dateFrom || this.filters.dateTo) {
                filterFromDate = this.filters.dateFrom ? new Date(this.filters.dateFrom) : null;
                filterToDate = this.filters.dateTo ? new Date(this.filters.dateTo) : null;
            }
            
            logger.info('üìÖ –ü–µ—Ä–∏–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', {
                from: filterFromDate?.toISOString().split('T')[0],
                to: filterToDate?.toISOString().split('T')[0],
                period: this.filters.period
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤ –ø–µ—Ä–∏–æ–¥–µ
            if (filterFromDate && filterToDate) {
                const salesInPeriod = this.salesData.filter(sale => {
                    const saleDate = new Date(sale['–î–∞—Ç–∞'] || sale['Date'] || '');
                    return saleDate >= filterFromDate && saleDate <= filterToDate;
                });
                logger.info(`üìä –ü—Ä–æ–¥–∞–∂–∏ –≤ –ø–µ—Ä–∏–æ–¥–µ ${filterFromDate.toISOString().split('T')[0]} - ${filterToDate.toISOString().split('T')[0]}: ${salesInPeriod.length} –∑–∞–ø–∏—Å–µ–π`);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–¥–∞–∂ –≤ –ø–µ—Ä–∏–æ–¥–µ
                if (salesInPeriod.length > 0) {
                    logger.verbose('üìã –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–¥–∞–∂ –≤ –ø–µ—Ä–∏–æ–¥–µ:', salesInPeriod.slice(0, 3).map(sale => ({
                        date: sale['–î–∞—Ç–∞'] || sale['Date'],
                        client: sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] || sale['–ö–ª—ñ—î–Ω—Ç.–ö–æ–¥'],
                        revenue: sale['–í—ã—Ä—É—á–∫–∞'] || sale['–í–∏—Ä—É—á–∫–∞'],
                        operation: sale['–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏'] || sale['–¢–∏–ø'] || sale['–û–ø–µ—Ä–∞—Ü–∏—è']
                    })));
                }
            }
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–¥–µ–ª–∞–º –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º (–∫–∞–∫ –≤ departmentDashboard.js)
            const workloadByDepartment = {};
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª–∞
            this.departmentsData.forEach(department => {
                workloadByDepartment[department.id] = {
                    departmentId: department.id,
                    departmentName: department.name,
                    managers: {},
                    totalClients: 0,
                    shippedClients: 0,
                    shippedPercentage: 0,
                    totalOrders: 0,
                    totalRevenue: 0,
                    averageCheck: 0,
                    tasksTotal: 0,
                    tasksCompleted: 0,
                    tasksRescheduled: 0,
                    tasksNew: 0,
                    averageProductCoverage: 0,
                    totalCalls: 0,
                    totalMinutesInLine: 0,
                    effectiveCalls: 0,
                    lastActivity: null,
                    clientList: [],
                    salesList: [],
                    tasksList: []
                };
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            this.managersData.forEach(manager => {
                const departmentId = manager.department;
                if (!workloadByDepartment[departmentId]) {
                    // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    workloadByDepartment[departmentId] = {
                        departmentId: departmentId,
                        departmentName: this.departmentsData.find(d => d.id === departmentId)?.name || '–ù–µ–≤—ñ–¥–æ–º–∏–π –≤—ñ–¥–¥—ñ–ª',
                        managers: {},
                        totalClients: 0,
                        shippedClients: 0,
                        shippedPercentage: 0,
                        totalOrders: 0,
                        totalRevenue: 0,
                        averageCheck: 0,
                        tasksTotal: 0,
                        tasksCompleted: 0,
                        tasksRescheduled: 0,
                        tasksNew: 0,
                        averageProductCoverage: 0,
                        totalCalls: 0,
                        totalMinutesInLine: 0,
                        effectiveCalls: 0,
                        lastActivity: null,
                        clientList: [],
                        salesList: [],
                        tasksList: [],
                        
                        // === –ù–û–í–Ü –ú–ï–¢–†–ò–ö–ò –î–õ–Ø –í–Ü–î–î–Ü–õ–Ü–í ===
                        
                        // –ú–µ—Ç—Ä–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
                        averageOrdersPerDay: 0,
                        averageClientsPerDay: 0,
                        workIntensity: 0,
                        activeDaysCount: 0,
                        efficiencyScore: 0,
                        
                        // –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã
                        newClientsInPeriod: 0,
                        repeatOrdersClients: 0,
                        clientActivityRate: 0,
                        averageOrderInterval: 0,
                        
                        // –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                        revenueGrowth: 0,
                        clientsGrowth: 0,
                        ordersGrowth: 0,
                        previousPeriodComparison: {},
                        
                        // –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã
                        taskCompletionRate: 0,
                        taskEfficiencyRate: 0,
                        averageTaskDuration: 0,
                        
                        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                        orderFrequency: 0,
                        clientRetentionRate: 0,
                        seasonalActivity: {},
                        
                        // –†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                        revenueRank: 0,
                        clientsRank: 0,
                        efficiencyRank: 0,
                        overallRank: 0
                    };
                }
                
                workloadByDepartment[departmentId].managers[manager.id] = {
                    managerId: manager.id,
                    managerName: manager.name,
                    departmentId: departmentId,
                    departmentName: workloadByDepartment[departmentId].departmentName,
                    
                    // 1. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤
                    totalClients: 0,
                    
                    // 2. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≥—Ä—É–∂–µ–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
                    shippedClients: 0,
                    
                    // 3. –í—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥–≥—Ä—É–∂–µ–Ω–∏—Ö
                    shippedPercentage: 0,
                    
                    // 4. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å
                    totalOrders: 0,
                    
                    // 5. –°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å
                    totalRevenue: 0,
                    
                    // 6. –î–ª–∏–Ω–∞ —á–µ–∫–∞ (—Å–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫)
                    averageCheck: 0,
                    
                    // 7. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–∞–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö
                    tasksTotal: 0,
                    tasksCompleted: 0,
                    tasksRescheduled: 0,
                    tasksNew: 0,
                    
                    // 8. –°–µ—Ä–µ–¥–Ω—è –ø–æ–∫—Ä–∏—Ç—Ç—è –≥—Ä—É–ø —Ç–æ–≤–∞—Ä—ñ–≤
                    averageProductCoverage: 0,
                    
                    // 9. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–∑–≤—ñ–Ω–∫—ñ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
                    totalCalls: 0,
                    
                    // 10. –•–≤–∏–ª–∏–Ω–∏ –≤ –ª—ñ–Ω—ñ—ó (–∑–∞–≥–ª—É—à–∫–∞)
                    totalMinutesInLine: 0,
                    
                    // 11. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏—Ö –¥–∑–≤—ñ–Ω–∫—ñ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
                    effectiveCalls: 0,
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    lastActivity: null,
                    clientList: [],
                    salesList: [],
                    tasksList: [],
                    
                    // === –ù–û–í–Ü –ú–ï–¢–†–ò–ö–ò ===
                    
                    // –ú–µ—Ç—Ä–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
                    averageOrdersPerDay: 0,        // –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å
                    averageClientsPerDay: 0,       // –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –¥–µ–Ω—å
                    workIntensity: 0,              // –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã (–æ–ø–µ—Ä–∞—Ü–∏–∏/–¥–µ–Ω—å)
                    activeDaysCount: 0,            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π
                    efficiencyScore: 0,            // –û–±—â–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    
                    // –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã
                    newClientsInPeriod: 0,         // –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
                    repeatOrdersClients: 0,        // –ö–ª–∏–µ–Ω—Ç—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
                    clientActivityRate: 0,         // –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                    averageOrderInterval: 0,       // –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏
                    
                    // –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    revenueGrowth: 0,              // –†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ (%)
                    clientsGrowth: 0,              // –†–æ—Å—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ (%)
                    ordersGrowth: 0,               // –†–æ—Å—Ç –∑–∞–∫–∞–∑–æ–≤ (%)
                    previousPeriodComparison: {},   // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
                    
                    // –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã
                    taskCompletionRate: 0,         // –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                    taskEfficiencyRate: 0,         // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
                    averageTaskDuration: 0,        // –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
                    
                    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    orderFrequency: 0,             // –ß–∞—Å—Ç–æ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤ (–∑–∞–∫–∞–∑–æ–≤/–¥–µ–Ω—å)
                    clientRetentionRate: 0,        // –ü—Ä–æ—Ü–µ–Ω—Ç —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
                    seasonalActivity: {},          // –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    
                    // –†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    revenueRank: 0,                // –†–µ–π—Ç–∏–Ω–≥ –ø–æ –≤—ã—Ä—É—á–∫–µ
                    clientsRank: 0,                // –†–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
                    efficiencyRank: 0,             // –†–µ–π—Ç–∏–Ω–≥ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    overallRank: 0                 // –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
                };
            });
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–∞–∂ –≤ –ø–µ—Ä–∏–æ–¥–µ (–≤—ã–Ω–µ—Å–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –∫–ª–∞—Å—Å–∞)
            const getSalesInPeriod = (sales) => {
                try {
                    if (!sales || !Array.isArray(sales)) {
                        logger.warn('‚ö†Ô∏è getSalesInPeriod: sales –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', sales);
                        return [];
                    }
                    
                    if (!filterFromDate && !filterToDate) {
                        return sales; // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏
                    }
                    
                    return sales.filter(sale => {
                        try {
                            const saleDate = new Date(sale['–î–∞—Ç–∞'] || sale['Date'] || '');
                            if (filterFromDate && saleDate < filterFromDate) return false;
                            if (filterToDate && saleDate > filterToDate) return false;
                            return true;
                        } catch (error) {
                            logger.warn('‚ö†Ô∏è getSalesInPeriod: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥–∞–∂–∏:', sale, error);
                            return false;
                        }
                    });
                } catch (error) {
                    logger.error('‚ùå getSalesInPeriod: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
                    return [];
                }
            };
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
            this.clientsData.forEach(client => {
                const manager = this.managersData.find(m => 
                    m.name === client.manager || 
                    m.id === client.manager
                );
                
                if (manager && workloadByDepartment[manager.department]?.managers[manager.id]) {
                    const managerWorkload = workloadByDepartment[manager.department].managers[manager.id];
                    const departmentWorkload = workloadByDepartment[manager.department];
                    
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—á–∏—Ç–∞–µ–º –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–∫–∞–∫ –≤ departmentDashboard.js)
                    // –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –µ—Å—Ç—å –ª–∏ —É –Ω–∏—Ö –ø—Ä–æ–¥–∞–∂–∏ –≤ –ø–µ—Ä–∏–æ–¥–µ
                    managerWorkload.totalClients++;
                    departmentWorkload.totalClients++;
                    managerWorkload.clientList.push(client);
                    departmentWorkload.clientList.push(client);
                    
                    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–µ—Ä–∏–æ–¥–µ
                    const clientSalesInPeriod = getSalesInPeriod(client.sales);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≥—Ä—É–∑–∫–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –í –ü–ï–†–ò–û–î–ï
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ—Å–∫–æ–ª—å–∫—É –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —è–≤–Ω—ã—Ö –ø–æ–ª–µ–π —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≥—Ä—É–∑–∫–∏,
                    // —Å—á–∏—Ç–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ –≤ –ø–µ—Ä–∏–æ–¥–µ –∫–∞–∫ "–æ—Ç–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö"
                    const hasShipmentsInPeriod = clientSalesInPeriod.length > 0;
                    
                    if (hasShipmentsInPeriod) {
                        managerWorkload.shippedClients++;
                        departmentWorkload.shippedClients++;
                        
                        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ—Ç–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                        if (managerWorkload.shippedClients <= 3) {
                            logger.verbose(`üöö –û—Ç–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç ${client.code} (${client.name}) –≤ –ø–µ—Ä–∏–æ–¥–µ: ${clientSalesInPeriod.length} –ø—Ä–æ–¥–∞–∂`);
                        }
                    } else {
                        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø—Ä–æ–¥–∞–∂ –≤ –ø–µ—Ä–∏–æ–¥–µ
                        if (managerWorkload.totalClients <= 3) {
                            logger.verbose(`‚ùå –ö–ª–∏–µ–Ω—Ç ${client.code} (${client.name}) –ë–ï–ó –ø—Ä–æ–¥–∞–∂ –≤ –ø–µ—Ä–∏–æ–¥–µ`);
                        }
                    }
                    
                    // –£–õ–£–ß–®–ï–ù–ù–´–ô –†–ê–°–ß–ï–¢ –ó–ê–ö–ê–ó–û–í (–∫–∞–∫ –≤ departmentDashboard.js)
                    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–µ–∫–∞–º (–∫–ª–∏–µ–Ω—Ç + –¥–∞—Ç–∞) –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤
                    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –≤ –ø–µ—Ä–∏–æ–¥–µ
                    if (clientSalesInPeriod.length > 0) {
                        const checksMap = new Map(); // –ö–ª—é—á: "clientCode_date", –∑–Ω–∞—á–µ–Ω–∏–µ: —Å—É–º–º–∞ —á–µ–∫–∞
                        let clientTotalRevenue = 0;
                        
                        clientSalesInPeriod.forEach(sale => {
                            const clientCode = sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] || sale['–ö–ª—ñ—î–Ω—Ç.–ö–æ–¥'] || client.code;
                            const saleDate = sale['–î–∞—Ç–∞'] || sale['Date'] || '';
                            
                            if (clientCode && saleDate) {
                                const checkKey = `${clientCode}_${saleDate}`;
                                if (!checksMap.has(checkKey)) {
                                    checksMap.set(checkKey, 0);
                                }
                                
                                // –ü–∞—Ä—Å–∏–º –≤—ã—Ä—É—á–∫—É (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –∑–∞–ø—è—Ç—ã–º–∏)
                                let revenue = sale['–í—ã—Ä—É—á–∫–∞'] || sale['–í–∏—Ä—É—á–∫–∞'] || 0;
                                if (typeof revenue === 'string') {
                                    revenue = parseFloat(revenue.replace(/\s/g, '').replace(',', '.')) || 0;
                                }
                                
                                checksMap.set(checkKey, checksMap.get(checkKey) + revenue);
                                clientTotalRevenue += revenue;
                            }
                        });
                        
                        const uniqueOrders = checksMap.size; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–µ–∫–æ–≤
                        managerWorkload.totalOrders += uniqueOrders;
                        departmentWorkload.totalOrders += uniqueOrders;
                        managerWorkload.totalRevenue += clientTotalRevenue;
                        departmentWorkload.totalRevenue += clientTotalRevenue;
                        managerWorkload.salesList.push(...clientSalesInPeriod);
                        departmentWorkload.salesList.push(...clientSalesInPeriod);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                        if (!managerWorkload.lastActivity || client.lastSale > managerWorkload.lastActivity) {
                            managerWorkload.lastActivity = client.lastSale;
                        }
                        if (!departmentWorkload.lastActivity || client.lastSale > departmentWorkload.lastActivity) {
                            departmentWorkload.lastActivity = client.lastSale;
                        }
                    }
                }
            });
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á
            this.tasksData.forEach(task => {
                const manager = this.managersData.find(m => 
                    m.name === task.–ú–µ–Ω–µ–¥–∂–µ—Ä || 
                    m.id === task.–ú–µ–Ω–µ–¥–∂–µ—Ä
                );
                
                if (manager && workloadByDepartment[manager.department]?.managers[manager.id]) {
                    const managerWorkload = workloadByDepartment[manager.department].managers[manager.id];
                    const departmentWorkload = workloadByDepartment[manager.department];
                    
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
                    managerWorkload.tasksTotal++;
                    departmentWorkload.tasksTotal++;
                    managerWorkload.tasksList.push(task);
                    departmentWorkload.tasksList.push(task);
                    
                    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                    switch(task.status) {
                        case 'completed':
                            managerWorkload.tasksCompleted++;
                            departmentWorkload.tasksCompleted++;
                            break;
                        case 'rescheduled':
                            managerWorkload.tasksRescheduled++;
                            departmentWorkload.tasksRescheduled++;
                            break;
                        case 'new':
                            managerWorkload.tasksNew++;
                            departmentWorkload.tasksNew++;
                            break;
                        default:
                            managerWorkload.tasksNew++; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–º–∏
                            departmentWorkload.tasksNew++;
                    }
                }
            });
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            Object.values(workloadByDepartment).forEach(department => {
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª–∞
                if (department.totalClients > 0) {
                    department.shippedPercentage = (department.shippedClients / department.totalClients) * 100;
                }
                
                if (department.totalOrders > 0) {
                    // –î–ª–∏–Ω–∞ —á–µ–∫–∞ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SKU –≤ –∑–∞–∫–∞–∑–µ (—Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä –Ω–∞ –∑–∞–∫–∞–∑)
                    const totalSkus = department.salesList.length;
                    department.averageCheck = totalSkus / department.totalOrders;
                }
                
                if (department.salesList.length > 0) {
                    const productGroups = new Set();
                    department.salesList.forEach(sale => {
                        const product = sale['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] || sale['–¢–æ–≤–∞—Ä'] || '';
                        if (product) {
                            const group = product.split(' ')[0]; // –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –≥—Ä—É–ø–ø–∞
                            productGroups.add(group);
                        }
                    });
                    department.averageProductCoverage = productGroups.size;
                }
                
                // === –†–û–ó–†–ê–•–£–ù–û–ö –ù–û–í–ò–• –ú–ï–¢–†–ò–ö –î–õ–Ø –í–Ü–î–î–Ü–õ–£ ===
                
                // –ú–µ—Ç—Ä–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
                const periodDays = filterFromDate && filterToDate ? 
                    Math.ceil((filterToDate - filterFromDate) / (1000 * 60 * 60 * 24)) + 1 : 30;
                
                department.averageOrdersPerDay = periodDays > 0 ? department.totalOrders / periodDays : 0;
                department.averageClientsPerDay = periodDays > 0 ? department.totalClients / periodDays : 0;
                department.workIntensity = periodDays > 0 ? (department.totalOrders + department.tasksTotal) / periodDays : 0;
                
                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏ –¥–ª—è –æ—Ç–¥–µ–ª–∞
                const departmentActiveDays = new Set();
                department.salesList.forEach(sale => {
                    const saleDate = new Date(sale['–î–∞—Ç–∞'] || sale['Date'] || '');
                    departmentActiveDays.add(saleDate.toISOString().split('T')[0]);
                });
                department.tasksList.forEach(task => {
                    const taskDate = new Date(task.originalDate || task['–î–∞—Ç–∞'] || '');
                    departmentActiveDays.add(taskDate.toISOString().split('T')[0]);
                });
                department.activeDaysCount = departmentActiveDays.size;
                
                // –û–±—â–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª–∞
                const departmentEfficiencyFactors = [
                    department.shippedPercentage / 100,
                    department.tasksCompleted / Math.max(department.tasksTotal, 1),
                    department.totalRevenue > 0 ? 1 : 0.5,
                    department.activeDaysCount / periodDays
                ];
                department.efficiencyScore = (departmentEfficiencyFactors.reduce((sum, factor) => sum + factor, 0) / departmentEfficiencyFactors.length) * 100;
                
                // –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã –¥–ª—è –æ—Ç–¥–µ–ª–∞
                const departmentNewClients = department.clientList.filter(client => {
                    const firstSale = client.firstSale;
                    return firstSale && filterFromDate && firstSale >= filterFromDate;
                });
                department.newClientsInPeriod = departmentNewClients.length;
                
                const departmentRepeatOrdersClients = department.clientList.filter(client => {
                    try {
                        const clientSalesInPeriod = getSalesInPeriod(client.sales || []);
                        return clientSalesInPeriod.length > 1;
                    } catch (error) {
                        logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ departmentRepeatOrdersClients –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:', client.code, error);
                        return false;
                    }
                });
                department.repeatOrdersClients = departmentRepeatOrdersClients.length;
                
                department.clientActivityRate = department.totalClients > 0 ? 
                    (department.shippedClients / department.totalClients) * 100 : 0;
                
                // –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –¥–ª—è –æ—Ç–¥–µ–ª–∞
                department.taskCompletionRate = department.tasksTotal > 0 ? 
                    (department.tasksCompleted / department.tasksTotal) * 100 : 0;
                
                department.taskEfficiencyRate = department.tasksTotal > 0 ? 
                    (department.tasksCompleted / (department.tasksCompleted + department.tasksRescheduled)) * 100 : 0;
                
                // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª–∞
                department.orderFrequency = periodDays > 0 ? department.totalOrders / periodDays : 0;
                
                // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫ –æ—Ç–¥–µ–ª–∞
                department.totalCalls = Math.floor(Math.random() * 200) + 100; // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
                department.totalMinutesInLine = Math.floor(Math.random() * 600) + 200; // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
                department.effectiveCalls = Math.floor(department.totalCalls * 0.7); // 70% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª–µ
                Object.values(department.managers).forEach(manager => {
                    if (manager.totalClients > 0) {
                        manager.shippedPercentage = (manager.shippedClients / manager.totalClients) * 100;
                    }
                    
                    if (manager.totalOrders > 0) {
                        // –î–ª–∏–Ω–∞ —á–µ–∫–∞ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SKU –≤ –∑–∞–∫–∞–∑–µ (—Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä –Ω–∞ –∑–∞–∫–∞–∑)
                        const totalSkus = manager.salesList.length;
                        manager.averageCheck = totalSkus / manager.totalOrders;
                    }
                    
                    if (manager.salesList.length > 0) {
                        const productGroups = new Set();
                        manager.salesList.forEach(sale => {
                            const product = sale['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] || sale['–¢–æ–≤–∞—Ä'] || '';
                            if (product) {
                                const group = product.split(' ')[0]; // –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –≥—Ä—É–ø–ø–∞
                                productGroups.add(group);
                            }
                        });
                        manager.averageProductCoverage = productGroups.size;
                    }
                    
                    // === –†–û–ó–†–ê–•–£–ù–û–ö –ù–û–í–ò–• –ú–ï–¢–†–ò–ö –î–õ–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê ===
                    
                    // –ú–µ—Ç—Ä–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
                    const periodDays = filterFromDate && filterToDate ? 
                        Math.ceil((filterToDate - filterFromDate) / (1000 * 60 * 60 * 24)) + 1 : 30;
                    
                    manager.averageOrdersPerDay = periodDays > 0 ? manager.totalOrders / periodDays : 0;
                    manager.averageClientsPerDay = periodDays > 0 ? manager.totalClients / periodDays : 0;
                    manager.workIntensity = periodDays > 0 ? (manager.totalOrders + manager.tasksTotal) / periodDays : 0;
                    
                    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏ (–¥–Ω–∏ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ –∏–ª–∏ –∑–∞–¥–∞—á–∞–º–∏)
                    const activeDays = new Set();
                    manager.salesList.forEach(sale => {
                        const saleDate = new Date(sale['–î–∞—Ç–∞'] || sale['Date'] || '');
                        activeDays.add(saleDate.toISOString().split('T')[0]);
                    });
                    manager.tasksList.forEach(task => {
                        const taskDate = new Date(task.originalDate || task['–î–∞—Ç–∞'] || '');
                        activeDays.add(taskDate.toISOString().split('T')[0]);
                    });
                    manager.activeDaysCount = activeDays.size;
                    
                    // –û–±—â–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    const efficiencyFactors = [
                        manager.shippedPercentage / 100,           // –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                        manager.tasksCompleted / Math.max(manager.tasksTotal, 1), // –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                        manager.totalRevenue > 0 ? 1 : 0.5,       // –ù–∞–ª–∏—á–∏–µ –≤—ã—Ä—É—á–∫–∏
                        manager.activeDaysCount / periodDays       // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
                    ];
                    manager.efficiencyScore = (efficiencyFactors.reduce((sum, factor) => sum + factor, 0) / efficiencyFactors.length) * 100;
                    
                    // –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã
                    const newClients = manager.clientList.filter(client => {
                        const firstSale = client.firstSale;
                        return firstSale && filterFromDate && firstSale >= filterFromDate;
                    });
                    manager.newClientsInPeriod = newClients.length;
                    
                    const repeatOrdersClients = manager.clientList.filter(client => {
                        try {
                            const clientSalesInPeriod = getSalesInPeriod(client.sales || []);
                            return clientSalesInPeriod.length > 1;
                        } catch (error) {
                            logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ repeatOrdersClients –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:', client.code, error);
                            return false;
                        }
                    });
                    manager.repeatOrdersClients = repeatOrdersClients.length;
                    
                    manager.clientActivityRate = manager.totalClients > 0 ? 
                        (manager.shippedClients / manager.totalClients) * 100 : 0;
                    
                    // –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏ (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏)
                    let totalIntervals = 0;
                    let intervalsCount = 0;
                    manager.clientList.forEach(client => {
                        try {
                            const clientSalesInPeriod = getSalesInPeriod(client.sales || []);
                            if (clientSalesInPeriod.length > 1) {
                                const sortedSales = clientSalesInPeriod.sort((a, b) => 
                                    new Date(a['–î–∞—Ç–∞'] || a['Date']) - new Date(b['–î–∞—Ç–∞'] || b['Date'])
                                );
                                for (let i = 1; i < sortedSales.length; i++) {
                                    const interval = new Date(sortedSales[i]['–î–∞—Ç–∞'] || sortedSales[i]['Date']) - 
                                                   new Date(sortedSales[i-1]['–î–∞—Ç–∞'] || sortedSales[i-1]['Date']);
                                    totalIntervals += interval;
                                    intervalsCount++;
                                }
                            }
                        } catch (error) {
                            logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ averageOrderInterval –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:', client.code, error);
                        }
                    });
                    manager.averageOrderInterval = intervalsCount > 0 ? totalIntervals / intervalsCount / (1000 * 60 * 60 * 24) : 0;
                    
                    // –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã
                    manager.taskCompletionRate = manager.tasksTotal > 0 ? 
                        (manager.tasksCompleted / manager.tasksTotal) * 100 : 0;
                    
                    manager.taskEfficiencyRate = manager.tasksTotal > 0 ? 
                        (manager.tasksCompleted / (manager.tasksCompleted + manager.tasksRescheduled)) * 100 : 0;
                    
                    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    manager.orderFrequency = periodDays > 0 ? manager.totalOrders / periodDays : 0;
                    
                    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                    manager.totalCalls = Math.floor(Math.random() * 100) + 50; // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
                    manager.totalMinutesInLine = Math.floor(Math.random() * 300) + 100; // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
                    manager.effectiveCalls = Math.floor(manager.totalCalls * 0.7); // 70% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                });
            });
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –æ—Ç–¥–µ–ª–∞–º
            this.workloadData = [];
            
            Object.values(workloadByDepartment).forEach(department => {
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç–¥–µ–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
                if (department.totalClients > 0 || department.tasksTotal > 0) {
                    this.workloadData.push({
                        ...department,
                        isDepartment: true,
                        managerName: department.departmentName,
                        managerId: department.departmentId
                    });
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ—Ç–¥–µ–ª–∞
                Object.values(department.managers).forEach(manager => {
                    if (manager.totalClients > 0 || manager.tasksTotal > 0) {
                        this.workloadData.push({
                            ...manager,
                            isDepartment: false
                        });
                    }
                });
            });
            
            // === –†–û–ó–†–ê–•–£–ù–û–ö –†–ï–ô–¢–ò–ù–ì–Ü–í ===
            
            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ò –æ—Ç–¥–µ–ª–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            const allManagers = [];
            const allDepartments = [];
            
            Object.values(workloadByDepartment).forEach(department => {
                // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª
                allDepartments.push(department);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ—Ç–¥–µ–ª–∞
                Object.values(department.managers).forEach(manager => {
                    allManagers.push(manager);
                });
            });
            
            // –†–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            const revenueRanking = [...allManagers].sort((a, b) => b.totalRevenue - a.totalRevenue);
            const clientsRanking = [...allManagers].sort((a, b) => b.totalClients - a.totalClients);
            const efficiencyRanking = [...allManagers].sort((a, b) => b.efficiencyScore - a.efficiencyScore);
            
            // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
            revenueRanking.forEach((manager, index) => {
                manager.revenueRank = index + 1;
            });
            
            clientsRanking.forEach((manager, index) => {
                manager.clientsRank = index + 1;
            });
            
            efficiencyRanking.forEach((manager, index) => {
                manager.efficiencyRank = index + 1;
            });
            
            // –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            allManagers.forEach(manager => {
                const avgRank = (manager.revenueRank + manager.clientsRank + manager.efficiencyRank) / 3;
                manager.overallRank = Math.round(avgRank);
            });
            
            // –†–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤
            const departmentRevenueRanking = [...allDepartments].sort((a, b) => b.totalRevenue - a.totalRevenue);
            const departmentClientsRanking = [...allDepartments].sort((a, b) => b.totalClients - a.totalClients);
            const departmentEfficiencyRanking = [...allDepartments].sort((a, b) => b.efficiencyScore - a.efficiencyScore);
            
            // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –æ—Ç–¥–µ–ª–∞–º
            departmentRevenueRanking.forEach((department, index) => {
                department.revenueRank = index + 1;
            });
            
            departmentClientsRanking.forEach((department, index) => {
                department.clientsRank = index + 1;
            });
            
            departmentEfficiencyRanking.forEach((department, index) => {
                department.efficiencyRank = index + 1;
            });
            
            // –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤
            allDepartments.forEach(department => {
                const avgRank = (department.revenueRank + department.clientsRank + department.efficiencyRank) / 3;
                department.overallRank = Math.round(avgRank);
            });
            
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö
            logger.verbose('üèÜ –†–µ–π—Ç–∏–Ω–≥–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', allManagers.slice(0, 3).map(m => ({
                name: m.managerName,
                revenueRank: m.revenueRank,
                clientsRank: m.clientsRank,
                efficiencyRank: m.efficiencyRank,
                overallRank: m.overallRank
            })));
            
            logger.verbose('üèÜ –†–µ–π—Ç–∏–Ω–≥–∏ –æ—Ç–¥–µ–ª–æ–≤:', allDepartments.slice(0, 3).map(d => ({
                name: d.departmentName,
                revenueRank: d.revenueRank,
                clientsRank: d.clientsRank,
                efficiencyRank: d.efficiencyRank,
                overallRank: d.overallRank
            })));
            
            logger.info(`üìà –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è ${this.workloadData.length} –∑–∞–ø–∏—Å–µ–π (–æ—Ç–¥–µ–ª—ã + –º–µ–Ω–µ–¥–∂–µ—Ä—ã)`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            if (this.workloadData.length > 0) {
                const sampleData = this.workloadData.slice(0, 3).map(item => ({
                    name: item.managerName,
                    isDepartment: item.isDepartment,
                    clients: item.totalClients,
                    shippedClients: item.shippedClients,
                    shippedPercentage: item.shippedPercentage,
                    orders: item.totalOrders,
                    revenue: item.totalRevenue,
                    salesCount: item.salesList?.length || 0,
                    tasksCount: item.tasksList?.length || 0
                }));
                
                logger.verbose('üìä –ü—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫:', sampleData);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                const totalClients = this.workloadData.reduce((sum, item) => sum + item.totalClients, 0);
                const totalShippedClients = this.workloadData.reduce((sum, item) => sum + item.shippedClients, 0);
                const totalOrders = this.workloadData.reduce((sum, item) => sum + item.totalOrders, 0);
                const totalRevenue = this.workloadData.reduce((sum, item) => sum + item.totalRevenue, 0);
                
                logger.info('üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
                    totalClients,
                    totalShippedClients,
                    totalOrders,
                    totalRevenue: totalRevenue.toLocaleString(),
                    shippedPercentage: totalClients > 0 ? ((totalShippedClients / totalClients) * 100).toFixed(1) + '%' : '0%'
                });
                
                // –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
                logger.verbose('üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê - –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏—Ö –ø—Ä–æ–¥–∞–∂–∞–º–∏
                this.clientsData.slice(0, 3).forEach((client, index) => {
                    const clientSalesInPeriod = client.sales.filter(sale => {
                        const saleDate = new Date(sale['–î–∞—Ç–∞'] || sale['Date'] || '');
                        if (filterFromDate && saleDate < filterFromDate) return false;
                        if (filterToDate && saleDate > filterToDate) return false;
                        return true;
                    });
                    
                    logger.verbose(`üë§ –ö–ª–∏–µ–Ω—Ç ${index + 1}: ${client.code} (${client.name})`, {
                        manager: client.manager,
                        totalSales: client.sales.length,
                        salesInPeriod: clientSalesInPeriod.length,
                        isShipped: clientSalesInPeriod.length > 0,
                        sampleSales: clientSalesInPeriod.slice(0, 2).map(sale => ({
                            date: sale['–î–∞—Ç–∞'] || sale['Date'],
                            revenue: sale['–í—ã—Ä—É—á–∫–∞'] || sale['–í–∏—Ä—É—á–∫–∞'],
                            product: sale['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] || sale['–¢–æ–≤–∞—Ä']
                        }))
                    });
                });
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
                Object.values(workloadByDepartment).forEach(department => {
                    logger.verbose(`üè¢ –û—Ç–¥–µ–ª ${department.departmentName}:`, {
                        totalClients: department.totalClients,
                        shippedClients: department.shippedClients,
                        shippedPercentage: department.shippedPercentage.toFixed(1) + '%',
                        managers: Object.keys(department.managers).length
                    });
                    
                    Object.values(department.managers).forEach(manager => {
                        logger.verbose(`üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä ${manager.managerName}:`, {
                            totalClients: manager.totalClients,
                            shippedClients: manager.shippedClients,
                            shippedPercentage: manager.shippedPercentage.toFixed(1) + '%',
                            totalOrders: manager.totalOrders,
                            totalRevenue: manager.totalRevenue.toLocaleString()
                        });
                    });
                });
            }
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫:', error);
            this.workloadData = [];
        }
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å –¥–∞–Ω–Ω—ã–º–∏
     */
    _renderWorkloadWithData(data) {
        if (this.elements.content) {
            this.elements.content.innerHTML = `
                <div class="text-center py-8">
                    <h3 class="text-xl font-bold text-white mb-4">üìä –î–∞–Ω—ñ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h3>
                    <p class="text-gray-400">–ó–Ω–∞–π–¥–µ–Ω–æ ${data.length} –∑–∞–ø–∏—Å—ñ–≤</p>
                    <div class="mt-4 text-sm text-gray-500">
                        <p>–ú–µ–Ω–µ–¥–∂–µ—Ä–∏: ${this.managersData.length}</p>
                        <p>–ö–ª—ñ—î–Ω—Ç–∏: ${this.clientsData.length}</p>
                        <p>–ü—Ä–æ–¥–∞–∂—ñ: ${this.salesData.length}</p>
                        <p>–ó–∞–≤–¥–∞–Ω–Ω—è: ${this.tasksData.length}</p>
                    </div>
                </div>
            `;
        }
    }
    
    _renderWorkload() {
        logger.info('üìä –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...');
        this._renderDashboard();
    }
    
    _renderDashboard() {
        if (this.elements.content) {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
            const filteredData = this._getFilteredData();
            
            if (filteredData.length === 0) {
                this.elements.content.innerHTML = `
                    <div class="text-center py-8">
                        <h3 class="text-xl font-bold text-white mb-4">üìä –î–∞—à–±–æ—Ä–¥ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h3>
                        <p class="text-gray-400">–î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –∑–∞–Ω–∞–¥—Ç–æ –æ–±–º–µ–∂—É–≤–∞–ª—å–Ω—ñ</p>
                    </div>
                `;
                return;
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–π –Ω–∞–≥—Ä—É–∑–∫–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ + –∑–∞–¥–∞—á–∏)
            const sortedData = [...filteredData].sort((a, b) => 
                (b.totalClients + b.tasksTotal) - (a.totalClients + a.tasksTotal)
            );
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–¥–µ–ª–∞–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const groupedData = [];
            const departmentGroups = {};
            
            sortedData.forEach(item => {
                if (item.isDepartment) {
                    // –≠—Ç–æ –æ—Ç–¥–µ–ª
                    if (!departmentGroups[item.departmentId]) {
                        departmentGroups[item.departmentId] = {
                            department: item,
                            managers: []
                        };
                        groupedData.push(departmentGroups[item.departmentId]);
                    }
                } else {
                    // –≠—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä
                    if (!departmentGroups[item.departmentId]) {
                        departmentGroups[item.departmentId] = {
                            department: null,
                            managers: []
                        };
                        groupedData.push(departmentGroups[item.departmentId]);
                    }
                    departmentGroups[item.departmentId].managers.push(item);
                }
            });
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ KPI
            const totalManagers = sortedData.filter(item => !item.isDepartment).length;
            const totalClients = sortedData.reduce((sum, m) => sum + m.totalClients, 0);
            const totalRevenue = sortedData.reduce((sum, m) => sum + m.totalRevenue, 0);
            const totalTasks = sortedData.reduce((sum, m) => sum + m.tasksTotal, 0);
            const avgEfficiency = sortedData.reduce((sum, m) => sum + m.efficiencyScore, 0) / Math.max(sortedData.length, 1);
            
            // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ø-3 –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            const managersOnly = sortedData.filter(item => !item.isDepartment);
            const topByEfficiency = [...managersOnly].sort((a, b) => b.efficiencyScore - a.efficiencyScore).slice(0, 3);
            const topByRevenue = [...managersOnly].sort((a, b) => b.totalRevenue - a.totalRevenue).slice(0, 3);
            const topByNewClients = [...managersOnly].sort((a, b) => b.newClientsInPeriod - a.newClientsInPeriod).slice(0, 3);
            
            // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã
            const lowEfficiency = managersOnly.filter(m => m.efficiencyScore < 70);
            const highTaskLoad = managersOnly.filter(m => m.tasksTotal > 20);
            const lowActivity = managersOnly.filter(m => m.activeDaysCount < 10);
            
            this.elements.content.innerHTML = `
                <div class="workload-dashboard">
                    <!-- Debug button -->
                    <div class="flex justify-end mb-4">
                        <button class="px-3 py-1 bg-purple-600 text-white rounded hover:bg-purple-700 text-sm" onclick="window.toggleWorkloadDebug(); window.workloadInstance._calculateMetrics();">
                            üîç Debug Mode
                        </button>
                    </div>
                    
                    <!-- üéØ –ö–õ–Æ–ß–û–í–Ü –ü–û–ö–ê–ó–ù–ò–ö–ò -->
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-white mb-4">üéØ –ö–õ–Æ–ß–û–í–Ü –ü–û–ö–ê–ó–ù–ò–ö–ò</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                            <div class="bg-blue-600 rounded-lg p-4">
                                <h4 class="text-sm font-medium text-blue-100 mb-1">üë• –ö–ª—ñ—î–Ω—Ç–∏</h4>
                                <p class="text-2xl font-bold text-white">${totalClients}</p>
                                <p class="text-xs text-blue-200">–ê–∫—Ç–∏–≤–Ω–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤: ${totalManagers}</p>
                            </div>
                            <div class="bg-green-600 rounded-lg p-4">
                                <h4 class="text-sm font-medium text-green-100 mb-1">üí∞ –í–∏—Ä—É—á–∫–∞</h4>
                                <p class="text-2xl font-bold text-white">${(totalRevenue / 1000000).toFixed(1)}M ‚Ç¥</p>
                                <p class="text-xs text-green-200">–°–µ—Ä–µ–¥–Ω—è: ${(totalRevenue / Math.max(totalManagers, 1)).toLocaleString()} ‚Ç¥</p>
                            </div>
                            <div class="bg-yellow-600 rounded-lg p-4">
                                <h4 class="text-sm font-medium text-yellow-100 mb-1">üìã –ó–∞–≤–¥–∞–Ω–Ω—è</h4>
                                <p class="text-2xl font-bold text-white">${totalTasks}</p>
                                <p class="text-xs text-yellow-200">–°–µ—Ä–µ–¥–Ω—è: ${(totalTasks / Math.max(totalManagers, 1)).toFixed(1)}</p>
                            </div>
                            <div class="bg-purple-600 rounded-lg p-4">
                                <h4 class="text-sm font-medium text-purple-100 mb-1">‚ö° –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</h4>
                                <p class="text-2xl font-bold text-white">${avgEfficiency.toFixed(1)}%</p>
                                <p class="text-xs text-purple-200">–ó–∞–≥–∞–ª—å–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫</p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- üö® –ê–õ–ï–†–¢–ò (–ü—Ä–æ–±–ª–µ–º–Ω—ñ –∑–æ–Ω–∏) -->
                    ${(lowEfficiency.length > 0 || highTaskLoad.length > 0 || lowActivity.length > 0) ? `
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-white mb-4">üö® –ê–õ–ï–†–¢–ò (–ü—Ä–æ–±–ª–µ–º–Ω—ñ –∑–æ–Ω–∏)</h3>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            ${lowEfficiency.length > 0 ? `
                            <div class="bg-red-600 rounded-lg p-4">
                                <h4 class="text-sm font-medium text-red-100 mb-2">‚ö†Ô∏è –ù–∏–∑—å–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</h4>
                                <div class="space-y-1">
                                    ${lowEfficiency.slice(0, 3).map(m => `
                                        <div class="flex justify-between text-sm">
                                            <span class="text-red-200">${m.managerName}</span>
                                            <span class="text-white font-bold">${m.efficiencyScore.toFixed(1)}%</span>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                            ` : ''}
                            
                            ${highTaskLoad.length > 0 ? `
                            <div class="bg-orange-600 rounded-lg p-4">
                                <h4 class="text-sm font-medium text-orange-100 mb-2">üìã –í–∏—Å–æ–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h4>
                                <div class="space-y-1">
                                    ${highTaskLoad.slice(0, 3).map(m => `
                                        <div class="flex justify-between text-sm">
                                            <span class="text-orange-200">${m.managerName}</span>
                                            <span class="text-white font-bold">${m.tasksTotal} –∑–∞–≤–¥–∞–Ω—å</span>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                            ` : ''}
                            
                            ${lowActivity.length > 0 ? `
                            <div class="bg-yellow-600 rounded-lg p-4">
                                <h4 class="text-sm font-medium text-yellow-100 mb-2">üò¥ –ù–∏–∑—å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</h4>
                                <div class="space-y-1">
                                    ${lowActivity.slice(0, 3).map(m => `
                                        <div class="flex justify-between text-sm">
                                            <span class="text-yellow-200">${m.managerName}</span>
                                            <span class="text-white font-bold">${m.activeDaysCount} –¥–Ω—ñ–≤</span>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                            ` : ''}
                        </div>
                    </div>
                    ` : ''}
                    
                    <!-- üèÜ –¢–û–ü-3 –ú–ï–ù–ï–î–ñ–ï–†–ò -->
                    <div class="mb-6">
                        <h3 class="text-xl font-bold text-white mb-4">üèÜ –¢–û–ü-3 –ú–ï–ù–ï–î–ñ–ï–†–ò</h3>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div class="bg-gray-700 rounded-lg p-4">
                                <h4 class="text-lg font-bold text-white mb-3">ü•á –¢–æ–ø –ø–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ</h4>
                                ${topByEfficiency.map((manager, index) => `
                                    <div class="flex justify-between items-center mb-2">
                                        <span class="text-gray-300">${index + 1}. ${manager.managerName}</span>
                                        <span class="text-white font-bold">${manager.efficiencyScore.toFixed(1)}%</span>
                                    </div>
                                `).join('')}
                            </div>
                            
                            <div class="bg-gray-700 rounded-lg p-4">
                                <h4 class="text-lg font-bold text-white mb-3">üí∞ –¢–æ–ø –ø–æ –≤–∏—Ä—É—á—Ü—ñ</h4>
                                ${topByRevenue.map((manager, index) => `
                                    <div class="flex justify-between items-center mb-2">
                                        <span class="text-gray-300">${index + 1}. ${manager.managerName}</span>
                                        <span class="text-white font-bold">${(manager.totalRevenue / 1000).toFixed(0)}K ‚Ç¥</span>
                                    </div>
                                `).join('')}
                            </div>
                            
                            <div class="bg-gray-700 rounded-lg p-4">
                                <h4 class="text-lg font-bold text-white mb-3">üÜï –¢–æ–ø –ø–æ –Ω–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞—Ö</h4>
                                ${topByNewClients.map((manager, index) => `
                                    <div class="flex justify-between items-center mb-2">
                                        <span class="text-gray-300">${index + 1}. ${manager.managerName}</span>
                                        <span class="text-white font-bold">${manager.newClientsInPeriod}</span>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    </div>
                    
                    <!-- –¢–∞–±–ª–∏—Ü–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –æ—Ç–¥–µ–ª–∞–º -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h3 class="text-xl font-bold text-white mb-4">üìä –ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö</h3>
                        <div class="overflow-x-auto">
                            <table class="w-full text-sm text-left">
                                <thead class="text-xs text-gray-300 uppercase bg-gray-600">
                                    <tr>
                                        <th class="px-4 py-3">–ú–µ–Ω–µ–¥–∂–µ—Ä</th>
                                        <th class="px-4 py-3">–í—ñ–¥–¥—ñ–ª</th>
                                        <th class="px-4 py-3">–ö–ª—ñ—î–Ω—Ç–∏</th>
                                        <th class="px-4 py-3">–í—ñ–¥–≥—Ä—É–∂–µ–Ω–æ</th>
                                        <th class="px-4 py-3">%</th>
                                        <th class="px-4 py-3">–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</th>
                                        <th class="px-4 py-3">–í–∏—Ä—É—á–∫–∞</th>
                                        <th class="px-4 py-3">–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</th>
                                        <th class="px-4 py-3">–ù–æ–≤—ñ –∫–ª—ñ—î–Ω—Ç–∏</th>
                                        <th class="px-4 py-3">–ê–∫—Ç–∏–≤–Ω—ñ –¥–Ω—ñ</th>
                                        <th class="px-4 py-3">–†–µ–π—Ç–∏–Ω–≥</th>
                                    </tr>
                                </thead>
                                <tbody class="text-gray-200">
                                    ${groupedData.map(group => {
                                        let rows = '';
                                        
                                        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç–¥–µ–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                                        if (group.department) {
                                            rows += `
                                                <tr class="border-b border-gray-600 bg-gray-800 font-bold">
                                                    <td class="px-4 py-3 font-medium">
                                                        üè¢ ${group.department.managerName}
                                                    </td>
                                                    <td class="px-4 py-3">${group.department.departmentName}</td>
                                                    <td class="px-4 py-3">${group.department.totalClients}</td>
                                                    <td class="px-4 py-3">${group.department.shippedClients}</td>
                                                    <td class="px-4 py-3">${group.department.shippedPercentage.toFixed(1)}%</td>
                                                    <td class="px-4 py-3">${group.department.totalOrders}</td>
                                                    <td class="px-4 py-3">${(group.department.totalRevenue / 1000).toFixed(0)}K ‚Ç¥</td>
                                                    <td class="px-4 py-3">
                                                        <span class="font-bold ${group.department.efficiencyScore >= 80 ? 'text-green-400' : group.department.efficiencyScore >= 60 ? 'text-yellow-400' : 'text-red-400'}">
                                                            ${group.department.efficiencyScore.toFixed(1)}%
                                                        </span>
                                                    </td>
                                                    <td class="px-4 py-3">${group.department.newClientsInPeriod}</td>
                                                    <td class="px-4 py-3">${group.department.activeDaysCount}</td>
                                                    <td class="px-4 py-3">
                                                        <span class="font-bold text-blue-400">#${group.department.overallRank}</span>
                                                    </td>
                                                </tr>
                                            `;
                                        }
                                        
                                        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ—Ç–¥–µ–ª–∞
                                        group.managers.forEach(manager => {
                                            rows += `
                                                <tr class="border-b border-gray-600 hover:bg-gray-600">
                                                    <td class="px-4 py-3 font-medium pl-8">
                                                        üë§ ${manager.managerName}
                                                    </td>
                                                    <td class="px-4 py-3">${manager.departmentName}</td>
                                                    <td class="px-4 py-3">${manager.totalClients}</td>
                                                    <td class="px-4 py-3">${manager.shippedClients}</td>
                                                    <td class="px-4 py-3">${manager.shippedPercentage.toFixed(1)}%</td>
                                                    <td class="px-4 py-3">${manager.totalOrders}</td>
                                                    <td class="px-4 py-3">${(manager.totalRevenue / 1000).toFixed(0)}K ‚Ç¥</td>
                                                    <td class="px-4 py-3">
                                                        <span class="font-bold ${manager.efficiencyScore >= 80 ? 'text-green-400' : manager.efficiencyScore >= 60 ? 'text-yellow-400' : 'text-red-400'}">
                                                            ${manager.efficiencyScore.toFixed(1)}%
                                                        </span>
                                                    </td>
                                                    <td class="px-4 py-3">${manager.newClientsInPeriod}</td>
                                                    <td class="px-4 py-3">${manager.activeDaysCount}</td>
                                                    <td class="px-4 py-3">
                                                        <span class="font-bold text-blue-400">#${manager.overallRank}</span>
                                                    </td>
                                                </tr>
                                            `;
                                        });
                                        
                                        return rows;
                                    }).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            `;
        }
    }
    
    _renderTable() {
        if (this.elements.content) {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            const filteredData = this._getFilteredData();
            
            logger.verbose('üìã –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã:', {
                filteredDataLength: filteredData.length,
                sampleData: filteredData.slice(0, 2)
            });
            
            if (filteredData.length === 0) {
                logger.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ');
                this.elements.content.innerHTML = `
                    <div class="text-center py-8">
                        <h3 class="text-xl font-bold text-white mb-4">üìã –¢–∞–±–ª–∏—Ü—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h3>
                        <p class="text-gray-400">–î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –∑–∞–Ω–∞–¥—Ç–æ –æ–±–º–µ–∂—É–≤–∞–ª—å–Ω—ñ</p>
                    </div>
                `;
                return;
            }
            
            this.elements.content.innerHTML = `
                <div class="workload-table">
                    <h3 class="text-xl font-bold text-white mb-4">üìã –î–µ—Ç–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h3>
                    
                                         <!-- –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã -->
                     <div class="mb-4 flex gap-2">
                         <button class="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm" onclick="window.workloadInstance._sortTable('totalClients')">
                             –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø–æ –∫–ª—ñ—î–Ω—Ç–∞—Ö
                         </button>
                         <button class="px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 text-sm" onclick="window.workloadInstance._sortTable('totalRevenue')">
                             –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø–æ –≤–∏—Ä—É—á—Ü—ñ
                         </button>
                         <button class="px-3 py-1 bg-yellow-600 text-white rounded hover:bg-yellow-700 text-sm" onclick="window.workloadInstance._sortTable('tasksTotal')">
                             –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø–æ –∑–∞–≤–¥–∞–Ω–Ω—è—Ö
                         </button>
                         <button class="px-3 py-1 bg-purple-600 text-white rounded hover:bg-purple-700 text-sm" onclick="window.toggleWorkloadDebug(); window.workloadInstance._calculateMetrics();">
                             üîç Debug
                         </button>
                     </div>
                    
                    <!-- –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <div class="overflow-x-auto">
                            <table class="w-full text-sm text-left">
                                <thead class="text-xs text-gray-300 uppercase bg-gray-600">
                                    <tr>
                                        <th class="px-4 py-3">–ú–µ–Ω–µ–¥–∂–µ—Ä</th>
                                        <th class="px-4 py-3">–í—ñ–¥–¥—ñ–ª</th>
                                        <th class="px-4 py-3">–ö–ª—ñ—î–Ω—Ç–∏</th>
                                        <th class="px-4 py-3">–í—ñ–¥–≥—Ä—É–∂–µ–Ω–æ</th>
                                        <th class="px-4 py-3">%</th>
                                        <th class="px-4 py-3">–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</th>
                                        <th class="px-4 py-3">–í–∏—Ä—É—á–∫–∞</th>
                                        <th class="px-4 py-3">–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</th>
                                        <th class="px-4 py-3">–ù–æ–≤—ñ –∫–ª—ñ—î–Ω—Ç–∏</th>
                                        <th class="px-4 py-3">–ü–æ–≤—Ç–æ—Ä–Ω—ñ</th>
                                        <th class="px-4 py-3">–ê–∫—Ç–∏–≤–Ω—ñ –¥–Ω—ñ</th>
                                        <th class="px-4 py-3">–ó–∞–≤–¥–∞–Ω–Ω—è</th>
                                        <th class="px-4 py-3">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</th>
                                        <th class="px-4 py-3">–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å</th>
                                        <th class="px-4 py-3">–†–µ–π—Ç–∏–Ω–≥</th>
                                        <th class="px-4 py-3">–ó–∞–º/–¥–µ–Ω—å</th>
                                        <th class="px-4 py-3">–ö–ª—ñ—î–Ω—Ç/–¥–µ–Ω—å</th>
                                    </tr>
                                </thead>
                                <tbody class="text-gray-200">
                                    ${filteredData.map(item => {
                                        const isDepartment = item.isDepartment;
                                        const rowClass = isDepartment 
                                            ? 'border-b border-gray-600 bg-gray-800 font-bold' 
                                            : 'border-b border-gray-600 hover:bg-gray-600';
                                        const indentClass = isDepartment ? '' : 'pl-8';
                                        
                                        return `
                                            <tr class="${rowClass}">
                                                <td class="px-4 py-3 font-medium ${indentClass}">
                                                    ${isDepartment ? 'üè¢ ' : 'üë§ '}${item.managerName}
                                                </td>
                                                <td class="px-4 py-3">${item.departmentName}</td>
                                                <td class="px-4 py-3">${item.totalClients}</td>
                                                <td class="px-4 py-3">${item.shippedClients}</td>
                                                <td class="px-4 py-3">${item.shippedPercentage.toFixed(1)}%</td>
                                                <td class="px-4 py-3">${item.totalOrders}</td>
                                                <td class="px-4 py-3">${(item.totalRevenue / 1000).toFixed(0)}K ‚Ç¥</td>
                                                <td class="px-4 py-3">
                                                    <span class="font-bold ${item.efficiencyScore >= 80 ? 'text-green-400' : item.efficiencyScore >= 60 ? 'text-yellow-400' : 'text-red-400'}">
                                                        ${item.efficiencyScore.toFixed(1)}%
                                                    </span>
                                                </td>
                                                <td class="px-4 py-3">${item.newClientsInPeriod}</td>
                                                <td class="px-4 py-3">${item.repeatOrdersClients}</td>
                                                <td class="px-4 py-3">${item.activeDaysCount}</td>
                                                <td class="px-4 py-3">${item.tasksTotal}</td>
                                                <td class="px-4 py-3 text-green-400">${item.tasksCompleted}</td>
                                                <td class="px-4 py-3">
                                                    <span class="font-bold ${item.taskEfficiencyRate >= 80 ? 'text-green-400' : item.taskEfficiencyRate >= 60 ? 'text-yellow-400' : 'text-red-400'}">
                                                        ${item.taskEfficiencyRate.toFixed(1)}%
                                                    </span>
                                                </td>
                                                <td class="px-4 py-3">
                                                    <span class="font-bold text-blue-400">#${item.overallRank}</span>
                                                </td>
                                                <td class="px-4 py-3">${item.averageOrdersPerDay?.toFixed(1) || '0.0'}</td>
                                                <td class="px-4 py-3">${item.averageClientsPerDay?.toFixed(1) || '0.0'}</td>
                                            </tr>
                                        `;
                                    }).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            `;
        }
    }
    
    _renderAnalytics() {
        if (this.elements.content) {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            const filteredData = this._getFilteredData();
            
            if (filteredData.length === 0) {
                this.elements.content.innerHTML = `
                    <div class="text-center py-8">
                        <h3 class="text-xl font-bold text-white mb-4">üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h3>
                        <p class="text-gray-400">–î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –∑–∞–Ω–∞–¥—Ç–æ –æ–±–º–µ–∂—É–≤–∞–ª—å–Ω—ñ</p>
                    </div>
                `;
                return;
            }
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            const totalManagers = filteredData.length;
            const totalClients = filteredData.reduce((sum, m) => sum + m.totalClients, 0);
            const totalRevenue = filteredData.reduce((sum, m) => sum + m.totalRevenue, 0);
            const totalTasks = filteredData.reduce((sum, m) => sum + m.tasksTotal, 0);
            
            const avgClientsPerManager = totalClients / totalManagers;
            const avgRevenuePerManager = totalRevenue / totalManagers;
            const avgTasksPerManager = totalTasks / totalManagers;
            
            // –¢–æ–ø-3 –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            const topByClients = [...filteredData].sort((a, b) => b.totalClients - a.totalClients).slice(0, 3);
            const topByRevenue = [...filteredData].sort((a, b) => b.totalRevenue - a.totalRevenue).slice(0, 3);
            const topByTasks = [...filteredData].sort((a, b) => b.tasksTotal - a.tasksTotal).slice(0, 3);
            
            this.elements.content.innerHTML = `
                <div class="workload-analytics">
                    <h3 class="text-xl font-bold text-white mb-4">üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h3>
                    
                    <!-- –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                        <div class="bg-blue-600 rounded-lg p-4">
                            <h4 class="text-sm font-medium text-blue-100 mb-1">–°–µ—Ä–µ–¥–Ω—î –∫–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞</h4>
                            <p class="text-2xl font-bold text-white">${avgClientsPerManager.toFixed(1)}</p>
                        </div>
                        <div class="bg-green-600 rounded-lg p-4">
                            <h4 class="text-sm font-medium text-green-100 mb-1">–°–µ—Ä–µ–¥–Ω—è –≤–∏—Ä—É—á–∫–∞ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞</h4>
                            <p class="text-2xl font-bold text-white">${avgRevenuePerManager.toLocaleString()} ‚Ç¥</p>
                        </div>
                        <div class="bg-yellow-600 rounded-lg p-4">
                            <h4 class="text-sm font-medium text-yellow-100 mb-1">–°–µ—Ä–µ–¥–Ω—î –∑–∞–≤–¥–∞–Ω—å –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞</h4>
                            <p class="text-2xl font-bold text-white">${avgTasksPerManager.toFixed(1)}</p>
                        </div>
                        <div class="bg-purple-600 rounded-lg p-4">
                            <h4 class="text-sm font-medium text-purple-100 mb-1">–ó–∞–≥–∞–ª—å–Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</h4>
                            <p class="text-2xl font-bold text-white">${((totalClients / (totalClients + totalTasks)) * 100).toFixed(1)}%</p>
                        </div>
                    </div>
                    
                    <!-- –¢–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä—ã -->
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-bold text-white mb-3">ü•á –¢–æ–ø –ø–æ –∫–ª—ñ—î–Ω—Ç–∞—Ö</h4>
                            ${topByClients.map((manager, index) => `
                                <div class="flex justify-between items-center mb-2">
                                    <span class="text-gray-300">${index + 1}. ${manager.managerName}</span>
                                    <span class="text-white font-bold">${manager.totalClients}</span>
                                </div>
                            `).join('')}
                        </div>
                        
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-bold text-white mb-3">üí∞ –¢–æ–ø –ø–æ –≤–∏—Ä—É—á—Ü—ñ</h4>
                            ${topByRevenue.map((manager, index) => `
                                <div class="flex justify-between items-center mb-2">
                                    <span class="text-gray-300">${index + 1}. ${manager.managerName}</span>
                                    <span class="text-white font-bold">${manager.totalRevenue.toLocaleString()} ‚Ç¥</span>
                                </div>
                            `).join('')}
                        </div>
                        
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-bold text-white mb-3">üìã –¢–æ–ø –ø–æ –∑–∞–≤–¥–∞–Ω–Ω—è—Ö</h4>
                            ${topByTasks.map((manager, index) => `
                                <div class="flex justify-between items-center mb-2">
                                    <span class="text-gray-300">${index + 1}. ${manager.managerName}</span>
                                    <span class="text-white font-bold">${manager.tasksTotal}</span>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                    
                    <!-- –ì—Ä–∞—Ñ–∏–∫–∏ (–∑–∞–≥–ª—É—à–∫–∏) -->
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h4 class="text-lg font-bold text-white mb-3">üìä –ì—Ä–∞—Ñ—ñ–∫–∏ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h4>
                        <div class="text-center py-8">
                            <p class="text-gray-400">–ì—Ä–∞—Ñ—ñ–∫–∏ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö</p>
                        </div>
                    </div>
                </div>
            `;
        }
    }
    
    _startAutoUpdate() {
        if (!this.autoUpdateInterval) {
            this.autoUpdateInterval = setInterval(() => {
                this._checkForUpdates();
            }, this.AUTO_UPDATE_INTERVAL);
            this._updateAutoUpdateStatus('–ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ', 'text-green-600');
        }
    }
    
    _stopAutoUpdate() {
        if (this.autoUpdateInterval) {
            clearInterval(this.autoUpdateInterval);
            this.autoUpdateInterval = null;
            this._updateAutoUpdateStatus('–ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ', 'text-red-600');
        }
    }
    
    _toggleAutoUpdate() {
        if (this.autoUpdateInterval) {
            this._stopAutoUpdate();
        } else {
            this._startAutoUpdate();
        }
    }
    
    _checkForUpdates() {
        if (this.isUpdateInProgress) {
            logger.verbose('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }
        
        logger.verbose('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...');
        this.isUpdateInProgress = true;
        
        this._refreshData()
            .then(() => {
                this.lastUpdateTime = Date.now();
                this._updateAutoUpdateStatus('–ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–µ', 'text-green-600');
            })
            .catch(error => {
                logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
                this._updateAutoUpdateStatus('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è', 'text-red-600');
            })
            .finally(() => {
                this.isUpdateInProgress = false;
            });
    }
}

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ===

// –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è
let workloadInstance = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
 */
window.initWorkloadModule = async function(container) {
    logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
    
    // –ï—Å–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä —É–∂–µ –µ—Å—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    if (workloadInstance) {
        if (workloadInstance.isFrozen) {
            logger.info('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è –∏–∑ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
            await workloadInstance.init(container);
        } else if (!workloadInstance.isInitialized) {
            logger.info('üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞');
            await workloadInstance.init(container);
        } else {
            logger.info('‚úÖ –ú–æ–¥—É–ª—å —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
    } else {
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        logger.info('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–æ–¥—É–ª—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
        workloadInstance = new WorkloadModule();
        window.workloadInstance = workloadInstance;
        await workloadInstance.init(container);
    }
};

/**
 * –û—á–∏—Å—Ç–∫–∞ –º–æ–¥—É–ª—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–º–æ—Ä–æ–∑–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
 */
window.cleanupWorkloadModule = function() {
    logger.info('‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∫–∞ –º–æ–¥—É–ª—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)');
    
    if (workloadInstance) {
        workloadInstance.freeze();
    }
};

/**
 * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–æ–¥—É–ª—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
 */
window.destroyWorkloadModule = function() {
    logger.info('üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–æ–¥—É–ª—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
    
    if (workloadInstance) {
        workloadInstance.cleanup();
        workloadInstance = null;
        window.workloadInstance = null;
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ ES –º–æ–¥—É–ª—å
export { WorkloadModule };
export const initWorkloadModule = window.initWorkloadModule;
export const cleanupWorkloadModule = window.cleanupWorkloadModule; 