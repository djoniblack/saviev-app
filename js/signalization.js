// –ú–æ–¥—É–ª—å —Å–∏–≥–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó - —Å—É—á–∞—Å–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑ –±–æ–∫–æ–≤–∏–º –º–µ–Ω—é
// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ alerts.js

// üî• –ö–û–ù–¢–†–û–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–ô

// –í–µ—Ä—Å–∏—è —Ñ–∞–π–ª–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
window.SIGNALIZATION_VERSION = '1754397530740-ACCESS-FILTERING';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º clientActionsData –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!window.clientActionsData) {
  window.clientActionsData = {};
}

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Å—Ç–∞–Ω—É
let currentTab = 'dashboard';
let signalizationData = null;
let filters = {
  department: '',
  manager: '',
  period: '3',
  status: '',
  search: ''
};

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º –º–æ–¥—É–ª–µ–º
let currentPeriod = 3;
let currentDepartment = '';
let currentManager = '';
let currentStatus = '';
let currentSearch = '';

// –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
let mainContainer = null;

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —Å–∏–≥–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó
export async function initSignalizationModule(container) {
  mainContainer = container;
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  showLoadingState();
  
  try {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
    await loadSignalizationData();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤
    checkAndUpdateClientStatuses();
    
    // –†–µ–Ω–¥–µ—Ä–∏–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Ç–µ–ø–µ—Ä –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö)
    renderSignalizationInterface();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –ø–æ –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await setupUserFilters();
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
    showMainContent();
    
    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤ –≥–ª–æ–±–∞–ª—å–Ω—É –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    window.initSignalizationModule = initSignalizationModule;
    window.passesFilters = passesFilters;
    window.renderTable = renderTable;
    
    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    window.currentPeriod = currentPeriod;
    window.currentDepartment = currentDepartment;
    window.currentManager = currentManager;
    window.currentStatus = currentStatus;
    window.currentSearch = currentSearch;
    
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
    showErrorState('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó');
  }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
async function loadSignalizationData() {
  try {
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞—Ä–æ–≥–æ –º–æ–¥—É–ª—è
    if (window.masterData && window.masterData.length > 0) {
      signalizationData = {
        masterData: window.masterData,
        clientLinks: window.clientLinks || {},
        clientNames: window.clientNames || {},
        clientManagerDirectory: window.clientManagerDirectory || {},
        managersData: window.managersData || [],
        departmentsData: window.departmentsData || [],
        clientActionsData: window.clientActionsData || {}
      };
      
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
      window.masterData = signalizationData.masterData;
      window.clientLinks = signalizationData.clientLinks;
      window.clientNames = signalizationData.clientNames;
      window.clientManagerDirectory = signalizationData.clientManagerDirectory;
      window.managersData = signalizationData.managersData;
      window.departmentsData = signalizationData.departmentsData;
      window.clientActionsData = signalizationData.clientActionsData;
    } else {
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ API
      const companyId = window.state?.currentCompanyId;
      
      const promises = [
        fetch('–º–æ–¥—É–ª—å –ø–æ–º—ñ—á–Ω–∏–∫ –ø—Ä–æ–¥–∞–∂—É/data.json'),
        fetch('https://fastapi.lookfort.com/nomenclature.analysis'),
        fetch('https://fastapi.lookfort.com/nomenclature.analysis?mode=company_url')
      ];
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ Firebase —è–∫—â–æ —î –∫–æ–º–ø–∞–Ω—ñ—è
      if (companyId) {
        try {
          const firebase = await import('../js/firebase.js');
          promises.push(
            firebase.getDocs(firebase.collection(firebase.db, 'companies', companyId, 'employees')),
            firebase.getDocs(firebase.collection(firebase.db, 'companies', companyId, 'departments')),
            firebase.getDocs(firebase.collection(firebase.db, 'companies', companyId, 'members'))
          );
          
          // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –¥—ñ—ó –∫–ª—ñ—î–Ω—Ç—ñ–≤
          try {
            const clientAlertsSnap = await firebase.getDocs(firebase.collection(firebase.db, 'companies', companyId, 'clientAlerts'));
            const clientActionsData = {};
            clientAlertsSnap.forEach(doc => {
              clientActionsData[doc.id] = doc.data();
            });
            window.clientActionsData = clientActionsData;
          } catch (error) {
            console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥—ñ–π –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ Firebase:', error);
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
            try {
              const localActions = JSON.parse(localStorage.getItem('clientActionsData') || '{}');
              window.clientActionsData = localActions;
            } catch (localError) {
              console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö:', localError);
              window.clientActionsData = {};
            }
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Firebase –¥–∞–Ω–∏—Ö:', error);
          // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ Firebase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
          try {
            const localActions = JSON.parse(localStorage.getItem('clientActionsData') || '{}');
            window.clientActionsData = localActions;
          } catch (localError) {
            console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö:', localError);
            window.clientActionsData = {};
          }
        }
      }
      
      const results = await Promise.all(promises);
      const [dataRes, dataJulyRes, refRes] = results;
      
      const data = await dataRes.json();
      const dataJuly = await dataJulyRes.json();
      const masterData = data.concat(dataJuly);
      const refData = await refRes.json();
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö
      signalizationData = {
        masterData: masterData,
        clientLinks: Object.fromEntries(refData.map(item => [item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'], item['–ø–æ—Å–∏–ª–∞–Ω–Ω—è']])),
        clientNames: Object.fromEntries(refData.map(item => [item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'], item['–ö–ª–∏–µ–Ω—Ç.–ù–∞–∑–≤–∞–Ω–∏–µ'] || item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥']])),
        clientManagerDirectory: {},
        managersData: [],
        departmentsData: [],
        clientActionsData: window.clientActionsData || {}
      };
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤–Ω–∏–π –¥–æ–≤—ñ–¥–Ω–∏–∫ –∫–ª—ñ—î–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä
      refData.forEach(item => {
        const code = item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'];
        if (code) {
          signalizationData.clientManagerDirectory[code] = {
            manager: item['–ú–µ–Ω–µ–¥–∂–µ—Ä'],
            link: item['–ø–æ—Å–∏–ª–∞–Ω–Ω—è'],
            name: item['–ö–ª–∏–µ–Ω—Ç.–ù–∞–∑–≤–∞–Ω–∏–µ'] || code
          };
        }
      });
      
      // –û–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–Ω—ñ Firebase
      if (companyId && results.length > 4) {
        const [, , , employeesSnap, departmentsSnap, membersSnap] = results;
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ members
        const allMembers = membersSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        window.state = window.state || {};
        window.state.allMembers = allMembers;
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ —ñ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
        const allEmployees = employeesSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        
        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏
        signalizationData.managersData = allEmployees.filter(emp => {
          if (emp.role === 'manager') return true;
          if (emp.position) {
            const position = emp.position.toLowerCase();
            return position.includes('–º–µ–Ω–µ–¥–∂–µ—Ä') || 
                   position.includes('manager') || 
                   position.includes('sales') ||
                   position.includes('–ø—Ä–æ–¥–∞–∂');
          }
          return false;
        });
        
        // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—Å—ñ—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
        if (signalizationData.managersData.length === 0) {
          console.warn('üîç –ú–µ–Ω–µ–¥–∂–µ—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ –≤ —Å–∏–≥–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—Å—ñ—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤');
          signalizationData.managersData = allEmployees;
        }
        
        signalizationData.departmentsData = departmentsSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      }
      
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
      window.masterData = signalizationData.masterData;
      window.clientLinks = signalizationData.clientLinks;
      window.clientNames = signalizationData.clientNames;
      window.clientManagerDirectory = signalizationData.clientManagerDirectory;
      window.managersData = signalizationData.managersData;
      window.departmentsData = signalizationData.departmentsData;
    }
    
    console.log('‚úÖ –î–∞–Ω—ñ —Å–∏–≥–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', {
      masterData: signalizationData.masterData.length,
      managersData: signalizationData.managersData.length,
      departmentsData: signalizationData.departmentsData.length,
      clientActionsData: Object.keys(signalizationData.clientActionsData).length
    });
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
    throw error;
  }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
function renderSignalizationInterface() {
  mainContainer.innerHTML = `
    <div class="signalization-container">
      <!-- –ë–æ–∫–æ–≤–µ –º–µ–Ω—é -->
      <div class="sidebar-menu" id="sidebar-menu">
        <div class="sidebar-header">
          <h3>–°–∏–≥–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è</h3>
          <button class="sidebar-toggle" id="sidebar-toggle" title="–ó–≥–æ—Ä–Ω—É—Ç–∏/—Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ –º–µ–Ω—é">
            <i class="fas fa-chevron-left"></i>
          </button>
        </div>
        
        <nav class="sidebar-nav">
          <button class="nav-btn active" data-tab="dashboard">
            <i class="fas fa-tachometer-alt"></i>
            <span class="nav-text">–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</span>
          </button>
          <button class="nav-btn" data-tab="forecast">
            <i class="fas fa-chart-line"></i>
            <span class="nav-text">–ü—Ä–æ–≥–Ω–æ–∑</span>
          </button>
          <button class="nav-btn" data-tab="revenue-drop">
            <i class="fas fa-chart-area"></i>
            <span class="nav-text">–°–ø–∞–¥ –≤–∏—Ä—É—á–∫–∏</span>
          </button>
          <button class="nav-btn" data-tab="transferred-clients">
            <i class="fas fa-exchange-alt"></i>
            <span class="nav-text">–ü–µ—Ä–µ–¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏</span>
          </button>
          <button class="nav-btn" data-tab="analytics">
            <i class="fas fa-chart-bar"></i>
            <span class="nav-text">–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞</span>
          </button>
        </nav>
        
        <!-- –§—ñ–ª—å—Ç—Ä–∏ –ø—ñ–¥ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó -->
        <div class="sidebar-filters">
          <h4>–§—ñ–ª—å—Ç—Ä–∏</h4>
          <div class="filter-group">
            <label for="department-filter" class="filter-label">–í—ñ–¥–¥—ñ–ª</label>
            <select id="department-filter" class="filter-select">
              <option value="">–í—Å—ñ –≤—ñ–¥–¥—ñ–ª–∏</option>
            </select>
          </div>
          <div class="filter-group">
            <label for="manager-filter" class="filter-label">–ú–µ–Ω–µ–¥–∂–µ—Ä</label>
            <select id="manager-filter" class="filter-select">
              <option value="">–í—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏</option>
            </select>
          </div>
          <div class="filter-group">
            <label for="period-filter" class="filter-label">–ü–µ—Ä—ñ–æ–¥</label>
            <select id="period-filter" class="filter-select">
              <option value="1">1 –º—ñ—Å—è—Ü—å</option>
              <option value="3" selected>3 –º—ñ—Å—è—Ü—ñ</option>
              <option value="6">6 –º—ñ—Å—è—Ü—ñ–≤</option>
              <option value="12">12 –º—ñ—Å—è—Ü—ñ–≤</option>
            </select>
          </div>
          <div class="filter-group">
            <label for="status-filter" class="filter-label">–°—Ç–∞—Ç—É—Å</label>
            <select id="status-filter" class="filter-select">
              <option value="">–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏</option>
              <option value="new">üÜï –ù–æ–≤–∏–π</option>
              <option value="in_progress">üîÑ –í —Ä–æ–±–æ—Ç—ñ</option>
              <option value="resolved">‚úÖ –í–∏—Ä—ñ—à–µ–Ω–æ</option>
              <option value="closed">üóÇÔ∏è –ó–∞–∫—Ä–∏—Ç–æ</option>
            </select>
          </div>
          <div class="filter-group">
            <label for="search-input" class="filter-label">–ü–æ—à—É–∫</label>
            <input id="search-input" type="text" class="filter-input" placeholder="–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞...">
          </div>
        </div>
      </div>
      
      <!-- –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç -->
      <div class="main-content">
        <div class="content-header">
          <h2 id="content-title">–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</h2>
        </div>
        <div class="content-body" id="content-body">
          <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç–∏—Å—è —Ç—É—Ç -->
        </div>
      </div>
    </div>
  `;
  
  // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
  setupEventHandlers();
  
  // –†–µ–Ω–¥–µ—Ä–∏–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
  renderFilters();
  
  // –†–µ–Ω–¥–µ—Ä–∏–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
  renderDashboard();
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
function setupEventHandlers() {
  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
  document.querySelectorAll('.nav-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ currentTarget –∑–∞–º—ñ—Å—Ç—å target –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
      const tab = e.currentTarget.dataset.tab;
      if (tab) {
      switchTab(tab);
      } else {
        console.warn('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ data-tab –∞—Ç—Ä–∏–±—É—Ç —É –∫–Ω–æ–ø—Ü—ñ:', e.currentTarget);
      }
    });
  });
  
  // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–≥–æ—Ä—Ç–∞–Ω–Ω—è/—Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
  const sidebarToggle = document.getElementById('sidebar-toggle');
  const sidebarMenu = document.getElementById('sidebar-menu');
  
  if (sidebarToggle && sidebarMenu) {
    sidebarToggle.addEventListener('click', () => {
      sidebarMenu.classList.toggle('collapsed');
      
      // –ó–º—ñ–Ω—é—î–º–æ —ñ–∫–æ–Ω–∫—É
      const icon = sidebarToggle.querySelector('i');
      if (sidebarMenu.classList.contains('collapsed')) {
        icon.className = 'fas fa-chevron-right';
      } else {
        icon.className = 'fas fa-chevron-left';
      }
      
      // –í—ñ–¥–∫–ª–∞–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—ñ–≤ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
      setTimeout(() => {
        window.dispatchEvent(new Event('resize'));
      }, 300);
    });
  }
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è event listeners –ø—ñ—Å–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
  function setupDynamicEventListeners() {
    
    // Event listeners –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ—Ç–∞–ª–µ–π –∫–ª—ñ—î–Ω—Ç—ñ–≤
    document.querySelectorAll('.client-detail-btn').forEach(btn => {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
      btn.removeEventListener('click', btn._detailHandler);
      btn._detailHandler = (e) => {
        const clientCode = e.currentTarget.dataset.clientCode;
        if (clientCode) {
          showClientDetail(clientCode);
        }
      };
      btn.addEventListener('click', btn._detailHandler);
    });
    
    // Event listeners –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
    document.querySelectorAll('.toggle-lost-products-btn').forEach(btn => {
      btn.removeEventListener('click', btn._lostProductsHandler);
      btn._lostProductsHandler = (e) => {
        const elementId = e.currentTarget.dataset.elementId;
        if (elementId) {
          toggleLostProducts(elementId);
        }
      };
      btn.addEventListener('click', btn._lostProductsHandler);
    });
    
    // Event listeners –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω—å
    document.querySelectorAll('.toggle-order-detail-btn').forEach(btn => {
      btn.removeEventListener('click', btn._orderDetailHandler);
      btn._orderDetailHandler = (e) => {
        const elementId = e.currentTarget.dataset.elementId;
        if (elementId) {
          const el = document.getElementById(elementId);
          if (el) {
            el.classList.toggle('hidden');
          }
        }
      };
      btn.addEventListener('click', btn._orderDetailHandler);
    });
    
    // Event listeners –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –¥—ñ–π
    document.querySelectorAll('.actions-menu-toggle').forEach(btn => {
      btn.removeEventListener('click', btn._actionsMenuHandler);
      btn._actionsMenuHandler = (e) => {
        const clientCode = e.currentTarget.dataset.clientCode;
        if (clientCode) {
          toggleActionsMenu(clientCode);
        }
      };
      btn.addEventListener('click', btn._actionsMenuHandler);
    });
    
    // Event listeners –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω –¥—ñ–π
    document.querySelectorAll('.action-modal-btn').forEach(btn => {
      btn.removeEventListener('click', btn._actionModalHandler);
      btn._actionModalHandler = (e) => {
        const clientCode = e.currentTarget.dataset.clientCode;
        const actionType = e.currentTarget.dataset.actionType;
        if (clientCode && actionType) {
          showActionModal(clientCode, actionType);
        }
      };
      btn.addEventListener('click', btn._actionModalHandler);
    });
    
    // Event listener –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    document.querySelectorAll('.reload-btn').forEach(btn => {
      btn.removeEventListener('click', btn._reloadHandler);
      btn._reloadHandler = () => {
        location.reload();
      };
      btn.addEventListener('click', btn._reloadHandler);
    });
    
  }
  
  // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø—ñ—Å–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
  setupDynamicEventListeners();
  
  // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º—ñ—Å—Ü—è—Ö
  window.setupDynamicEventListeners = setupDynamicEventListeners;
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
function renderFilters() {
  
  // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ DOM –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  setTimeout(() => {
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    const departmentFilter = document.getElementById('department-filter');
    const managerFilter = document.getElementById('manager-filter');
    const periodFilter = document.getElementById('period-filter');
    const statusFilter = document.getElementById('status-filter');
    const searchInput = document.getElementById('search-input');
    
    if (departmentFilter) {
      departmentFilter.addEventListener('change', () => {
        updateManagersFilter();
        applyFilters();
      });
    }
    
    if (managerFilter) {
      managerFilter.addEventListener('change', applyFilters);
    }
    
    if (periodFilter) {
      periodFilter.addEventListener('change', applyFilters);
    }
    
    if (statusFilter) {
      statusFilter.addEventListener('change', applyFilters);
    }
    
    if (searchInput) {
      searchInput.addEventListener('input', applyFilters);
    }
    
    // –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–∞–Ω–∏–º–∏
    populateFilters();
  }, 100);
}

// –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–∞–Ω–∏–º–∏
function populateFilters() {
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ userAccess –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ alerts.js
  const userAccess = {
    userId: window.state?.currentUserId,
    employeeId: null,
    employee: null,
    role: window.state?.currentUserRole?.toLowerCase(),
    departmentId: window.state?.currentUserDepartment,
    isAdmin: window.state?.isAdmin || false
  };
  
  console.log('üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è userAccess –∑ window.state:', {
    currentUserId: window.state?.currentUserId,
    currentUserEmail: window.state?.currentUserEmail,
    currentUserDepartment: window.state?.currentUserDepartment,
    currentUserRole: window.state?.currentUserRole,
    isAdmin: window.state?.isAdmin
  });
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ members
  
  if (window.state?.allMembers && window.state.allMembers.length > 0) {
    const currentMember = window.state.allMembers.find(m => 
      m.userId === userAccess.userId || 
      m.userId === window.state?.currentUserId
    );
    
    if (currentMember && currentMember.employeeId) {
      userAccess.employeeId = currentMember.employeeId;
      
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ employee –ø–æ employeeId –≤ managersData
      const employee = signalizationData.managersData?.find(emp => emp.id === currentMember.employeeId);
      
      if (employee) {
        userAccess.employee = employee;
        if (!userAccess.departmentId && employee.department) {
          if (typeof employee.department === 'object' && employee.department.id) {
            userAccess.departmentId = employee.department.id;
          } else if (typeof employee.department === 'string') {
            userAccess.departmentId = employee.department;
          }
        }
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ role –∑ employee
        if (employee.role) {
          userAccess.role = employee.role.toLowerCase();
        } else if (employee.position) {
          const position = employee.position.toLowerCase();
          if (position.includes('–º–µ–Ω–µ–¥–∂–µ—Ä') || position.includes('manager')) {
            userAccess.role = '–º–µ–Ω–µ–¥–∂–µ—Ä';
          } else if (position.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫') || position.includes('head')) {
            userAccess.role = '–∫–µ—Ä—ñ–≤–Ω–∏–∫';
          } else if (position.includes('–∞–¥–º—ñ–Ω') || position.includes('admin')) {
            userAccess.role = '–∞–¥–º—ñ–Ω';
          }
        }
        
      } else {
      }
    } else {
    }
  } else {
  }
  
  
  // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –≤—ñ–¥–¥—ñ–ª–∏
  const departmentFilter = document.getElementById('department-filter');
  if (departmentFilter && signalizationData.departmentsData) {
    // –û—á–∏—â–∞—î–º–æ —ñ—Å–Ω—É—é—á—ñ –æ–ø—Ü—ñ—ó
    departmentFilter.innerHTML = '<option value="">–í—Å—ñ –≤—ñ–¥–¥—ñ–ª–∏</option>';
    
    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≤—ñ–¥–¥—ñ–ª–∏ –∑–∞ —Ä–æ–ª—è–º–∏
    let visibleDepartments = signalizationData.departmentsData;
    if (!userAccess.isAdmin && userAccess.departmentId) {
      if (userAccess.role && (userAccess.role.includes('–º–µ–Ω–µ–¥–∂') || userAccess.role.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫'))) {
        visibleDepartments = signalizationData.departmentsData.filter(dep => dep.id === userAccess.departmentId);
      }
    }
    
    visibleDepartments.forEach(dept => {
      const option = document.createElement('option');
      option.value = dept.id;
      option.textContent = dept.name || dept.id;
      departmentFilter.appendChild(option);
    });
  }
  
  // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
  const managerFilter = document.getElementById('manager-filter');
  if (managerFilter && signalizationData.managersData) {
    // –û—á–∏—â–∞—î–º–æ —ñ—Å–Ω—É—é—á—ñ –æ–ø—Ü—ñ—ó
    managerFilter.innerHTML = '<option value="">–í—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏</option>';
    
    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–º –≤—ñ–¥–¥—ñ–ª–æ–º —ñ —Ä–æ–ª—è–º–∏
    let filteredManagers = signalizationData.managersData;
    
    // –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø—É: —è–∫—â–æ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî —Ç—ñ–ª—å–∫–∏ –≤—ñ–Ω, —è–∫—â–æ –∫–µ—Ä—ñ–≤–Ω–∏–∫ ‚Äî –≤—Å—ñ –∑ –≤—ñ–¥–¥—ñ–ª—É, —è–∫—â–æ –∞–¥–º—ñ–Ω ‚Äî –≤—Å—ñ
    if (!userAccess.isAdmin && userAccess.employeeId) {
      if (userAccess.role && userAccess.role.includes('–º–µ–Ω–µ–¥–∂')) {
        // –¢—ñ–ª—å–∫–∏ —Å–∞–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        filteredManagers = filteredManagers.filter(emp => emp.id === userAccess.employeeId);
      } else if (userAccess.role && userAccess.role.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫')) {
        // –í—Å—ñ –∑ –π–æ–≥–æ –≤—ñ–¥–¥—ñ–ª—É
        filteredManagers = filteredManagers.filter(emp => {
          if (!emp.department) return false;
          if (typeof emp.department === 'object' && emp.department.id) {
            return emp.department.id === userAccess.departmentId;
          } else if (typeof emp.department === 'string') {
            return emp.department === userAccess.departmentId;
          }
          return false;
        });
      }
    }
    
    filteredManagers.forEach(manager => {
      const option = document.createElement('option');
      option.value = manager.id;
      option.textContent = manager.name || manager.fullName || manager.id;
      managerFilter.appendChild(option);
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    if (!userAccess.isAdmin && userAccess.employeeId) {
      if (userAccess.role && userAccess.role.includes('–º–µ–Ω–µ–¥–∂')) {
        // –î–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å–µ–±–µ
        managerFilter.value = userAccess.employeeId;
        filters.manager = userAccess.employeeId;
      } else if (userAccess.role && userAccess.role.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫')) {
        // –î–ª—è –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ –≤—ñ–¥–¥—ñ–ª
        if (userAccess.departmentId) {
          departmentFilter.value = userAccess.departmentId;
          filters.department = userAccess.departmentId;
        }
      }
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    currentDepartment = filters.department;
    currentManager = filters.manager;
    window.currentDepartment = currentDepartment;
    window.currentManager = currentManager;
  }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –≤—ñ–¥–¥—ñ–ª—É
function updateManagersFilter() {
  const departmentFilter = document.getElementById('department-filter');
  const managerFilter = document.getElementById('manager-filter');
  
  if (!departmentFilter || !managerFilter) return;
  
  const selectedDepartment = departmentFilter.value;
  
  // –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
  managerFilter.innerHTML = '<option value="">–í—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏</option>';
  
  // –Ø–∫—â–æ —î –¥–∞–Ω—ñ –ø—Ä–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤, —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ —ó—Ö
  if (signalizationData.managersData && signalizationData.managersData.length > 0) {
    const filteredManagers = selectedDepartment 
      ? signalizationData.managersData.filter(manager => {
          if (!manager.department) return false;
          if (typeof manager.department === 'object' && manager.department.id) {
            return manager.department.id === selectedDepartment;
          } else if (typeof manager.department === 'string') {
            return manager.department === selectedDepartment;
          }
          return false;
        })
      : signalizationData.managersData;
      
    filteredManagers.forEach(manager => {
      const option = document.createElement('option');
      option.value = manager.id;
      option.textContent = manager.name || manager.fullName || manager.id;
      managerFilter.appendChild(option);
    });
  }
}

// –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
function applyFilters() {
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const departmentFilter = document.getElementById('department-filter');
  const managerFilter = document.getElementById('manager-filter');
  const periodFilter = document.getElementById('period-filter');
  const statusFilter = document.getElementById('status-filter');
  const searchInput = document.getElementById('search-input');
  
  filters.department = departmentFilter ? departmentFilter.value : '';
  filters.manager = managerFilter ? managerFilter.value : '';
  filters.period = periodFilter ? periodFilter.value : '3';
  filters.status = statusFilter ? statusFilter.value : '';
  filters.search = searchInput ? searchInput.value : '';
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º –º–æ–¥—É–ª–µ–º
  currentDepartment = filters.department;
  currentManager = filters.manager;
  currentPeriod = parseInt(filters.period) || 3;
  currentStatus = filters.status;
  currentSearch = filters.search;
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –≤ window
  window.currentPeriod = currentPeriod;
  window.currentDepartment = currentDepartment;
  window.currentManager = currentManager;
  window.currentStatus = currentStatus;
  window.currentSearch = currentSearch;
  
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const currentTab = document.querySelector('.nav-btn.active')?.getAttribute('data-tab');
  if (currentTab) {
    renderTabContent(currentTab);
  }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤–∫–ª–∞–¥–∫–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
function renderTabContent(tab) {
  
  switch(tab) {
    case 'dashboard':
      renderDashboard();
      break;
    case 'forecast':
      renderForecast();
      break;
    case 'revenue-drop':
      renderRevenueDrop();
      break;
    case 'transferred-clients':
      renderTransferredClients();
      break;
    case 'analytics':
      renderAnalytics();
      break;
    default:
      renderDashboard();
  }
  
  // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –ø—ñ—Å–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
  setTimeout(() => {
    if (window.setupDynamicEventListeners) {
      window.setupDynamicEventListeners();
    }
  }, 100);
}

// –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—ñ–∂ –≤–∫–ª–∞–¥–∫–∞–º–∏
function switchTab(tab) {
  currentTab = tab;
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –∫–Ω–æ–ø–∫—É
  document.querySelectorAll('.nav-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  
  // –ë–µ–∑–ø–µ—á–Ω–æ –¥–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å
  const activeButton = document.querySelector(`[data-tab="${tab}"]`);
  if (activeButton) {
    activeButton.classList.add('active');
  } else {
    console.warn(`–ö–Ω–æ–ø–∫–∞ –∑ data-tab="${tab}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
  }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
  const titles = {
    'dashboard': '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
    'forecast': '–ü—Ä–æ–≥–Ω–æ–∑',
    'revenue-drop': '–°–ø–∞–¥ –≤–∏—Ä—É—á–∫–∏',
    'transferred-clients': '–ü–µ—Ä–µ–¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏',
    'analytics': '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞'
  };
  
  const contentTitle = document.getElementById('content-title');
  if (contentTitle) {
    contentTitle.textContent = titles[tab];
  }
  
  // –†–µ–Ω–¥–µ—Ä–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
  renderTabContent(tab);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
let aiRecommendations = [];
let lastRecommendationUpdate = null;

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (Dashboard)
function renderDashboard() {
  const contentBody = document.getElementById('content-body');
  
  // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const stats = calculateDashboardStats();
  
  // –ì–µ–Ω–µ—Ä—É—î–º–æ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  if (!aiRecommendations.length || !lastRecommendationUpdate || 
      (new Date() - lastRecommendationUpdate) > 300000) { // 5 —Ö–≤–∏–ª–∏–Ω
    generateAIRecommendations();
  }
  
  contentBody.innerHTML = `
    <div class="dashboard-grid">
      <!-- –ö–∞—Ä—Ç–∫–∞ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∫–ª—ñ—î–Ω—Ç—ñ–≤ -->
      <div class="dashboard-card">
        <div class="card-header">
          <h3>–ö–ª—ñ—î–Ω—Ç–∏ –≤ —Ä–æ–±–æ—Ç—ñ</h3>
          <i class="fas fa-users"></i>
        </div>
        <div class="card-content">
          <div class="metric-value">${stats.activeClients}</div>
          <div class="metric-label">–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤</div>
        </div>
      </div>
      
      <!-- –ö–∞—Ä—Ç–∫–∞ –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏ -->
      <div class="dashboard-card">
        <div class="card-header">
          <h3>–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏</h3>
          <i class="fas fa-exclamation-triangle"></i>
        </div>
        <div class="card-content">
          <div class="metric-value">${stats.prioritySignals}</div>
          <div class="metric-label">–∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤</div>
        </div>
      </div>
      
      <!-- –ö–∞—Ä—Ç–∫–∞ –∑ —Ç–æ–ø —Å–ø–∞–¥—ñ–≤ –≤–∏—Ä—É—á–∫–∏ -->
      <div class="dashboard-card">
        <div class="card-header">
          <h3>–¢–æ–ø —Å–ø–∞–¥—ñ–≤ –≤–∏—Ä—É—á–∫–∏</h3>
          <i class="fas fa-chart-area"></i>
        </div>
        <div class="card-content">
          <div class="metric-value">${stats.revenueDrops}</div>
          <div class="metric-label">–∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑—ñ —Å–ø–∞–¥–æ–º</div>
        </div>
      </div>
      
      <!-- –ö–∞—Ä—Ç–∫–∞ –∑ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–º–∏ –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—è–º–∏ -->
      <div class="dashboard-card">
        <div class="card-header">
          <h3>–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ</h3>
          <i class="fas fa-clock"></i>
        </div>
        <div class="card-content">
          <div class="metric-value">${stats.overdueAgreements}</div>
          <div class="metric-label">–ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —É–≥–æ–¥</div>
        </div>
      </div>
    </div>
    
    <!-- AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó -->
    <div class="mt-6">
      ${renderAIRecommendationsWidget()}
    </div>
  `;
}

// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
function calculateDashboardStats() {
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫
  hasAccessDebugCount = 0;
  if (!signalizationData || !signalizationData.masterData) {
    return {
      activeClients: 0,
      prioritySignals: 0,
      revenueDrops: 0,
      overdueAgreements: 0
    };
  }
  
  // –û—Ç—Ä–∏–º—É—î–º–æ userAccess –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
  const userAccess = getUserAccess();
  
  // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ (–∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é –¥–æ—Å—Ç—É–ø—É)
  const activeClients = new Set();
  signalizationData.masterData.forEach(sale => {
    if (sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] && hasAccessToClient(sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'], userAccess)) {
      activeClients.add(sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥']);
    }
  });
  
  // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Å–ø–∞–¥ –≤–∏—Ä—É—á–∫–∏ (—Ç–µ–ø–µ—Ä –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é)
  const revenueDrops = analyzeRevenueDropsFiltered(userAccess);
  
  // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ (–∫–ª—ñ—î–Ω—Ç–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º "new") –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
  let prioritySignals = 0;
  Object.keys(signalizationData.clientActionsData).forEach(clientCode => {
    if (hasAccessToClient(clientCode, userAccess)) {
      const status = signalizationData.clientActionsData[clientCode]?.status;
      if (status === 'new') {
        prioritySignals++;
      }
    }
  });
  
  // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ (–∑–∞–≥–ª—É—à–∫–∞)
  const overdueAgreements = Math.floor(Math.random() * 10) + 5; // –¢–∏–º—á–∞—Å–æ–≤–æ
  

  return {
    activeClients: activeClients.size,
    prioritySignals,
    revenueDrops: revenueDrops.clientsCount,
    overdueAgreements
  };
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–æ–≥–Ω–æ–∑—É
function renderForecast() {
  const contentBody = document.getElementById('content-body');
  contentBody.innerHTML = `
    <div class="forecast-container">
      <div class="forecast-tabs">
        <button class="forecast-tab-btn active" data-forecast="missed">–ü—Ä–æ–ø—É—â–µ–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑</button>
        <button class="forecast-tab-btn" data-forecast="products">–°–ø–∞–¥ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤</button>
      </div>
      
      <div class="forecast-content">
        <div id="missed-forecast-content" class="forecast-tab-content active">
          <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É -->
        </div>
        <div id="products-forecast-content" class="forecast-tab-content">
          <!-- –ö–æ–Ω—Ç–µ–Ω—Ç —Å–ø–∞–¥—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ -->
        </div>
      </div>
    </div>
  `;
  
  // –†–µ–Ω–¥–µ—Ä–∏–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
  renderMissedForecast();
  
  // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑—É
  document.querySelectorAll('.forecast-tab-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const forecastType = e.currentTarget.dataset.forecast;
      if (forecastType) {
      switchForecastTab(forecastType);
      } else {
        console.warn('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ data-forecast –∞—Ç—Ä–∏–±—É—Ç —É –∫–Ω–æ–ø—Ü—ñ:', e.currentTarget);
      }
    });
  });
}

// –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑—É
function switchForecastTab(forecastType) {
  // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –≤–∫–ª–∞–¥–∫—É
  document.querySelectorAll('.forecast-tab-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  
  // –ë–µ–∑–ø–µ—á–Ω–æ –¥–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å
  const activeButton = document.querySelector(`[data-forecast="${forecastType}"]`);
  if (activeButton) {
    activeButton.classList.add('active');
  } else {
    console.warn(`–ö–Ω–æ–ø–∫–∞ –∑ data-forecast="${forecastType}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
  }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
  document.querySelectorAll('.forecast-tab-content').forEach(content => {
    content.classList.remove('active');
  });
  
  if (forecastType === 'missed') {
    const missedContent = document.getElementById('missed-forecast-content');
    if (missedContent) {
      missedContent.classList.add('active');
    renderMissedForecast();
    }
  } else if (forecastType === 'products') {
    const productsContent = document.getElementById('products-forecast-content');
    if (productsContent) {
      productsContent.classList.add('active');
    renderProductDrop();
    }
  }
}

// –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
let missedForecastCache = null;
let lastFilterHash = null;

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
function renderMissedForecast() {
  const contentDiv = document.getElementById('missed-forecast-content');
  if (!contentDiv) return;
  
  const filteredData = getFilteredData();
  if (!filteredData || filteredData.length === 0) {
    contentDiv.innerHTML = '<p>–î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ</p>';
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º —Ö–µ—à —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞
  const currentFilterHash = JSON.stringify({
    period: filters.period,
    department: filters.department,
    manager: filters.manager,
    status: filters.status,
    search: filters.search
  });
  
  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
  if (missedForecastCache && lastFilterHash === currentFilterHash) {
    contentDiv.innerHTML = missedForecastCache;
    return;
  }
  
  const now = new Date();
  const periodMs = parseInt(filters.period || 3) * 30 * 24 * 60 * 60 * 1000;
  const clients = {};
  
  filteredData.forEach(sale => {
    const code = sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'];
    const date = new Date(sale['–î–∞—Ç–∞']);
    if (!clients[code]) {
      clients[code] = { 
        name: signalizationData.clientNames[code] || code, 
        code, 
        dates: [], 
        link: signalizationData.clientLinks[code], 
        manager: signalizationData.clientManagerDirectory[code]?.manager || '–ù–µ–≤—ñ–¥–æ–º–∏–π' 
      };
    }
    if (now - date <= periodMs * 2) clients[code].dates.push(date);
  });
  
  function avgInterval(dates) {
    if (dates.length < 2) return null;
    // –í—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –¥–Ω—ñ
    const uniqueDays = Array.from(new Set(dates.map(d => d.toISOString().slice(0, 10)))).map(s => new Date(s)).sort((a, b) => a - b);
    if (uniqueDays.length < 2) return null;
    let sum = 0;
    for (let i = 1; i < uniqueDays.length; ++i) sum += (uniqueDays[i] - uniqueDays[i - 1]);
    return sum / (uniqueDays.length - 1);
  }
  
  let alerts = Object.values(clients).map(c => {
    if (c.dates.length < 2) return null;
    c.dates.sort((a,b)=>a-b);
    const last = c.dates[c.dates.length-1];
    const interval = avgInterval(c.dates);
    const forecast = new Date(last.getTime() + interval);
    const hasOrderAfter = c.dates.some(d => d > forecast);
    return (!hasOrderAfter && forecast < now) ? {
      ...c,
      forecast,
      last,
      avgIntervalDays: interval / (1000 * 60 * 60 * 24)
    } : null;
  }).filter(Boolean);
  
  // –°–æ—Ä—Ç—É—î–º–æ –ø–æ –¥–∞—Ç—ñ –ø—Ä–æ–≥–Ω–æ–∑—É
  alerts.sort((a,b)=>b.forecast-a.forecast);
  
  contentDiv.innerHTML = `
    <div class="missed-forecast-section">
      <h4>–ü—Ä–æ–ø—É—â–µ–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏</h4>
      <div class="metrics-grid">
        <div class="metric-card">
          <div class="metric-title">–ö–ª—ñ—î–Ω—Ç–∏ –∑ –ø—Ä–æ–ø—É—â–µ–Ω–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏</div>
          <div class="metric-value">${alerts.length}</div>
        </div>
        <div class="metric-card">
          <div class="metric-title">–°–µ—Ä–µ–¥–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª</div>
          <div class="metric-value">${alerts.length > 0 ? (alerts.reduce((sum, a) => sum + a.avgIntervalDays, 0) / alerts.length).toFixed(1) : 0} –¥–Ω—ñ–≤</div>
        </div>
      </div>
      <div class="table-container">
        <table class="data-table">
          <thead>
            <tr>
              <th>–ö–ª—ñ—î–Ω—Ç</th>
              <th>–ú–µ–Ω–µ–¥–∂–µ—Ä</th>
              <th>–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∞ –¥–∞—Ç–∞</th>
              <th>–û—Å—Ç–∞–Ω–Ω—è –ø–æ–∫—É–ø–∫–∞</th>
              <th>–°–µ—Ä–µ–¥–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª (–¥–Ω—ñ–≤)</th>
              <th>CRM</th>
              <th>–°—Ç–∞—Ç—É—Å</th>
              <th>–î—ñ—ó</th>
              <th>–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</th>
            </tr>
          </thead>
          <tbody>
            ${alerts.map(client => `
              <tr class="${client.forecast && client.forecast < now ? 'bg-red-900' : 'bg-yellow-900'}">
                <td>${client.name}</td>
                <td>${client.manager}</td>
                <td>${client.forecast ? client.forecast.toLocaleDateString('uk-UA') : '-'}</td>
                <td>${client.last ? client.last.toLocaleDateString('uk-UA') : '-'}</td>
                <td>${client.avgIntervalDays ? client.avgIntervalDays.toFixed(1) : '-'}</td>
                <td>${client.link ? `<a href="${client.link}" target="_blank" class="text-blue-600 underline">CRM</a>` : ''}</td>
                <td>${renderClientStatus(client.code)}</td>
                <td>${renderActionsMenu(client.code)}</td>
                <td><button class='px-2 py-1 bg-gray-100 rounded text-black client-detail-btn' data-client-code="${client.code}">–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</button></td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    </div>
  `;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
  missedForecastCache = contentDiv.innerHTML;
  lastFilterHash = currentFilterHash;
  
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ event listeners –ø—ñ—Å–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
  if (window.setupDynamicEventListeners) {
    window.setupDynamicEventListeners();
  }
}

// –ö—ç—à –¥–ª—è —Å–ø–∞–¥—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
let productDropCache = null;
let lastProductFilterHash = null;

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∞–¥—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
function renderProductDrop() {
  const contentDiv = document.getElementById('products-forecast-content');
  if (!contentDiv) return;
  
  const filteredData = getFilteredData();
  if (!filteredData || filteredData.length === 0) {
    contentDiv.innerHTML = '<p>–î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ</p>';
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º —Ö–µ—à —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞
  const currentProductFilterHash = JSON.stringify({
    period: filters.period,
    department: filters.department,
    manager: filters.manager,
    status: filters.status,
    search: filters.search
  });
  
  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
  if (productDropCache && lastProductFilterHash === currentProductFilterHash) {
    contentDiv.innerHTML = productDropCache;
    return;
  }
  
  const now = new Date();
  const monthAgo = new Date(now.getTime());
  monthAgo.setMonth(monthAgo.getMonth() - 1);
  const clients = {};
  
  filteredData.forEach(sale => {
    const code = sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'];
    const product = sale['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'];
    const date = new Date(sale['–î–∞—Ç–∞']);
    if (!clients[code]) {
      clients[code] = { 
        name: signalizationData.clientNames[code] || code, 
        code, 
        lostProducts: [], 
        link: signalizationData.clientLinks[code], 
        manager: signalizationData.clientManagerDirectory[code]?.manager || '–ù–µ–≤—ñ–¥–æ–º–∏–π', 
        lastDates: {} 
      };
    }
    if (!clients[code].lastDates[product] || clients[code].lastDates[product] < date) {
      clients[code].lastDates[product] = date;
    }
  });
  
  // –§–æ—Ä–º—É—î–º–æ –º–∞—Å–∏–≤ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –≤—Ç—Ä–∞—á–µ–Ω–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
  let clientList = Object.values(clients).map(c => {
    const lost = Object.entries(c.lastDates)
      .filter(([_, lastDate]) => lastDate < monthAgo)
      .map(([product, lastDate]) => ({ product, lastDate }));
    return { ...c, lostProducts: lost };
  }).filter(c => c.lostProducts.length > 0);
  
  // –°–æ—Ä—Ç—É—î–º–æ –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—Ç—Ä–∞—á–µ–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
  clientList.sort((a,b)=>b.lostProducts.length - a.lostProducts.length);
  
  contentDiv.innerHTML = `
    <div class="product-drop-section">
      <h4>–°–ø–∞–¥ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤</h4>
      <div class="metrics-grid">
        <div class="metric-card">
          <div class="metric-title">–ö–ª—ñ—î–Ω—Ç–∏ –∑ –≤—Ç—Ä–∞—á–µ–Ω–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏</div>
          <div class="metric-value">${clientList.length}</div>
        </div>
        <div class="metric-card">
          <div class="metric-title">–°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—Ç—Ä–∞—á–µ–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤</div>
          <div class="metric-value">${clientList.length > 0 ? (clientList.reduce((sum, c) => sum + c.lostProducts.length, 0) / clientList.length).toFixed(1) : 0}</div>
        </div>
      </div>
      <div class="table-container">
        <table class="data-table">
          <thead>
            <tr>
              <th>–ö–ª—ñ—î–Ω—Ç</th>
              <th>–ú–µ–Ω–µ–¥–∂–µ—Ä</th>
              <th>–í—Ç—Ä–∞—á–µ–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏</th>
              <th>–û—Å—Ç–∞–Ω–Ω—è –¥–∞—Ç–∞</th>
              <th>CRM</th>
              <th>–°—Ç–∞—Ç—É—Å</th>
              <th>–î—ñ—ó</th>
              <th>–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</th>
              <th>–¢–æ–≤–∞—Ä–∏</th>
            </tr>
          </thead>
          <tbody>
            ${clientList.map((client, idx) => {
              const safeId = 'lost_products_' + client.code.replace(/[^\w]/g, '_') + '_' + idx;
              return `
                <tr>
                  <td>${client.name}</td>
                  <td>${client.manager}</td>
                  <td><span class="px-2 py-1 rounded-full bg-red-600 text-white text-xs">${client.lostProducts.length}</span></td>
                  <td>${client.lostProducts.length > 0 ? client.lostProducts[0].lastDate.toLocaleDateString('uk-UA') : '-'}</td>
                  <td>${client.link ? `<a href="${client.link}" target="_blank" class="text-blue-600 underline">CRM</a>` : ''}</td>
                  <td>${renderClientStatus(client.code)}</td>
                  <td>${renderActionsMenu(client.code)}</td>
                  <td><button class='px-2 py-1 bg-gray-100 rounded text-black client-detail-btn' data-client-code="${client.code}">–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</button></td>
                  <td><button class='px-2 py-1 bg-gray-100 rounded text-black toggle-lost-products-btn' data-element-id="${safeId}">–ü–æ–∫–∞–∑–∞—Ç–∏</button>
                    <div id='${safeId}' class='hidden mt-2 text-xs bg-gray-900 rounded p-3 max-h-48 overflow-y-auto'>
                      <ul class='list-disc list-inside space-y-1'>
                        ${client.lostProducts.map(p=>`<li>${p.product} <span class='text-gray-400'>(${p.lastDate.toISOString().slice(0,10)})</span></li>`).join('')}
                      </ul>
                    </div>
                  </td>
                </tr>
              `;
            }).join('')}
          </tbody>
        </table>
      </div>
    </div>
  `;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
  productDropCache = contentDiv.innerHTML;
  lastProductFilterHash = currentProductFilterHash;
  
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ event listeners –ø—ñ—Å–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
  if (window.setupDynamicEventListeners) {
    window.setupDynamicEventListeners();
  }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
function renderAnalytics() {
  const contentBody = document.getElementById('content-body');
  contentBody.innerHTML = `
    <div class="analytics-container">
      <!-- –§—ñ–ª—å—Ç—Ä–∏ –ø—ñ–¥ –º–µ–Ω—é –≤–∫–ª–∞–¥–æ–∫ -->
      <div class="analytics-filters">
        <div class="filter-row">
          <div class="filter-group">
            <label for="department-filter">–í—ñ–¥–¥—ñ–ª:</label>
            <select id="department-filter" class="filter-select">
              <option value="">–í—Å—ñ –≤—ñ–¥–¥—ñ–ª–∏</option>
            </select>
          </div>
          
          <div class="filter-group">
            <label for="manager-filter">–ú–µ–Ω–µ–¥–∂–µ—Ä:</label>
            <select id="manager-filter" class="filter-select">
              <option value="">–í—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏</option>
            </select>
          </div>
          
          <div class="filter-group">
            <label for="period-filter">–ü–µ—Ä—ñ–æ–¥:</label>
            <select id="period-filter" class="filter-select">
              <option value="1">1 –º—ñ—Å—è—Ü—å</option>
              <option value="2">2 –º—ñ—Å—è—Ü—ñ</option>
              <option value="3" selected>3 –º—ñ—Å—è—Ü—ñ</option>
              <option value="6">6 –º—ñ—Å—è—Ü—ñ–≤</option>
              <option value="12">12 –º—ñ—Å—è—Ü—ñ–≤</option>
            </select>
          </div>
          
          <div class="filter-group">
            <label for="status-filter">–°—Ç–∞—Ç—É—Å:</label>
            <select id="status-filter" class="filter-select">
              <option value="">–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏</option>
              <option value="new">–ù–æ–≤–∏–π</option>
              <option value="in_progress">–í —Ä–æ–±–æ—Ç—ñ</option>
              <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
              <option value="cancelled">–°–∫–∞—Å–æ–≤–∞–Ω–æ</option>
            </select>
          </div>
          
          <div class="filter-group">
            <label for="search-input">–ü–æ—à—É–∫:</label>
            <input type="text" id="search-input" class="filter-input" placeholder="–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤...">
          </div>
        </div>
      </div>
      
      <div class="analytics-tabs">
        <button class="analytics-tab-btn active" data-analytics="overdue">–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ</button>
        <button class="analytics-tab-btn" data-analytics="managers">–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤</button>
        <button class="analytics-tab-btn" data-analytics="reports">–î–µ—Ç–∞–ª—å–Ω—ñ –∑–≤—ñ—Ç–∏</button>
      </div>
      
      <div class="analytics-content">
        <div id="overdue-analytics-content" class="analytics-tab-content active">
          <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç–µ–π -->
        </div>
        <div id="managers-analytics-content" class="analytics-tab-content">
          <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ -->
        </div>
        <div id="reports-analytics-content" class="analytics-tab-content">
          <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤ -->
        </div>
      </div>
    </div>
  `;
  
  // –†–µ–Ω–¥–µ—Ä–∏–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
  renderFilters();
  
  // –†–µ–Ω–¥–µ—Ä–∏–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
  renderOverdueAgreements();
  
  // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
  document.querySelectorAll('.analytics-tab-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const analyticsType = e.currentTarget.dataset.analytics;
      if (analyticsType) {
      switchAnalyticsTab(analyticsType);
      } else {
        console.warn('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ data-analytics –∞—Ç—Ä–∏–±—É—Ç —É –∫–Ω–æ–ø—Ü—ñ:', e.currentTarget);
      }
    });
  });
}

// –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
function switchAnalyticsTab(analyticsType) {
  // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –≤–∫–ª–∞–¥–∫—É
  document.querySelectorAll('.analytics-tab-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  
  // –ë–µ–∑–ø–µ—á–Ω–æ –¥–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å
  const activeButton = document.querySelector(`[data-analytics="${analyticsType}"]`);
  if (activeButton) {
    activeButton.classList.add('active');
  } else {
    console.warn(`–ö–Ω–æ–ø–∫–∞ –∑ data-analytics="${analyticsType}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
  }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
  document.querySelectorAll('.analytics-tab-content').forEach(content => {
    content.classList.remove('active');
  });
  
  if (analyticsType === 'overdue') {
    const overdueContent = document.getElementById('overdue-analytics-content');
    if (overdueContent) {
      overdueContent.classList.add('active');
    renderOverdueAgreements();
    }
  } else if (analyticsType === 'managers') {
    const managersContent = document.getElementById('managers-analytics-content');
    if (managersContent) {
      managersContent.classList.add('active');
    renderManagerAnalytics();
    }
  } else if (analyticsType === 'reports') {
    const reportsContent = document.getElementById('reports-analytics-content');
    if (reportsContent) {
      reportsContent.classList.add('active');
    renderClientReports();
    }
  }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç–µ–π
function renderOverdueAgreements() {
  const contentDiv = document.getElementById('overdue-analytics-content');
  if (!contentDiv) return;
  
  const now = new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  
  // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–º–∏ –¥—ñ—è–º–∏
  const overdueClients = [];
  
  Object.keys(signalizationData.clientActionsData || {}).forEach(clientCode => {
    const clientData = signalizationData.clientActionsData[clientCode];
    if (!clientData || !clientData.actions) return;
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –¥—ñ—ó –∑ nextActionDate
    const actionsWithDates = clientData.actions.filter(action => 
      action.nextActionDate && action.status !== 'cancelled'
    );
    
    if (actionsWithDates.length === 0) return;
    
    // –°–æ—Ä—Ç—É—î–º–æ –ø–æ –¥–∞—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–æ—Å—Ç–∞–Ω–Ω—ñ –∑–≤–µ—Ä—Ö—É)
    actionsWithDates.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
    
    // –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—é –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—É –¥—ñ—é
    const latestAction = actionsWithDates[0];
    const actionDate = new Date(latestAction.nextActionDate);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞ –¥—ñ—è
    if (actionDate < today) {
      const daysPastDue = Math.floor((today - actionDate) / (1000 * 60 * 60 * 24));
      
      // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑ –ø—Ä–æ–¥–∞–∂ –∞–±–æ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞
      const clientName = getClientName(clientCode, clientCode);
      const clientLink = signalizationData.clientLinks[clientCode];
      
      overdueClients.push({
        code: clientCode,
        name: clientName,
        link: clientLink,
        plannedDate: latestAction.nextActionDate,
        plannedAction: latestAction.nextAction,
        daysPastDue: daysPastDue,
        lastComment: latestAction.comment || '',
        status: clientData.status || 'new',
        potentialOrderDate: clientData.potentialOrderDate,
        expectedAmount: clientData.expectedAmount
      });
    }
  });
  
  // –°–æ—Ä—Ç—É—î–º–æ –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –¥–Ω—ñ–≤ (–Ω–∞–π–±—ñ–ª—å—à –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∑–≤–µ—Ä—Ö—É)
  const sortedOverdue = overdueClients.sort((a, b) => b.daysPastDue - a.daysPastDue);
  
  // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é
  const filteredOverdue = sortedOverdue.filter(client => {
    if (filters.search && !client.name.toLowerCase().includes(filters.search.toLowerCase())) {
      return false;
    }
    if (filters.status && client.status !== filters.status) {
      return false;
    }
    return true;
  });
  
  if (filteredOverdue.length === 0) {
    contentDiv.innerHTML = `
      <div class="text-center py-12">
        <div class="text-6xl mb-4">üéâ</div>
        <h2 class="text-2xl font-bold text-white mb-2">–í—ñ–¥–º—ñ–Ω–Ω–æ! –ù–µ–º–∞—î –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç–µ–π</h2>
        <p class="text-gray-400">–í—Å—ñ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –¥—ñ—ó –≤–∏–∫–æ–Ω–∞–Ω—ñ –≤—á–∞—Å–Ω–æ –∞–±–æ —â–µ –Ω–µ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ</p>
      </div>
    `;
    return;
  }
  
  contentDiv.innerHTML = `
    <div class="flex justify-between items-center mb-6">
      <div>
        <h2 class="text-2xl font-bold text-white">–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ</h2>
        <p class="text-gray-400 mt-1">–ö–ª—ñ—î–Ω—Ç–∏ –∑ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–º–∏ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏–º–∏ –¥—ñ—è–º–∏</p>
      </div>
      <div class="flex items-center gap-4">
        <div class="text-sm text-gray-300">
          <span class="text-red-400 font-semibold">${filteredOverdue.length}</span> 
          ${filteredOverdue.length === 1 ? '–ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞ –¥–æ–º–æ–≤–ª–µ–Ω—ñ—Å—Ç—å' : 
            filteredOverdue.length < 5 ? '–ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ' : '–ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç–µ–π'}
        </div>
      </div>
    </div>
    
    <!-- –û–ø–∏—Å —Å—Ç–∞—Ç—É—Å—ñ–≤ -->
    <div class="bg-gray-700 rounded-lg p-4 mb-6">
      <h3 class="text-lg font-semibold text-white mb-3">üìã –û–ø–∏—Å —Å—Ç–∞—Ç—É—Å—ñ–≤ –∫–ª—ñ—î–Ω—Ç—ñ–≤:</h3>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
        <div class="flex items-center gap-2">
          <span class="px-2 py-1 rounded bg-red-600 text-white text-xs">üÜï –ù–æ–≤–∏–π</span>
          <span class="text-gray-300">–ö–ª—ñ—î–Ω—Ç —â–æ–π–Ω–æ –¥–æ–¥–∞–Ω–∏–π –¥–æ —Å–∏—Å—Ç–µ–º–∏, —â–µ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞–ª–∏</span>
        </div>
        <div class="flex items-center gap-2">
          <span class="px-2 py-1 rounded bg-yellow-600 text-white text-xs">üîÑ –í —Ä–æ–±–æ—Ç—ñ</span>
          <span class="text-gray-300">–ê–∫—Ç–∏–≤–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º, —î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –¥—ñ—ó</span>
        </div>
        <div class="flex items-center gap-2">
          <span class="px-2 py-1 rounded bg-green-600 text-white text-xs">‚úÖ –í–∏—Ä—ñ—à–µ–Ω–æ</span>
          <span class="text-gray-300">–ü—Ä–æ–±–ª–µ–º–∞ –≤–∏—Ä—ñ—à–µ–Ω–∞ –∞–±–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –º–∏–Ω—É–ª–æ–º—É</span>
        </div>
        <div class="flex items-center gap-2">
          <span class="px-2 py-1 rounded bg-gray-600 text-white text-xs">üóÇÔ∏è –ó–∞–∫—Ä–∏—Ç–æ</span>
          <span class="text-gray-300">–ö–ª—ñ—î–Ω—Ç –∑–∞–∫—Ä–∏—Ç–∏–π, —Ä–æ–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</span>
        </div>
      </div>
    </div>
  
    <div class="overflow-x-auto">
      <table class="min-w-full text-sm">
        <thead>
          <tr class="border-b border-gray-700">
            <th class="px-4 py-3 text-left text-gray-300 font-medium">–ö–ª—ñ—î–Ω—Ç</th>
            <th class="px-4 py-3 text-left text-gray-300 font-medium">–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ</th>
            <th class="px-4 py-3 text-left text-gray-300 font-medium">–î–∞—Ç–∞</th>
            <th class="px-4 py-3 text-left text-gray-300 font-medium">–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ</th>
            <th class="px-4 py-3 text-left text-gray-300 font-medium">CRM</th>
            <th class="px-4 py-3 text-left text-gray-300 font-medium">–°—Ç–∞—Ç—É—Å</th>
            <th class="px-4 py-3 text-left text-gray-300 font-medium">–î—ñ—ó</th>
            <th class="px-4 py-3 text-left text-gray-300 font-medium">–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-gray-700">
          ${filteredOverdue.map(client => {
            const urgencyClass = client.daysPastDue > 7 ? 'bg-red-900/30' : 
                                 client.daysPastDue > 3 ? 'bg-orange-900/30' : 'bg-yellow-900/30';
            const urgencyIcon = client.daysPastDue > 7 ? 'üö®' : 
                                client.daysPastDue > 3 ? '‚ö†Ô∏è' : '‚è∞';
            
            return `
              <tr class="hover:bg-gray-800/50 transition-colors ${urgencyClass}">
                <td class="px-4 py-3">
                  <div class="flex items-center gap-2">
                    <span class="text-lg">${urgencyIcon}</span>
                    <div>
                      <div class="font-medium text-white">${client.name}</div>
                      <div class="text-xs text-gray-400">${client.code}</div>
                    </div>
                  </div>
                </td>
                <td class="px-4 py-3">
                  <div class="text-gray-200">${client.plannedAction}</div>
                  ${client.lastComment ? `<div class="text-xs text-gray-400 mt-1">${client.lastComment}</div>` : ''}
                </td>
                <td class="px-4 py-3 text-gray-300">${client.plannedDate}</td>
                <td class="px-4 py-3">
                  <span class="px-2 py-1 rounded text-xs font-medium ${
                    client.daysPastDue > 7 ? 'bg-red-600 text-white' :
                    client.daysPastDue > 3 ? 'bg-orange-600 text-white' : 
                    'bg-yellow-600 text-black'
                  }">
                    ${client.daysPastDue} ${client.daysPastDue === 1 ? '–¥–µ–Ω—å' : 
                      client.daysPastDue < 5 ? '–¥–Ω—ñ' : '–¥–Ω—ñ–≤'}
                  </span>
                </td>
                <td class="px-4 py-3">
                  ${client.link ? `<a href="${client.link}" target="_blank" class="text-blue-400 hover:text-blue-300 underline">CRM</a>` : ''}
                </td>
                <td class="px-4 py-3">${renderClientStatus(client.code)}</td>
                <td class="px-4 py-3">${renderActionsMenu(client.code)}</td>
                <td class="px-4 py-3">
                  <button class="px-3 py-1 bg-gray-700 text-gray-200 rounded hover:bg-gray-600 text-sm" 
                          onclick="showClientDetail('${client.code}')">
                    –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ
                  </button>
                </td>
              </tr>
            `;
          }).join('')}
        </tbody>
      </table>
    </div>
    
    ${filteredOverdue.length > 0 ? `
      <div class="mt-6 p-4 bg-blue-900/20 border border-blue-600 rounded-lg">
        <div class="flex items-center gap-2 mb-2">
          <span class="text-blue-400">üí°</span>
          <span class="font-medium text-blue-200">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:</span>
        </div>
        <ul class="text-sm text-blue-300 space-y-1 ml-6">
          <li>‚Ä¢ –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –ø—Ä–æ—Å—Ç—Ä–æ—á–∫–æ—é –≤ –ø–µ—Ä—à—É —á–µ—Ä–≥—É</li>
          <li>‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≥–∞–º–±—É—Ä–≥–µ—Ä –º–µ–Ω—é "–î—ñ—ó" –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –ø–ª–∞–Ω—ñ–≤</li>
          <li>‚Ä¢ –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É</li>
        </ul>
      </div>
    ` : ''}
  `;
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
function renderManagerAnalytics() {
  const contentDiv = document.getElementById('managers-analytics-content');
  if (!contentDiv) return;
  
  // –ó–±–∏—Ä–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö
  const managerStats = {};
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å—ñ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
  signalizationData.managersData.forEach(manager => {
    managerStats[manager.id] = {
      id: manager.id,
      name: manager.name,
      department: manager.department?.name || manager.department || '–ù–µ–≤—ñ–¥–æ–º–∏–π –≤—ñ–¥–¥—ñ–ª',
      totalClients: 0,
      activeClients: 0,
      resolvedClients: 0,
      closedClients: 0,
      overdueActions: 0,
      totalActions: 0,
      potentialOrders: 0,
      potentialAmount: 0,
      avgResponseTime: 0,
      conversionRate: 0,
      lastActivityDate: null
    };
  });
  
  // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –ø–æ –∫–ª—ñ—î–Ω—Ç–∞—Ö
  Object.keys(signalizationData.clientActionsData || {}).forEach(clientCode => {
    const clientData = signalizationData.clientActionsData[clientCode];
    if (!clientData || !clientData.actions || clientData.actions.length === 0) return;
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
    const clientInfo = signalizationData.clientManagerDirectory[clientCode];
    if (!clientInfo || !clientInfo.manager) return;
    
    // –®—É–∫–∞—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Å–ø–∏—Å–∫—É
    const manager = signalizationData.managersData.find(m => m.name === clientInfo.manager);
    if (!manager || !managerStats[manager.id]) return;
    
    const stats = managerStats[manager.id];
    
    // –û—Å–Ω–æ–≤–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats.totalClients++;
    stats.totalActions += clientData.actions.length;
    
    // –°—Ç–∞—Ç—É—Å –∫–ª—ñ—î–Ω—Ç–∞
    const status = clientData.status || 'new';
    if (status === 'in_progress') stats.activeClients++;
    else if (status === 'resolved') stats.resolvedClients++;
    else if (status === 'closed') stats.closedClients++;
    
    // –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    if (clientData.potentialOrderDate) {
      stats.potentialOrders++;
      if (clientData.expectedAmount) {
        stats.potentialAmount += clientData.expectedAmount;
      }
    }
    
    // –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –¥—ñ—ó
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    
    const actionsWithDates = clientData.actions.filter(action => 
      action.nextActionDate && action.status !== 'cancelled'
    );
    
    if (actionsWithDates.length > 0) {
      actionsWithDates.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
      const latestAction = actionsWithDates[0];
      const actionDate = new Date(latestAction.nextActionDate);
      
      if (actionDate < today) {
        stats.overdueActions++;
      }
    }
    
    // –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
    if (clientData.lastActivity) {
      const activityDate = new Date(clientData.lastActivity);
      if (!stats.lastActivityDate || activityDate > stats.lastActivityDate) {
        stats.lastActivityDate = activityDate;
      }
    }
  });
  
  // –û–±—á–∏—Å–ª—é—î–º–æ –ø–æ—Ö—ñ–¥–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏
  Object.values(managerStats).forEach(stats => {
    if (stats.totalClients > 0) {
      stats.conversionRate = ((stats.resolvedClients / stats.totalClients) * 100).toFixed(1);
    }
  });
  
  // –°–æ—Ä—Ç—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –ø–æ –∑–∞–≥–∞–ª—å–Ω—ñ–π –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
  const sortedManagers = Object.values(managerStats)
    .filter(stats => stats.totalClients > 0)
    .sort((a, b) => {
      // –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞: –∫–æ–Ω–≤–µ—Ä—Å—ñ—è * –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤ - –ø—Ä–æ—Å—Ç—Ä–æ—á–∫–∞
      const scoreA = (parseFloat(a.conversionRate) * a.totalClients) - (a.overdueActions * 10);
      const scoreB = (parseFloat(b.conversionRate) * b.totalClients) - (b.overdueActions * 10);
      return scoreB - scoreA;
    });
  
  // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é
  const filteredManagers = sortedManagers.filter(manager => {
    if (filters.department) {
      const managerData = signalizationData.managersData.find(m => m.id === manager.id);
      if (managerData) {
        return managerData.departmentId === filters.department ||
               managerData.department === filters.department ||
               (managerData.department && managerData.department.id === filters.department);
      }
      return false;
    }
    if (filters.manager) {
      return manager.id === filters.manager;
    }
    return true;
  });
  
  contentDiv.innerHTML = `
    <div class="flex justify-between items-center mb-6">
      <div>
        <h2 class="text-2xl font-bold text-white">–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤</h2>
        <p class="text-gray-400 mt-1">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–±–æ—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º</p>
      </div>
      <div class="text-sm text-gray-300">
        <span class="text-blue-400 font-semibold">${filteredManagers.length}</span> 
        ${filteredManagers.length === 1 ? '–º–µ–Ω–µ–¥–∂–µ—Ä' : 
          filteredManagers.length < 5 ? '–º–µ–Ω–µ–¥–∂–µ—Ä–∏' : '–º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤'} –≤ —Ä–æ–±–æ—Ç—ñ
      </div>
    </div>
    
    ${filteredManagers.length === 0 ? `
      <div class="text-center py-12">
        <div class="text-6xl mb-4">üìä</div>
        <h2 class="text-2xl font-bold text-white mb-2">–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É</h2>
        <p class="text-gray-400">–í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –∞–±–æ –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—è –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</p>
      </div>
    ` : `
      <!-- –¢–æ–ø-3 –º–µ–Ω–µ–¥–∂–µ—Ä–∞ -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        ${filteredManagers.slice(0, 3).map((manager, index) => {
          const medals = ['ü•á', 'ü•à', 'ü•â'];
          const colors = ['from-yellow-600 to-yellow-700', 'from-gray-500 to-gray-600', 'from-orange-600 to-orange-700'];
          
          return `
            <div class="bg-gradient-to-br ${colors[index]} rounded-lg p-4 text-white">
              <div class="flex items-center justify-between mb-3">
                <span class="text-2xl">${medals[index]}</span>
                <span class="text-xs px-2 py-1 bg-white/20 rounded-full">#${index + 1}</span>
              </div>
              <h3 class="font-bold text-lg mb-1">${manager.name}</h3>
              <p class="text-xs opacity-75 mb-3">${manager.department}</p>
              <div class="grid grid-cols-2 gap-2 text-xs">
                <div>
                  <p class="opacity-75">–ö–ª—ñ—î–Ω—Ç—ñ–≤</p>
                  <p class="font-bold text-lg">${manager.totalClients}</p>
                </div>
                <div>
                  <p class="opacity-75">–ö–æ–Ω–≤–µ—Ä—Å—ñ—è</p>
                  <p class="font-bold text-lg">${manager.conversionRate}%</p>
                </div>
              </div>
            </div>
          `;
        }).join('')}
      </div>
      
      <!-- –î–µ—Ç–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è -->
      <div class="bg-gray-700 rounded-lg overflow-hidden">
        <div class="overflow-x-auto">
          <table class="min-w-full text-sm">
            <thead class="bg-gray-800">
              <tr>
                <th class="px-4 py-3 text-left text-gray-300 font-medium">–ú–µ–Ω–µ–¥–∂–µ—Ä</th>
                <th class="px-4 py-3 text-center text-gray-300 font-medium">–ö–ª—ñ—î–Ω—Ç—ñ–≤</th>
                <th class="px-4 py-3 text-center text-gray-300 font-medium">–ê–∫—Ç–∏–≤–Ω–∏—Ö</th>
                <th class="px-4 py-3 text-center text-gray-300 font-medium">–í–∏—Ä—ñ—à–µ–Ω–æ</th>
                <th class="px-4 py-3 text-center text-gray-300 font-medium">–ö–æ–Ω–≤–µ—Ä—Å—ñ—è</th>
                <th class="px-4 py-3 text-center text-gray-300 font-medium">–ü—Ä–æ—Å—Ç—Ä–æ—á–∫–∞</th>
                <th class="px-4 py-3 text-center text-gray-300 font-medium">–ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª</th>
                <th class="px-4 py-3 text-center text-gray-300 font-medium">–û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</th>
              </tr>
            </thead>
            <tbody class="divide-y divide-gray-600">
              ${filteredManagers.map((manager, index) => {
                const conversionColor = parseFloat(manager.conversionRate) >= 70 ? 'text-green-400' :
                                       parseFloat(manager.conversionRate) >= 50 ? 'text-yellow-400' : 'text-red-400';
                
                const overdueColor = manager.overdueActions === 0 ? 'text-green-400' :
                                    manager.overdueActions <= 2 ? 'text-yellow-400' : 'text-red-400';
                
                const lastActivity = manager.lastActivityDate ? 
                  manager.lastActivityDate.toLocaleDateString('uk-UA') : '–ù–µ–º–∞—î';
                
                return `
                  <tr class="hover:bg-gray-600/50 transition-colors">
                    <td class="px-4 py-3">
                      <div class="flex items-center gap-2">
                        <span class="text-lg">${index < 3 ? ['ü•á', 'ü•à', 'ü•â'][index] : 'üë§'}</span>
                        <div>
                          <div class="font-medium text-white">${manager.name}</div>
                          <div class="text-xs text-gray-400">${manager.department}</div>
                        </div>
                      </div>
                    </td>
                    <td class="px-4 py-3 text-center text-white font-medium">${manager.totalClients}</td>
                    <td class="px-4 py-3 text-center text-yellow-400">${manager.activeClients}</td>
                    <td class="px-4 py-3 text-center text-green-400">${manager.resolvedClients}</td>
                    <td class="px-4 py-3 text-center ${conversionColor} font-bold">${manager.conversionRate}%</td>
                    <td class="px-4 py-3 text-center ${overdueColor} font-medium">${manager.overdueActions}</td>
                    <td class="px-4 py-3 text-center">
                      <div class="text-white font-medium">${manager.potentialOrders}</div>
                      ${manager.potentialAmount > 0 ? `
                        <div class="text-xs text-green-300">~${(manager.potentialAmount / 1000).toFixed(0)}k –≥—Ä–Ω</div>
                      ` : ''}
                    </td>
                    <td class="px-4 py-3 text-center text-gray-300 text-xs">${lastActivity}</td>
                  </tr>
                `;
              }).join('')}
            </tbody>
          </table>
        </div>
      </div>
      
      <!-- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó -->
      <div class="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="bg-blue-900/20 border border-blue-600 rounded-lg p-4">
          <div class="flex items-center gap-2 mb-2">
            <span class="text-blue-400">üèÜ</span>
            <span class="font-medium text-blue-200">–õ—ñ–¥–µ—Ä–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:</span>
          </div>
          <ul class="text-sm text-blue-300 space-y-1">
            ${filteredManagers.slice(0, 3).map(m => 
              `<li>‚Ä¢ ${m.name} - ${m.conversionRate}% –∫–æ–Ω–≤–µ—Ä—Å—ñ—è, ${m.totalClients} –∫–ª—ñ—î–Ω—Ç—ñ–≤</li>`
            ).join('')}
          </ul>
        </div>
        
        <div class="bg-orange-900/20 border border-orange-600 rounded-lg p-4">
          <div class="flex items-center gap-2 mb-2">
            <span class="text-orange-400">‚ö†Ô∏è</span>
            <span class="font-medium text-orange-200">–ü–æ—Ç—Ä–µ–±—É—é—Ç—å —É–≤–∞–≥–∏:</span>
          </div>
          <ul class="text-sm text-orange-300 space-y-1">
            ${filteredManagers.filter(m => m.overdueActions > 0 || parseFloat(m.conversionRate) < 50)
              .slice(0, 3).map(m => 
                `<li>‚Ä¢ ${m.name} - ${m.overdueActions > 0 ? `${m.overdueActions} –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—å` : `${m.conversionRate}% –∫–æ–Ω–≤–µ—Ä—Å—ñ—è`}</li>`
              ).join('') || '<li>‚Ä¢ –í—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –ø—Ä–∞—Ü—é—é—Ç—å –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ! üéâ</li>'}
          </ul>
        </div>
      </div>
    `}
  `;
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤
function renderClientReports() {
  const contentDiv = document.getElementById('reports-analytics-content');
  if (!contentDiv) return;
  
  // –ó–±–∏—Ä–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç–∞—Ö –∑ –¥—ñ—è–º–∏
  const clientReports = [];
  
  Object.keys(signalizationData.clientActionsData || {}).forEach(clientCode => {
    const clientData = signalizationData.clientActionsData[clientCode];
    if (!clientData || !clientData.actions || clientData.actions.length === 0) return;
    
    const clientInfo = signalizationData.clientManagerDirectory[clientCode];
    const clientName = getClientName(clientCode, clientCode);
    const clientLink = signalizationData.clientLinks[clientCode];
    
    // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞
    const actions = [...clientData.actions].sort((a, b) => {
      // –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ undefined –¥–ª—è createdAt
      const dateA = a && a.createdAt ? new Date(a.createdAt) : new Date(0);
      const dateB = b && b.createdAt ? new Date(b.createdAt) : new Date(0);
      return dateB - dateA;
    });
    const lastAction = actions[0];
    const firstAction = actions[actions.length - 1];
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥—ñ–π
    const actionStats = {};
    const actionTypes = ['call', 'meeting', 'email', 'commercial_proposal', 'other'];
    actionTypes.forEach(type => {
      actionStats[type] = actions.filter(a => a.type === type).length;
    });
    
    // –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –¥—ñ—ó
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const overdueActions = actions.filter(action => {
      if (!action.nextActionDate || action.status === 'cancelled') return false;
      const actionDate = new Date(action.nextActionDate);
      return actionDate < today;
    });
    
    // –ß–∞—Å —Ä–æ–±–æ—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º
    const firstActionDate = firstAction && firstAction.createdAt ? new Date(firstAction.createdAt) : new Date();
    const workingDays = Math.floor((now - firstActionDate) / (1000 * 60 * 60 * 24));
    
    // –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏
    const status = clientData.status || 'new';
    const isResolved = status === 'resolved';
    const isActive = status === 'in_progress';
    
    clientReports.push({
      code: clientCode,
      name: clientName,
      manager: clientInfo?.manager || '–ù–µ–≤—ñ–¥–æ–º–∏–π',
      link: clientLink,
      status: status,
      totalActions: actions.length,
      workingDays: workingDays,
      firstActionDate: firstActionDate,
      lastActionDate: lastAction && lastAction.createdAt ? new Date(lastAction.createdAt) : new Date(),
      overdueCount: overdueActions.length,
      actionStats: actionStats,
      isResolved: isResolved,
      isActive: isActive,
      potentialOrderDate: clientData.potentialOrderDate,
      expectedAmount: clientData.expectedAmount,
      lastActivity: clientData.lastActivity
    });
  });
  
  // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é
  let filteredReports = clientReports;
  
  if (filters.department || filters.manager) {
    filteredReports = filteredReports.filter(report => {
      if (filters.manager) {
        const manager = signalizationData.managersData.find(m => m.name === report.manager);
        return manager && manager.id === filters.manager;
      }
      if (filters.department) {
        const manager = signalizationData.managersData.find(m => m.name === report.manager);
        if (manager) {
          return manager.departmentId === filters.department ||
                 manager.department === filters.department ||
                 (manager.department && manager.department.id === filters.department);
        }
        return false;
      }
      return true;
    });
  }
  
  if (filters.status) {
    filteredReports = filteredReports.filter(report => report.status === filters.status);
  }
  
  if (filters.search) {
    filteredReports = filteredReports.filter(report => 
      report.name.toLowerCase().includes(filters.search.toLowerCase()) ||
      report.manager.toLowerCase().includes(filters.search.toLowerCase())
    );
  }
  
  // –°–æ—Ä—Ç—É—î–º–æ –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–Ω—ñ–≤ —Ä–æ–±–æ—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º (–Ω–∞–π–±—ñ–ª—å—à "—Å—Ç–∞—Ä—ñ" –∫–ª—ñ—î–Ω—Ç–∏ –∑–≤–µ—Ä—Ö—É)
  filteredReports.sort((a, b) => b.workingDays - a.workingDays);
  
  contentDiv.innerHTML = `
          <div class="flex justify-between items-center mb-6">
        <div>
          <h2 class="text-2xl font-bold text-white">–î–µ—Ç–∞–ª—å–Ω—ñ –∑–≤—ñ—Ç–∏ –ø–æ –∫–ª—ñ—î–Ω—Ç–∞—Ö</h2>
          <p class="text-gray-400 mt-1">–ü–æ–≤–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è –≤–∑–∞—î–º–æ–¥—ñ–π —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–±–æ—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏</p>
        </div>
        <div class="flex items-center gap-4">
          <div class="text-sm text-gray-300">
            <span class="text-blue-400 font-semibold">${filteredReports.length}</span> 
            ${filteredReports.length === 1 ? '–∫–ª—ñ—î–Ω—Ç' : 
              filteredReports.length < 5 ? '–∫–ª—ñ—î–Ω—Ç–∏' : '–∫–ª—ñ—î–Ω—Ç—ñ–≤'} –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é
          </div>
          <button onclick="exportCSV()" 
                  class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 text-sm">
            üìä –ï–∫—Å–ø–æ—Ä—Ç CSV
          </button>
        </div>
      </div>
    
    ${filteredReports.length === 0 ? `
      <div class="text-center py-12">
        <div class="text-6xl mb-4">üìã</div>
        <h2 class="text-2xl font-bold text-white mb-2">–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–≤—ñ—Ç—É</h2>
        <p class="text-gray-400">–í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –∞–±–æ –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—è –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</p>
      </div>
    ` : `
      <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–≤–µ—Ä—Ö—É -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <div class="bg-gradient-to-br from-blue-600 to-blue-700 rounded-lg p-3 text-white text-center">
          <div class="text-2xl mb-1">üìä</div>
          <div class="text-sm opacity-75">–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å —Ä–æ–±–æ—Ç–∏</div>
          <div class="text-lg font-bold">
            ${Math.round(filteredReports.reduce((sum, r) => sum + r.workingDays, 0) / filteredReports.length)} –¥–Ω—ñ–≤
          </div>
        </div>
        
        <div class="bg-gradient-to-br from-green-600 to-green-700 rounded-lg p-3 text-white text-center">
          <div class="text-2xl mb-1">‚úÖ</div>
          <div class="text-sm opacity-75">–£—Å–ø—ñ—à–Ω–æ –≤–∏—Ä—ñ—à–µ–Ω–æ</div>
          <div class="text-lg font-bold">
            ${filteredReports.filter(r => r.isResolved).length}
          </div>
        </div>
        
        <div class="bg-gradient-to-br from-yellow-600 to-yellow-700 rounded-lg p-3 text-white text-center">
          <div class="text-2xl mb-1">üîÑ</div>
          <div class="text-sm opacity-75">–ê–∫—Ç–∏–≤–Ω–æ –≤ —Ä–æ–±–æ—Ç—ñ</div>
          <div class="text-lg font-bold">
            ${filteredReports.filter(r => r.isActive).length}
          </div>
        </div>
        
        <div class="bg-gradient-to-br from-red-600 to-red-700 rounded-lg p-3 text-white text-center">
          <div class="text-2xl mb-1">‚è∞</div>
          <div class="text-sm opacity-75">–ó –ø—Ä–æ—Å—Ç—Ä–æ—á–∫–æ—é</div>
          <div class="text-lg font-bold">
            ${filteredReports.filter(r => r.overdueCount > 0).length}
          </div>
        </div>
      </div>
      
      <!-- –î–µ—Ç–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è -->
      <div class="bg-gray-700 rounded-lg overflow-hidden">
        <div class="overflow-x-auto">
          <table class="min-w-full text-sm">
            <thead class="bg-gray-800">
              <tr>
                <th class="px-4 py-3 text-left text-gray-300 font-medium">–ö–ª—ñ—î–Ω—Ç</th>
                <th class="px-4 py-3 text-center text-gray-300 font-medium">–ú–µ–Ω–µ–¥–∂–µ—Ä</th>
                <th class="px-4 py-3 text-center text-gray-300 font-medium">–°—Ç–∞—Ç—É—Å</th>
                <th class="px-4 py-3 text-center text-gray-300 font-medium">–î—ñ—ó</th>
                <th class="px-4 py-3 text-center text-gray-300 font-medium">–î–Ω—ñ–≤ —Ä–æ–±–æ—Ç–∏</th>
                <th class="px-4 py-3 text-center text-gray-300 font-medium">–ü—Ä–æ—Å—Ç—Ä–æ—á–∫–∞</th>
                <th class="px-4 py-3 text-center text-gray-300 font-medium">–ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª</th>
                <th class="px-4 py-3 text-center text-gray-300 font-medium">–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</th>
              </tr>
            </thead>
            <tbody class="divide-y divide-gray-600">
              ${filteredReports.map(report => {
                const statusColors = {
                  'new': 'bg-gray-600 text-white',
                  'in_progress': 'bg-yellow-600 text-white',
                  'resolved': 'bg-green-600 text-white',
                  'closed': 'bg-gray-500 text-white'
                };
                
                const statusLabels = {
                  'new': 'üÜï –ù–æ–≤–∏–π',
                  'in_progress': 'üîÑ –í —Ä–æ–±–æ—Ç—ñ',
                  'resolved': '‚úÖ –í–∏—Ä—ñ—à–µ–Ω–æ',
                  'closed': 'üóÇÔ∏è –ó–∞–∫—Ä–∏—Ç–æ'
                };
                
                const workingDaysColor = report.workingDays > 30 ? 'text-red-400' :
                                        report.workingDays > 14 ? 'text-yellow-400' : 'text-green-400';
                
                const overdueColor = report.overdueCount === 0 ? 'text-green-400' :
                                    report.overdueCount <= 2 ? 'text-yellow-400' : 'text-red-400';
                
                return `
                  <tr class="hover:bg-gray-600/50 transition-colors">
                    <td class="px-4 py-3">
                      <div class="flex items-center gap-2">
                        <span class="text-lg">${report.isResolved ? '‚úÖ' : report.isActive ? 'üîÑ' : 'üÜï'}</span>
                        <div>
                          <div class="font-medium text-white">${report.name}</div>
                          <div class="text-xs text-gray-400">${report.code}</div>
                          ${report.link ? `
                            <a href="${report.link}" target="_blank" class="text-blue-400 hover:text-blue-300 underline text-xs">CRM</a>
                          ` : ''}
                        </div>
                      </div>
                    </td>
                    <td class="px-4 py-3 text-center text-gray-300">${report.manager}</td>
                    <td class="px-4 py-3 text-center">
                      <span class="px-2 py-1 rounded text-xs ${statusColors[report.status]}">
                        ${statusLabels[report.status]}
                      </span>
                    </td>
                    <td class="px-4 py-3 text-center">
                      <div class="text-white font-medium">${report.totalActions}</div>
                      <div class="text-xs text-gray-400">
                        üìû${report.actionStats.call} ü§ù${report.actionStats.meeting} 
                        üìß${report.actionStats.email} üìÑ${report.actionStats.commercial_proposal}
                      </div>
                    </td>
                    <td class="px-4 py-3 text-center ${workingDaysColor} font-medium">${report.workingDays}</td>
                    <td class="px-4 py-3 text-center ${overdueColor} font-medium">${report.overdueCount}</td>
                    <td class="px-4 py-3 text-center">
                      ${report.potentialOrderDate ? `
                        <div class="text-green-400 font-medium">üéØ ${report.potentialOrderDate}</div>
                        ${report.expectedAmount ? `
                          <div class="text-xs text-green-300">~${(report.expectedAmount / 1000).toFixed(0)}k –≥—Ä–Ω</div>
                        ` : ''}
                      ` : '<span class="text-gray-500">‚Äî</span>'}
                    </td>
                    <td class="px-4 py-3 text-center">
                      <button class="px-3 py-1 bg-indigo-600 text-white rounded hover:bg-indigo-700 text-sm" 
                              onclick="showClientDetail('${report.code}')">
                        –Ü—Å—Ç–æ—Ä—ñ—è
                      </button>
                    </td>
                  </tr>
                `;
              }).join('')}
            </tbody>
          </table>
        </div>
      </div>
      
      <!-- –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞—Ö –¥—ñ–π -->
      <div class="mt-6 bg-gray-700 rounded-lg p-4">
        <h3 class="text-lg font-semibold text-white mb-4">–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –¥—ñ–π</h3>
        <div class="grid grid-cols-2 md:grid-cols-5 gap-4">
          ${['call', 'meeting', 'email', 'commercial_proposal', 'other'].map(actionType => {
            const total = filteredReports.reduce((sum, r) => sum + r.actionStats[actionType], 0);
            const actionLabels = {
              'call': 'üìû –î–∑–≤—ñ–Ω–∫–∏',
              'meeting': 'ü§ù –ó—É—Å—Ç—Ä—ñ—á—ñ',
              'email': 'üìß Email',
              'commercial_proposal': 'üìÑ –ö–ü',
              'other': 'üìã –Ü–Ω—à–µ'
            };
            
            return `
              <div class="text-center">
                <div class="text-2xl mb-2">${actionLabels[actionType].split(' ')[0]}</div>
                <div class="text-sm text-gray-300">${actionLabels[actionType].split(' ')[1]}</div>
                <div class="text-xl font-bold text-white">${total}</div>
              </div>
            `;
          }).join('')}
        </div>
      </div>
    `}
  `;
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∞–¥—É –≤–∏—Ä—É—á–∫–∏
function renderRevenueDrop() {
  const contentBody = document.getElementById('content-body');
  contentBody.innerHTML = `
    <div class="revenue-drop-container">
      <div class="revenue-drop-content">
        <div class="revenue-drop-tabs">
          <button class="revenue-drop-tab active" data-revenue="revenue">–°–ø–∞–¥ –≤–∏—Ä—É—á–∫–∏</button>
          <button class="revenue-drop-tab" data-revenue="frequency">–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–∫—É–ø–æ–∫</button>
          <button class="revenue-drop-tab" data-revenue="avg-check">–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫</button>
        </div>
        <div class="revenue-drop-tab-content" id="revenue-drop-tab-content">
          <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç–∏—Å—è —Ç—É—Ç -->
        </div>
      </div>
    </div>
  `;
  
  // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ —Å–ø–∞–¥—É –≤–∏—Ä—É—á–∫–∏
  document.querySelectorAll('.revenue-drop-tab').forEach(tab => {
    tab.addEventListener('click', (e) => {
      const revenueType = e.currentTarget.dataset.revenue;
      if (revenueType) {
      switchRevenueDropTab(revenueType);
      } else {
        console.warn('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ data-revenue –∞—Ç—Ä–∏–±—É—Ç —É –≤–∫–ª–∞–¥—Ü—ñ:', e.currentTarget);
      }
    });
  });
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—É –≤–∫–ª–∞–¥–∫—É
  switchRevenueDropTab('revenue');
}

// –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫ —Å–ø–∞–¥—É –≤–∏—Ä—É—á–∫–∏
function switchRevenueDropTab(revenueType) {
  // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –≤–∫–ª–∞–¥–∫—É
  document.querySelectorAll('.revenue-drop-tab').forEach(tab => {
    tab.classList.remove('active');
  });
  
  // –ë–µ–∑–ø–µ—á–Ω–æ –¥–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å
  const activeTab = document.querySelector(`[data-revenue="${revenueType}"]`);
  if (activeTab) {
    activeTab.classList.add('active');
  } else {
    console.warn(`–í–∫–ª–∞–¥–∫–∞ –∑ data-revenue="${revenueType}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
  }
  
  const contentDiv = document.getElementById('revenue-drop-tab-content');
  
  switch(revenueType) {
    case 'revenue':
      renderRevenueDropData();
      break;
    case 'frequency':
      renderFrequencyDropData();
      break;
    case 'avg-check':
      renderAvgCheckDropData();
      break;
  }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–∞–Ω–∏—Ö —Å–ø–∞–¥—É –≤–∏—Ä—É—á–∫–∏
function renderRevenueDropData() {
  const contentDiv = document.getElementById('revenue-drop-tab-content');
  

  
  if (!signalizationData || !signalizationData.masterData) {
    contentDiv.innerHTML = '<p>–î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ</p>';
    return;
  }
  
  // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Å–ø–∞–¥—É –≤–∏—Ä—É—á–∫–∏
  const revenueDrops = analyzeRevenueDrops();
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º renderTable –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
  
  renderTable(
    revenueDrops.clients,
    ['–ö–ª—ñ—î–Ω—Ç', '–í–∏—Ä—É—á–∫–∞ (–∑–∞—Ä–∞–∑)', '–ë—É–ª–æ (–¥–æ)', '–ó–º—ñ–Ω–∞', 'CRM', '–°—Ç–∞—Ç—É—Å', '–î—ñ—ó', '–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ'],
    client => {
      return [
        (client.now < client.prev*0.5
                    ? `<span title='–ö—Ä–∏—Ç–∏—á–Ω–µ –ø–∞–¥—ñ–Ω–Ω—è' style='vertical-align:middle; margin-right:4px;'>
                        <svg width='18' height='18' viewBox='0 0 20 20' fill='red' style='display:inline'><polygon points='10,2 2,18 18,18'/></svg>
                      </span>`
                    : `<span title='–ú–µ–Ω—à –∫—Ä–∏—Ç–∏—á–Ω–µ' style='vertical-align:middle; margin-right:4px;'>
                        <svg width='18' height='18' viewBox='0 20 20' fill='#FFD600' style='display:inline'><polygon points='10,2 2,18 18,18'/></svg>
            </span>`)
        + `<span class='text-gray-200'>${client.name}</span>`,
        client.now.toFixed(2),
        client.prev.toFixed(2),
        `<span class="${client.dropPercent > 0 ? 'text-red-500' : 'text-green-500'}">${client.dropPercent.toFixed(1)}%</span>`,
        client.link ? `<a href="${client.link}" target="_blank" class="text-blue-600 underline">CRM</a>` : '',
        renderClientStatus(client.code),
        renderActionsMenu(client.code),
        `<button class='px-2 py-1 bg-gray-100 rounded text-black client-detail-btn' data-client-code="${client.code}">–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</button>`
      ];
    },
    client => ''
  );
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–∞–Ω–∏—Ö –∑–º–µ–Ω—à–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –ø–æ–∫—É–ø–æ–∫
function renderFrequencyDropData() {
  const contentDiv = document.getElementById('revenue-drop-tab-content');
  
  if (!signalizationData || !signalizationData.masterData) {
    contentDiv.innerHTML = '<p>–î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ</p>';
    return;
  }
  
  // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏
  const frequencyDrops = analyzeFrequencyDrops();
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º renderTable –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
  renderTable(
    frequencyDrops.clients,
    ['–ö–ª—ñ—î–Ω—Ç', '–Ü–Ω—Ç–µ—Ä–≤–∞–ª (–¥–Ω—ñ–≤, –∑–∞—Ä–∞–∑)', '–ë—É–ª–æ (–¥–Ω—ñ–≤)', '–ó–º—ñ–Ω–∞', 'CRM', '–°—Ç–∞—Ç—É—Å', '–î—ñ—ó', '–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ'],
    client => [
      client.name,
      client.nowInt ? (client.nowInt / (1000 * 60 * 60 * 24)).toFixed(1) : '-',
      client.prevInt ? (client.prevInt / (1000 * 60 * 60 * 24)).toFixed(1) : '-',
      `<span class="${client.dropPercent > 0 ? 'text-red-500' : 'text-green-500'}">${client.dropPercent.toFixed(1)}%</span>`,
      client.link ? `<a href="${client.link}" target="_blank" class="text-blue-600 underline">CRM</a>` : '',
      renderClientStatus(client.code),
      renderActionsMenu(client.code),
      `<button class='px-2 py-1 bg-gray-100 rounded text-black client-detail-btn' data-client-code="${client.code}">–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</button>`
    ],
    client => client.nowInt > client.prevInt*3 ? 'bg-red-900' : 'bg-yellow-900'
  );
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–∞–Ω–∏—Ö –∑–º–µ–Ω—à–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–µ–∫–∞
function renderAvgCheckDropData() {
  const contentDiv = document.getElementById('revenue-drop-tab-content');
  
  if (!signalizationData || !signalizationData.masterData) {
    contentDiv.innerHTML = '<p>–î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ</p>';
    return;
  }
  
  // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–µ–∫–∞
  const avgCheckDrops = analyzeAvgCheckDrops();
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º renderTable –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
  renderTable(
    avgCheckDrops.clients,
    ['–ö–ª—ñ—î–Ω—Ç', '–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫ (–∑–∞—Ä–∞–∑)', '–ë—É–ª–æ', '–ó–º—ñ–Ω–∞', 'CRM', '–°—Ç–∞—Ç—É—Å', '–î—ñ—ó', '–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ'],
    client => [
      client.name,
      client.nowAvg ? client.nowAvg.toFixed(2) : '-',
      client.prevAvg ? client.prevAvg.toFixed(2) : '-',
      `<span class="${client.change > 0 ? 'text-red-500' : 'text-green-500'}">${client.change.toFixed(1)}%</span>`,
      client.link ? `<a href="${client.link}" target="_blank" class="text-blue-600 underline">CRM</a>` : '',
      renderClientStatus(client.code),
      renderActionsMenu(client.code),
      `<button class='px-2 py-1 bg-gray-100 rounded text-black client-detail-btn' data-client-code="${client.code}">–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</button>`
    ],
    client => client.nowAvg < client.prevAvg*0.6 ? 'bg-red-900' : 'bg-yellow-900'
  );
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–µ—Ä–µ–¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
function renderTransferredClients() {
  const contentBody = document.getElementById('content-body');
  
  if (!signalizationData || !signalizationData.masterData) {
    contentBody.innerHTML = '<p>–î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ</p>';
    return;
  }
  
  // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–µ—Ä–µ–¥–∞—á—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤
  const transfers = analyzeClientTransfers();
  
  contentBody.innerHTML = `
    <div class="transferred-clients-container">
      <div class="transferred-clients-content">
        <div class="transferred-clients-tabs">
          <button class="transferred-clients-tab active" data-transfer="list">–ü–µ—Ä–µ–¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏</button>
          <button class="transferred-clients-tab" data-transfer="statistics">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</button>
        </div>
        <div class="transferred-clients-tab-content" id="transferred-clients-tab-content">
          <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç–∏—Å—è —Ç—É—Ç -->
        </div>
      </div>
    </div>
  `;
  
  // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ –ø–µ—Ä–µ–¥–∞—á
  document.querySelectorAll('.transferred-clients-tab').forEach(tab => {
    tab.addEventListener('click', (e) => {
      const transferType = e.currentTarget.dataset.transfer;
      if (transferType) {
        switchTransferredClientsTab(transferType);
      } else {
        console.warn('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ data-transfer –∞—Ç—Ä–∏–±—É—Ç —É –≤–∫–ª–∞–¥—Ü—ñ:', e.currentTarget);
      }
    });
  });
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—É –≤–∫–ª–∞–¥–∫—É
  switchTransferredClientsTab('list');
}

// –ê–Ω–∞–ª—ñ–∑ –ø–µ—Ä–µ–¥–∞—á –∫–ª—ñ—î–Ω—Ç—ñ–≤ –º—ñ–∂ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
function analyzeClientTransfers() {
  if (!signalizationData || !signalizationData.masterData) {
    return [];
  }
  
  const now = new Date();
  // currentPeriod = 3 –æ–∑–Ω–∞—á–∞–µ—Ç 3 –º–µ—Å—è—Ü–∞ (90 –¥–Ω–µ–π)
  // periodMs - —ç—Ç–æ –ø–µ—Ä–∏–æ–¥ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—á
  const periodMs = currentPeriod * 30 * 24 * 60 * 60 * 1000;
  const transfers = [];
  
  // –ì—Ä—É–ø—É—î–º–æ –ø—Ä–æ–¥–∞–∂—ñ –ø–æ –∫–ª—ñ—î–Ω—Ç–∞—Ö —Ç–∞ –ø–µ—Ä—ñ–æ–¥–∞—Ö
  const clientSales = {};
  
  signalizationData.masterData.forEach(sale => {
    if (!passesFilters || !passesFilters(sale)) return;
    
    const clientCode = sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'];
    const date = new Date(sale['–î–∞—Ç–∞']);
    const manager = sale['–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä'];
    
    if (!clientSales[clientCode]) {
      clientSales[clientCode] = [];
    }
    
    clientSales[clientCode].push({
      date,
      manager,
      revenue: typeof sale['–í—ã—Ä—É—á–∫–∞'] === 'string' ? 
        parseFloat(sale['–í—ã—Ä—É—á–∫–∞'].replace(/\s/g, '').replace(',', '.')) : 
        (sale['–í—ã—Ä—É—á–∫–∞'] || 0)
    });
  });
  
  // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
  Object.keys(clientSales).forEach(clientCode => {
    const sales = clientSales[clientCode].sort((a, b) => a.date - b.date);
    
    // –ì—Ä—É–ø—É—î–º–æ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º —Ç–∞ –∑–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—ñ–æ–¥–∏ —Ä–æ–±–æ—Ç–∏
    const managerPeriods = [];
    let currentManager = null;
    let periodStart = null;
    
    sales.forEach(sale => {
      if (sale.manager !== currentManager) {
        // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä—ñ–æ–¥
        if (currentManager && periodStart) {
          managerPeriods.push({
            manager: currentManager,
            start: periodStart,
            end: sale.date,
            sales: sales.filter(s => 
              s.manager === currentManager && 
              s.date >= periodStart && 
              s.date < sale.date
            )
          });
        }
        
        // –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π –ø–µ—Ä—ñ–æ–¥
        currentManager = sale.manager;
        periodStart = sale.date;
      }
    });
    
    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–µ—Ä—ñ–æ–¥
    if (currentManager && periodStart) {
      managerPeriods.push({
        manager: currentManager,
        start: periodStart,
        end: now,
        sales: sales.filter(s => 
          s.manager === currentManager && 
          s.date >= periodStart
        )
      });
    }
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—á—ñ (–∫–æ–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∑–º—ñ–Ω—é—î—Ç—å—Å—è)
    for (let i = 1; i < managerPeriods.length; i++) {
      const prevPeriod = managerPeriods[i - 1];
      const currentPeriod = managerPeriods[i];
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–µ—Ä–µ–¥–∞—á–∞ –≤—ñ–¥–±—É–ª–∞—Å—è –≤ —Ä–∞–º–∫–∞—Ö –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
      if (currentPeriod.start >= now - periodMs && currentPeriod.start <= now) {
        transfers.push({
          clientCode,
          clientName: signalizationData.clientNames[clientCode] || clientCode,
          fromManager: prevPeriod.manager,
          toManager: currentPeriod.manager,
          transferDate: currentPeriod.start,
          prevPeriodRevenue: prevPeriod.sales.reduce((sum, s) => sum + s.revenue, 0),
          currentPeriodRevenue: currentPeriod.sales.reduce((sum, s) => sum + s.revenue, 0),
          link: signalizationData.clientLinks[clientCode]
        });
      }
    }
  });
  
  // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–µ—Ä–µ–¥–∞—á –±–µ–∑ –ø—Ä–æ–¥–∞–∂
  Object.keys(clientSales).forEach(clientCode => {
    const sales = clientSales[clientCode].sort((a, b) => a.date - b.date);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
    const currentManagerFromDirectory = signalizationData.clientManagerDirectory[clientCode]?.manager;
    
    if (currentManagerFromDirectory && sales.length > 0) {
      const lastSale = sales[sales.length - 1];
      const lastManagerFromSales = lastSale.manager;
      
      // –ï—Å–ª–∏ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ –¥—Ä—É–≥–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä, —á–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂–µ
      if (lastManagerFromSales && 
          currentManagerFromDirectory !== lastManagerFromSales &&
          lastSale.date >= now - periodMs && lastSale.date <= now) { // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–¥–∞–∂–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –µ—â–µ –Ω–µ—Ç
        const existingTransfer = transfers.find(t => 
          t.clientCode === clientCode && 
          t.fromManager === lastManagerFromSales && 
          t.toManager === currentManagerFromDirectory
        );
        
        if (!existingTransfer) {
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥–∞—á—É –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
          transfers.push({
            clientCode,
            clientName: signalizationData.clientNames[clientCode] || clientCode,
            fromManager: lastManagerFromSales,
            toManager: currentManagerFromDirectory,
            transferDate: lastSale.date, // –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏
            prevPeriodRevenue: sales.reduce((sum, s) => sum + s.revenue, 0),
            currentPeriodRevenue: 0, // –ù–µ—Ç –ø—Ä–æ–¥–∞–∂ —Å –Ω–æ–≤—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
            link: signalizationData.clientLinks[clientCode],
            transferType: 'directory' // –¢–∏–ø –ø–µ—Ä–µ–¥–∞—á–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
          });
        }
      }
    }
  });
  
  // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é –ø–µ—Ä–µ–¥–∞—á—ñ (–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
  return transfers.sort((a, b) => b.transferDate - a.transferDate);
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ñ –ø–µ—Ä–µ–¥–∞—á
function renderTransfersTable(transfers) {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
  const transfersWithPriority = transfers.map(transfer => {
    let priority = 0;
    let priorityIcon = '';
    let priorityClass = '';
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∞–¥ (–≤—ã—Ä—É—á–∫–∞ —É–ø–∞–ª–∞ –¥–æ 0)
    if (transfer.currentPeriodRevenue === 0 && transfer.prevPeriodRevenue > 0) {
      priority = 3;
      priorityIcon = 'üî¥';
      priorityClass = 'border-l-4 border-red-500';
    }
    // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–∞–¥ (–≤—ã—Ä—É—á–∫–∞ —É–ø–∞–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 50%)
    else if (transfer.currentPeriodRevenue < transfer.prevPeriodRevenue * 0.5) {
      priority = 2;
      priorityIcon = 'üü°';
      priorityClass = 'border-l-4 border-yellow-500';
    }
    // –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–ø–∞–¥ (–≤—ã—Ä—É—á–∫–∞ —É–ø–∞–ª–∞ –Ω–∞ 20-50%)
    else if (transfer.currentPeriodRevenue < transfer.prevPeriodRevenue * 0.8) {
      priority = 1;
      priorityIcon = 'üü†';
      priorityClass = 'border-l-4 border-orange-500';
    }
    
    return { ...transfer, priority, priorityIcon, priorityClass };
  }).sort((a, b) => b.priority - a.priority); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–≤—ã–º–∏)
  
  return `
    <div class="mb-4">
      <div class="flex justify-between items-center mb-4">
        <div class="flex items-center space-x-2">
          <span class="text-sm text-gray-600">–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:</span>
          <button class="sort-btn px-2 py-1 rounded bg-blue-600 text-white text-xs" data-sort="priority">–ü–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É</button>
          <button class="sort-btn px-2 py-1 rounded bg-gray-300 text-gray-700 text-xs" data-sort="date">–ü–æ –¥–∞—Ç—ñ</button>
          <button class="sort-btn px-2 py-1 rounded bg-gray-300 text-gray-700 text-xs" data-sort="revenue">–ü–æ –≤–∏—Ä—É—á—Ü—ñ</button>
        </div>
        <div class="flex items-center space-x-2 text-xs text-gray-600">
          <span>üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∏–π</span>
          <span>üü° –ó–Ω–∞—á–Ω–∏–π</span>
          <span>üü† –£–º–µ—Ä–µ–Ω–∏–π</span>
        </div>
      </div>
    </div>
    <table class="data-table w-full text-sm">
      <thead>
        <tr class="bg-gray-100">
          <th class="px-2 py-1 text-left w-12">–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç</th>
          <th class="px-2 py-1 text-left w-48">–ö–ª—ñ—î–Ω—Ç</th>
          <th class="px-2 py-1 text-left w-32">–í—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞</th>
          <th class="px-2 py-1 text-left w-32">–î–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞</th>
          <th class="px-2 py-1 text-left w-24">–î–∞—Ç–∞</th>
          <th class="px-2 py-1 text-left w-20">–í–∏—Ä—É—á–∫–∞ (–¥–æ)</th>
          <th class="px-2 py-1 text-left w-20">–í–∏—Ä—É—á–∫–∞ (–ø—ñ—Å–ª—è)</th>
          <th class="px-2 py-1 text-left w-16">–ó–º—ñ–Ω–∞</th>
          <th class="px-2 py-1 text-left w-12">CRM</th>
          <th class="px-2 py-1 text-left w-24">–î—ñ—ó</th>
        </tr>
      </thead>
      <tbody>
        ${transfersWithPriority.map(transfer => {
          const revenueChange = transfer.currentPeriodRevenue - transfer.prevPeriodRevenue;
          const revenueChangePercent = transfer.prevPeriodRevenue > 0 ? 
            ((revenueChange / transfer.prevPeriodRevenue) * 100) : 0;
          
          return `
            <tr class="border-b hover:bg-gray-50 ${transfer.priorityClass}">
              <td class="px-2 py-1">
                <span class="text-sm">${transfer.priorityIcon}</span>
              </td>
              <td class="px-2 py-1">
                <span class="font-medium text-xs">${transfer.clientName}</span>
              </td>
              <td class="px-2 py-1">
                <span class="text-gray-600 text-xs">${transfer.fromManager}</span>
              </td>
              <td class="px-2 py-1">
                <span class="text-blue-600 font-medium text-xs">${transfer.toManager}</span>
                ${transfer.transferType === 'directory' ? 
                  '<span class="text-xs text-gray-500 ml-1">(—Å–ø—Ä)</span>' : 
                  '<span class="text-xs text-green-500 ml-1">(–ø—Ä–æ–¥–∞–∂—ñ)</span>'
                }
              </td>
              <td class="px-2 py-1">
                <span class="text-xs text-gray-500">
                  ${transfer.transferDate.toLocaleDateString('uk-UA')}
                </span>
              </td>
              <td class="px-2 py-1">
                <span class="text-gray-600 text-xs">${transfer.prevPeriodRevenue.toFixed(0)}</span>
              </td>
              <td class="px-2 py-1">
                <span class="text-blue-600 text-xs">${transfer.currentPeriodRevenue.toFixed(0)}</span>
              </td>
              <td class="px-2 py-1">
                <span class="${revenueChange >= 0 ? 'text-green-600' : 'text-red-600'} font-medium text-xs">
                  ${revenueChange >= 0 ? '+' : ''}${revenueChangePercent.toFixed(0)}%
                </span>
              </td>
              <td class="px-2 py-1">
                ${transfer.link ? `<a href="${transfer.link}" target="_blank" class="text-blue-600 underline text-xs">CRM</a>` : '-'}
              </td>
              <td class="px-2 py-1">
                ${renderActionsMenu(transfer.clientCode)}
                <button class='px-1 py-0.5 bg-gray-100 rounded text-black client-detail-btn ml-1 text-xs' data-client-code="${transfer.clientCode}">–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</button>
              </td>
            </tr>
          `;
        }).join('')}
      </tbody>
    </table>
  `;
}

// –ê–Ω–∞–ª—ñ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥–∞—á –∫–ª—ñ—î–Ω—Ç—ñ–≤
function analyzeTransfersStatistics(transfers) {
  if (!transfers || transfers.length === 0) {
    return null;
  }
  
  const now = new Date();
  const periodMs = currentPeriod * 30 * 24 * 60 * 60 * 1000;
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
  const periods = {
    'last_week': { start: new Date(now - 7 * 24 * 60 * 60 * 1000), count: 0, clients: new Set() },
    'last_month': { start: new Date(now - 30 * 24 * 60 * 60 * 1000), count: 0, clients: new Set() },
    'last_quarter': { start: new Date(now - 90 * 24 * 60 * 60 * 1000), count: 0, clients: new Set() },
    'current_period': { start: new Date(now - periodMs), count: 0, clients: new Set() }
  };
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
  const managers = {};
  const departments = {};
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–µ—Ä–µ–¥–∞—á—É
  transfers.forEach(transfer => {
    const transferDate = transfer.transferDate;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    Object.keys(periods).forEach(periodKey => {
      if (transferDate >= periods[periodKey].start) {
        periods[periodKey].count++;
        periods[periodKey].clients.add(transfer.clientCode);
      }
    });
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    if (!managers[transfer.fromManager]) {
      managers[transfer.fromManager] = { sent: 0, received: 0, clients: new Set() };
    }
    if (!managers[transfer.toManager]) {
      managers[transfer.toManager] = { sent: 0, received: 0, clients: new Set() };
    }
    
    managers[transfer.fromManager].sent++;
    managers[transfer.toManager].received++;
    managers[transfer.fromManager].clients.add(transfer.clientCode);
    managers[transfer.toManager].clients.add(transfer.clientCode);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –æ—Ç–¥–µ–ª–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    if (signalizationData.managersData) {
      const fromManagerData = signalizationData.managersData.find(m => m.name === transfer.fromManager);
      const toManagerData = signalizationData.managersData.find(m => m.name === transfer.toManager);
      
      if (fromManagerData?.department) {
        const deptName = typeof fromManagerData.department === 'object' ? fromManagerData.department.name : fromManagerData.department;
        if (!departments[deptName]) {
          departments[deptName] = { sent: 0, received: 0, clients: new Set() };
        }
        departments[deptName].sent++;
        departments[deptName].clients.add(transfer.clientCode);
      }
      
      if (toManagerData?.department) {
        const deptName = typeof toManagerData.department === 'object' ? toManagerData.department.name : toManagerData.department;
        if (!departments[deptName]) {
          departments[deptName] = { sent: 0, received: 0, clients: new Set() };
        }
        departments[deptName].received++;
        departments[deptName].clients.add(transfer.clientCode);
      }
    }
  });
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é (–ø–µ—Ä–µ–¥–∞–Ω–æ vs –æ—Ç–≥—Ä—É–∂–µ–Ω–æ)
  const conversionAnalysis = analyzeTransferConversion(transfers);
  
  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const totalTransfers = transfers.length;
  const uniqueClients = new Set(transfers.map(t => t.clientCode)).size;
  const uniqueManagers = new Set(transfers.flatMap(t => [t.fromManager, t.toManager])).size;
  
  return {
    totalTransfers,
    uniqueClients,
    uniqueManagers,
    periods,
    managers,
    departments,
    conversion: conversionAnalysis
  };
}

// –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–µ—Ä–µ–¥–∞—á
function analyzeTransferConversion(transfers) {
  const conversionData = {
    totalTransfers: transfers.length,
    transferredWithRevenue: 0,
    transferredWithoutRevenue: 0,
    conversionRate: 0,
    averageRevenueAfterTransfer: 0,
    totalRevenueAfterTransfer: 0
  };
  
  transfers.forEach(transfer => {
    if (transfer.currentPeriodRevenue > 0) {
      conversionData.transferredWithRevenue++;
      conversionData.totalRevenueAfterTransfer += transfer.currentPeriodRevenue;
    } else {
      conversionData.transferredWithoutRevenue++;
    }
  });
  
  conversionData.conversionRate = (conversionData.transferredWithRevenue / conversionData.totalTransfers) * 100;
  conversionData.averageRevenueAfterTransfer = conversionData.transferredWithRevenue > 0 ? 
    conversionData.totalRevenueAfterTransfer / conversionData.transferredWithRevenue : 0;
  
  return conversionData;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º –æ—Ç–≥—Ä—É–∑–∫–∏
function calculateTotalRevenueBeforeTransfer(transfers) {
  return transfers.reduce((sum, transfer) => sum + transfer.prevPeriodRevenue, 0);
}

function calculateTotalRevenueAfterTransfer(transfers) {
  return transfers.reduce((sum, transfer) => sum + transfer.currentPeriodRevenue, 0);
}

function calculateRevenueChange(transfers) {
  const after = calculateTotalRevenueAfterTransfer(transfers);
  const before = calculateTotalRevenueBeforeTransfer(transfers);
  return after - before;
}

function calculateManagerRevenueBefore(transfers, manager) {
  return transfers
    .filter(t => t.fromManager === manager)
    .reduce((sum, t) => sum + t.prevPeriodRevenue, 0);
}

function calculateManagerRevenueAfter(transfers, manager) {
  return transfers
    .filter(t => t.toManager === manager)
    .reduce((sum, t) => sum + t.currentPeriodRevenue, 0);
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–µ—Ä–µ–¥–∞—á
function showTransfersStatistics(transfers) {
  const statistics = analyzeTransfersStatistics(transfers);
  if (!statistics) {
    alert('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    return;
  }
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å
  const oldModal = document.getElementById('transfers-statistics-modal');
  if (oldModal) oldModal.remove();
  
  const modal = document.createElement('div');
  modal.id = 'transfers-statistics-modal';
  modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[1000]';
  
  modal.innerHTML = `
    <div class="bg-gray-900 rounded-lg p-6 max-w-5xl w-full mx-4 max-h-[90vh] overflow-y-auto">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-white">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥–∞—á –∫–ª—ñ—î–Ω—Ç—ñ–≤</h2>
        <button class="text-gray-400 hover:text-white text-xl close-modal-btn transition-colors">&times;</button>
      </div>
      
      <!-- –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞ -->
      <div class="mb-6">
        <div class="flex items-center space-x-4 mb-4">
          <div class="flex items-center space-x-2">
            <label class="text-gray-300 text-sm">–ú—ñ—Å—è—Ü—å:</label>
            <select class="month-select bg-gray-800 text-white border border-gray-600 rounded px-3 py-1 text-sm">
              <option value="1">–°—ñ—á–µ–Ω—å</option>
              <option value="2">–õ—é—Ç–∏–π</option>
              <option value="3">–ë–µ—Ä–µ–∑–µ–Ω—å</option>
              <option value="4">–ö–≤—ñ—Ç–µ–Ω—å</option>
              <option value="5">–¢—Ä–∞–≤–µ–Ω—å</option>
              <option value="6">–ß–µ—Ä–≤–µ–Ω—å</option>
              <option value="7">–õ–∏–ø–µ–Ω—å</option>
              <option value="8">–°–µ—Ä–ø–µ–Ω—å</option>
              <option value="9">–í–µ—Ä–µ—Å–µ–Ω—å</option>
              <option value="10">–ñ–æ–≤—Ç–µ–Ω—å</option>
              <option value="11">–õ–∏—Å—Ç–æ–ø–∞–¥</option>
              <option value="12">–ì—Ä—É–¥–µ–Ω—å</option>
            </select>
          </div>
          <div class="flex items-center space-x-2">
            <label class="text-gray-300 text-sm">–†—ñ–∫:</label>
            <select class="year-select bg-gray-800 text-white border border-gray-600 rounded px-3 py-1 text-sm">
              ${generateYearOptions()}
            </select>
          </div>
          <button class="apply-date-filter px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 transition-colors">
            –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏
          </button>
        </div>
      </div>
      
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- –ö–æ–Ω–≤–µ—Ä—Å–∏—è -->
        <div class="bg-gray-800 p-4 rounded-lg border border-gray-700">
          <h3 class="text-lg font-semibold text-blue-400 mb-3">–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–µ—Ä–µ–¥–∞—á</h3>
          <div class="space-y-2">
            <div class="flex justify-between">
              <span class="text-gray-300">–í—Å—å–æ–≥–æ –ø–µ—Ä–µ–¥–∞—á:</span>
              <span class="font-semibold text-white">${statistics.conversion.totalTransfers}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-300">–ó –≤–∏—Ä—É—á–∫–æ—é:</span>
              <span class="font-semibold text-green-400">${statistics.conversion.transferredWithRevenue}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-300">–ë–µ–∑ –≤–∏—Ä—É—á–∫–∏:</span>
              <span class="font-semibold text-red-400">${statistics.conversion.transferredWithoutRevenue}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-300">–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</span>
              <span class="font-semibold text-blue-400">${statistics.conversion.conversionRate.toFixed(1)}%</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-300">–°–µ—Ä–µ–¥–Ω—è –≤–∏—Ä—É—á–∫–∞:</span>
              <span class="font-semibold text-white">${statistics.conversion.averageRevenueAfterTransfer.toFixed(2)} –≥—Ä–Ω</span>
            </div>
          </div>
        </div>
        
        <!-- –ü–æ –ø–µ—Ä–∏–æ–¥–∞–º -->
        <div class="bg-gray-800 p-4 rounded-lg border border-gray-700">
          <h3 class="text-lg font-semibold text-green-400 mb-3">–ü–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö</h3>
          <div class="space-y-2">
            <div class="flex justify-between">
              <span class="text-gray-300">–û—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å:</span>
              <span class="font-semibold text-white">${statistics.periods.last_week.count} (${statistics.periods.last_week.clients.size} –∫–ª—ñ—î–Ω—Ç—ñ–≤)</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-300">–û—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å:</span>
              <span class="font-semibold text-white">${statistics.periods.last_month.count} (${statistics.periods.last_month.clients.size} –∫–ª—ñ—î–Ω—Ç—ñ–≤)</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-300">–û—Å—Ç–∞–Ω–Ω—ñ–π –∫–≤–∞—Ä—Ç–∞–ª:</span>
              <span class="font-semibold text-white">${statistics.periods.last_quarter.count} (${statistics.periods.last_quarter.clients.size} –∫–ª—ñ—î–Ω—Ç—ñ–≤)</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-300">–ü–æ—Ç–æ—á–Ω–∏–π –ø–µ—Ä—ñ–æ–¥:</span>
              <span class="font-semibold text-white">${statistics.periods.current_period.count} (${statistics.periods.current_period.clients.size} –∫–ª—ñ—î–Ω—Ç—ñ–≤)</span>
            </div>
          </div>
        </div>
      </div>
      
      <!-- –°—É–º–º—ã –æ—Ç–≥—Ä—É–∑–∫–∏ -->
      <div class="mt-6 bg-gray-800 p-4 rounded-lg border border-gray-700">
        <h3 class="text-lg font-semibold text-yellow-400 mb-3">–°—É–º–º–∏ –≤—ñ–¥–≥—Ä—É–∑–∫–∏</h3>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="text-center">
            <div class="text-2xl font-bold text-red-400">${calculateTotalRevenueBeforeTransfer(transfers).toFixed(2)} –≥—Ä–Ω</div>
            <div class="text-sm text-gray-400">–î–æ –ø–µ—Ä–µ–¥–∞—á—ñ</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-green-400">${calculateTotalRevenueAfterTransfer(transfers).toFixed(2)} –≥—Ä–Ω</div>
            <div class="text-sm text-gray-400">–ü—ñ—Å–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold ${calculateRevenueChange(transfers) >= 0 ? 'text-green-400' : 'text-red-400'}">
              ${calculateRevenueChange(transfers) >= 0 ? '+' : ''}${calculateRevenueChange(transfers).toFixed(2)} –≥—Ä–Ω
            </div>
            <div class="text-sm text-gray-400">–ó–º—ñ–Ω–∞</div>
          </div>
        </div>
      </div>
      
      <!-- –ü–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º -->
      <div class="mt-6">
        <h3 class="text-lg font-semibold text-white mb-3">–ü–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö</h3>
        <div class="overflow-x-auto">
          <table class="min-w-full text-sm">
            <thead class="bg-gray-700">
              <tr>
                <th class="px-4 py-2 text-left text-gray-300">–ú–µ–Ω–µ–¥–∂–µ—Ä</th>
                <th class="px-4 py-2 text-left text-gray-300">–ü–µ—Ä–µ–¥–∞–Ω–æ</th>
                <th class="px-4 py-2 text-left text-gray-300">–û—Ç—Ä–∏–º–∞–Ω–æ</th>
                <th class="px-4 py-2 text-left text-gray-300">–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤</th>
                <th class="px-4 py-2 text-left text-gray-300">–°—É–º–∞ –¥–æ –ø–µ—Ä–µ–¥–∞—á—ñ</th>
                <th class="px-4 py-2 text-left text-gray-300">–°—É–º–∞ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ</th>
              </tr>
            </thead>
            <tbody>
              ${Object.entries(statistics.managers).map(([manager, data]) => {
                const managerTransfers = transfers.filter(t => t.fromManager === manager || t.toManager === manager);
                const revenueBefore = calculateManagerRevenueBefore(managerTransfers, manager);
                const revenueAfter = calculateManagerRevenueAfter(managerTransfers, manager);
                return `
                  <tr class="border-b border-gray-700">
                    <td class="px-4 py-2 font-medium text-white">${manager}</td>
                    <td class="px-4 py-2 text-red-400">${data.sent}</td>
                    <td class="px-4 py-2 text-green-400">${data.received}</td>
                    <td class="px-4 py-2 text-gray-300">${data.clients.size}</td>
                    <td class="px-4 py-2 text-gray-300">${revenueBefore.toFixed(2)} –≥—Ä–Ω</td>
                    <td class="px-4 py-2 text-gray-300">${revenueAfter.toFixed(2)} –≥—Ä–Ω</td>
                  </tr>
                `;
              }).join('')}
            </tbody>
          </table>
        </div>
      </div>
      
      ${Object.keys(statistics.departments).length > 0 ? `
        <!-- –ü–æ –æ—Ç–¥–µ–ª–∞–º -->
        <div class="mt-6">
          <h3 class="text-lg font-semibold text-white mb-3">–ü–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö</h3>
          <div class="overflow-x-auto">
            <table class="min-w-full text-sm">
              <thead class="bg-gray-700">
                <tr>
                  <th class="px-4 py-2 text-left text-gray-300">–í—ñ–¥–¥—ñ–ª</th>
                  <th class="px-4 py-2 text-left text-gray-300">–ü–µ—Ä–µ–¥–∞–Ω–æ</th>
                  <th class="px-4 py-2 text-left text-gray-300">–û—Ç—Ä–∏–º–∞–Ω–æ</th>
                  <th class="px-4 py-2 text-left text-gray-300">–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤</th>
                </tr>
              </thead>
              <tbody>
                ${Object.entries(statistics.departments).map(([department, data]) => `
                  <tr class="border-b border-gray-700">
                    <td class="px-4 py-2 font-medium text-white">${department}</td>
                    <td class="px-4 py-2 text-red-400">${data.sent}</td>
                    <td class="px-4 py-2 text-green-400">${data.received}</td>
                    <td class="px-4 py-2 text-gray-300">${data.clients.size}</td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>
        </div>
      ` : ''}
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
  const closeBtn = modal.querySelector('.close-modal-btn');
  const close = () => modal.remove();
  
  closeBtn.addEventListener('click', close);
  modal.addEventListener('click', (e) => {
    if (e.target === modal) close();
  });
  
  document.addEventListener('keydown', function escHandler(e) {
    if (e.key === 'Escape') {
      close();
      document.removeEventListener('keydown', escHandler);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const applyDateFilter = modal.querySelector('.apply-date-filter');
  const monthSelect = modal.querySelector('.month-select');
  const yearSelect = modal.querySelector('.year-select');
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const currentDate = new Date();
  monthSelect.value = currentDate.getMonth() + 1;
  yearSelect.value = currentDate.getFullYear();
  
  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
  const applyFilter = () => {
    const selectedMonth = parseInt(monthSelect.value);
    const selectedYear = parseInt(yearSelect.value);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Å—è—Ü—É –∏ –≥–æ–¥—É
    const filteredTransfers = transfers.filter(transfer => {
      const transferDate = transfer.transferDate;
      const transferMonth = transferDate.getMonth() + 1;
      const transferYear = transferDate.getFullYear();
      return transferMonth === selectedMonth && transferYear === selectedYear;
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    updateStatisticsForMonthAndYear(filteredTransfers, selectedMonth, selectedYear, transfers);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–±—Ä–æ—Å)
    setTimeout(() => {
      monthSelect.value = selectedMonth;
      yearSelect.value = selectedYear;
    }, 0);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  applyDateFilter.addEventListener('click', applyFilter);
  
  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ Enter –≤ —Å–µ–ª–µ–∫—Ç–∞—Ö
  monthSelect.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      applyFilter();
    }
  });
  
  yearSelect.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      applyFilter();
    }
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
function updateStatisticsForMonthAndYear(filteredTransfers, selectedMonth, selectedYear, allTransfers) {
  if (filteredTransfers.length === 0) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    const contentArea = document.querySelector('#transfers-statistics-modal .grid');
    if (contentArea) {
      contentArea.innerHTML = `
        <div class="col-span-2 text-center py-8">
          <div class="text-gray-400 text-lg mb-2">–ù–µ–º–∞—î –ø–µ—Ä–µ–¥–∞—á —É ${getMonthName(selectedMonth)} ${selectedYear}</div>
          <div class="text-gray-500 text-sm">–í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>
        </div>
      `;
    }
    return;
  }
  
  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞—á
  const monthStatistics = analyzeTransfersStatistics(filteredTransfers);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é
  const conversionSection = document.querySelector('#transfers-statistics-modal .bg-gray-800:first-of-type');
  if (conversionSection) {
    conversionSection.innerHTML = `
      <h3 class="text-lg font-semibold text-blue-400 mb-3">–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–µ—Ä–µ–¥–∞—á (${getMonthName(selectedMonth)} ${selectedYear})</h3>
      <div class="space-y-2">
        <div class="flex justify-between">
          <span class="text-gray-300">–í—Å—å–æ–≥–æ –ø–µ—Ä–µ–¥–∞—á:</span>
          <span class="font-semibold text-white">${monthStatistics.conversion.totalTransfers}</span>
        </div>
        <div class="flex justify-between">
          <span class="text-gray-300">–ó –≤–∏—Ä—É—á–∫–æ—é:</span>
          <span class="font-semibold text-green-400">${monthStatistics.conversion.transferredWithRevenue}</span>
        </div>
        <div class="flex justify-between">
          <span class="text-gray-300">–ë–µ–∑ –≤–∏—Ä—É—á–∫–∏:</span>
          <span class="font-semibold text-red-400">${monthStatistics.conversion.transferredWithoutRevenue}</span>
        </div>
        <div class="flex justify-between">
          <span class="text-gray-300">–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</span>
          <span class="font-semibold text-blue-400">${monthStatistics.conversion.conversionRate.toFixed(1)}%</span>
        </div>
        <div class="flex justify-between">
          <span class="text-gray-300">–°–µ—Ä–µ–¥–Ω—è –≤–∏—Ä—É—á–∫–∞:</span>
          <span class="font-semibold text-white">${monthStatistics.conversion.averageRevenueAfterTransfer.toFixed(2)} –≥—Ä–Ω</span>
        </div>
      </div>
    `;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
  const periodsSection = document.querySelector('#transfers-statistics-modal .bg-gray-800:nth-of-type(2)');
  if (periodsSection) {
    periodsSection.innerHTML = `
      <h3 class="text-lg font-semibold text-green-400 mb-3">–ü–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö (${getMonthName(selectedMonth)} ${selectedYear})</h3>
      <div class="space-y-2">
        <div class="flex justify-between">
          <span class="text-gray-300">–û—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å:</span>
          <span class="font-semibold text-white">${monthStatistics.periods.last_week.count} (${monthStatistics.periods.last_week.clients.size} –∫–ª—ñ—î–Ω—Ç—ñ–≤)</span>
        </div>
        <div class="flex justify-between">
          <span class="text-gray-300">–û—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å:</span>
          <span class="font-semibold text-white">${monthStatistics.periods.last_month.count} (${monthStatistics.periods.last_month.clients.size} –∫–ª—ñ—î–Ω—Ç—ñ–≤)</span>
        </div>
        <div class="flex justify-between">
          <span class="text-gray-300">–û—Å—Ç–∞–Ω–Ω—ñ–π –∫–≤–∞—Ä—Ç–∞–ª:</span>
          <span class="font-semibold text-white">${monthStatistics.periods.last_quarter.count} (${monthStatistics.periods.last_quarter.clients.size} –∫–ª—ñ—î–Ω—Ç—ñ–≤)</span>
        </div>
        <div class="flex justify-between">
          <span class="text-gray-300">–ü–æ—Ç–æ—á–Ω–∏–π –ø–µ—Ä—ñ–æ–¥:</span>
          <span class="font-semibold text-white">${monthStatistics.periods.current_period.count} (${monthStatistics.periods.current_period.clients.size} –∫–ª—ñ—î–Ω—Ç—ñ–≤)</span>
        </div>
      </div>
    `;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—ã –æ—Ç–≥—Ä—É–∑–∫–∏
  const revenueSection = document.querySelector('#transfers-statistics-modal .bg-gray-800:nth-of-type(3)');
  if (revenueSection) {
    revenueSection.innerHTML = `
      <h3 class="text-lg font-semibold text-yellow-400 mb-3">–°—É–º–º–∏ –≤—ñ–¥–≥—Ä—É–∑–∫–∏ (${getMonthName(selectedMonth)} ${selectedYear})</h3>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div class="text-center">
          <div class="text-2xl font-bold text-red-400">${calculateTotalRevenueBeforeTransfer(filteredTransfers).toFixed(2)} –≥—Ä–Ω</div>
          <div class="text-sm text-gray-400">–î–æ –ø–µ—Ä–µ–¥–∞—á—ñ</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-green-400">${calculateTotalRevenueAfterTransfer(filteredTransfers).toFixed(2)} –≥—Ä–Ω</div>
          <div class="text-sm text-gray-400">–ü—ñ—Å–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold ${calculateRevenueChange(filteredTransfers) >= 0 ? 'text-green-400' : 'text-red-400'}">
            ${calculateRevenueChange(filteredTransfers) >= 0 ? '+' : ''}${calculateRevenueChange(filteredTransfers).toFixed(2)} –≥—Ä–Ω
          </div>
          <div class="text-sm text-gray-400">–ó–º—ñ–Ω–∞</div>
        </div>
      </div>
    `;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
  const managersSection = document.querySelector('#transfers-statistics-modal .overflow-x-auto');
  if (managersSection && monthStatistics.managers) {
    const managersTable = managersSection.querySelector('tbody');
    if (managersTable) {
      managersTable.innerHTML = Object.entries(monthStatistics.managers).map(([manager, data]) => {
        const managerTransfers = filteredTransfers.filter(t => t.fromManager === manager || t.toManager === manager);
        const revenueBefore = calculateManagerRevenueBefore(managerTransfers, manager);
        const revenueAfter = calculateManagerRevenueAfter(managerTransfers, manager);
        return `
          <tr class="border-b border-gray-700">
            <td class="px-4 py-2 font-medium text-white">${manager}</td>
            <td class="px-4 py-2 text-red-400">${data.sent}</td>
            <td class="px-4 py-2 text-green-400">${data.received}</td>
            <td class="px-4 py-2 text-gray-300">${data.clients.size}</td>
            <td class="px-4 py-2 text-gray-300">${revenueBefore.toFixed(2)} –≥—Ä–Ω</td>
            <td class="px-4 py-2 text-gray-300">${revenueAfter.toFixed(2)} –≥—Ä–Ω</td>
          </tr>
        `;
      }).join('');
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—Ç–¥–µ–ª–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const departmentsSection = document.querySelector('#transfers-statistics-modal .mt-6:last-child');
  if (departmentsSection && monthStatistics.departments) {
    const departmentsTable = departmentsSection.querySelector('tbody');
    if (departmentsTable) {
      departmentsTable.innerHTML = Object.entries(monthStatistics.departments).map(([department, data]) => `
        <tr class="border-b border-gray-700">
          <td class="px-4 py-2 font-medium text-white">${department}</td>
          <td class="px-4 py-2 text-red-400">${data.sent}</td>
          <td class="px-4 py-2 text-green-400">${data.received}</td>
          <td class="px-4 py-2 text-gray-300">${data.clients.size}</td>
        </tr>
      `).join('');
    }
  }
  
  // –ü–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const applyDateFilter = document.querySelector('#transfers-statistics-modal .apply-date-filter');
  const monthSelect = document.querySelector('#transfers-statistics-modal .month-select');
  const yearSelect = document.querySelector('#transfers-statistics-modal .year-select');
  
  if (applyDateFilter && monthSelect && yearSelect) {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    const newApplyFilter = applyDateFilter.cloneNode(true);
    applyDateFilter.parentNode.replaceChild(newApplyFilter, applyDateFilter);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    newApplyFilter.addEventListener('click', () => {
      const selectedMonth = parseInt(monthSelect.value);
      const selectedYear = parseInt(yearSelect.value);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Å—è—Ü—É –∏ –≥–æ–¥—É
      const newFilteredTransfers = allTransfers.filter(transfer => {
        const transferDate = transfer.transferDate;
        const transferMonth = transferDate.getMonth() + 1;
        const transferYear = transferDate.getFullYear();
        return transferMonth === selectedMonth && transferYear === selectedYear;
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
      updateStatisticsForMonthAndYear(newFilteredTransfers, selectedMonth, selectedYear, allTransfers);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–±—Ä–æ—Å)
      setTimeout(() => {
        monthSelect.value = selectedMonth;
        yearSelect.value = selectedYear;
      }, 0);
    });
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞
function getMonthName(monthNumber) {
  const months = [
    '–°—ñ—á–µ–Ω—å', '–õ—é—Ç–∏–π', '–ë–µ—Ä–µ–∑–µ–Ω—å', '–ö–≤—ñ—Ç–µ–Ω—å', '–¢—Ä–∞–≤–µ–Ω—å', '–ß–µ—Ä–≤–µ–Ω—å',
    '–õ–∏–ø–µ–Ω—å', '–°–µ—Ä–ø–µ–Ω—å', '–í–µ—Ä–µ—Å–µ–Ω—å', '–ñ–æ–≤—Ç–µ–Ω—å', '–õ–∏—Å—Ç–æ–ø–∞–¥', '–ì—Ä—É–¥–µ–Ω—å'
  ];
  return months[monthNumber - 1];
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞
function generateYearOptions() {
  const currentYear = new Date().getFullYear();
  let options = '';
  for (let year = currentYear; year >= currentYear - 3; year--) {
    options += `<option value="${year}">${year}</option>`;
  }
  return options;
}

// –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ–¥–∞—á
function sortTransfersByPriority(transfers) {
  return transfers.map(transfer => {
    let priority = 0;
    if (transfer.currentPeriodRevenue === 0 && transfer.prevPeriodRevenue > 0) {
      priority = 3;
    } else if (transfer.currentPeriodRevenue < transfer.prevPeriodRevenue * 0.5) {
      priority = 2;
    } else if (transfer.currentPeriodRevenue < transfer.prevPeriodRevenue * 0.8) {
      priority = 1;
    }
    return { ...transfer, priority };
  }).sort((a, b) => b.priority - a.priority);
}

function sortTransfersByDate(transfers) {
  return [...transfers].sort((a, b) => b.transferDate - a.transferDate);
}

function sortTransfersByRevenue(transfers) {
  return [...transfers].sort((a, b) => {
    const aChange = a.currentPeriodRevenue - a.prevPeriodRevenue;
    const bChange = b.currentPeriodRevenue - b.prevPeriodRevenue;
    return aChange - bChange; // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã—Ä—É—á–∫–∏
  });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á
function setupTransfersSortHandlers(transfers) {
  const sortBtns = document.querySelectorAll('.sort-btn');
  sortBtns.forEach(btn => {
    btn.addEventListener('click', (e) => {
      const sortType = e.currentTarget.dataset.sort;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
      sortBtns.forEach(b => {
        b.classList.remove('bg-blue-600', 'text-white');
        b.classList.add('bg-gray-300', 'text-gray-700');
      });
      e.currentTarget.classList.remove('bg-gray-300', 'text-gray-700');
      e.currentTarget.classList.add('bg-blue-600', 'text-white');
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞—á–∏
      let sortedTransfers = [...transfers];
      switch(sortType) {
        case 'priority':
          sortedTransfers = sortTransfersByPriority(transfers);
          break;
        case 'date':
          sortedTransfers = sortTransfersByDate(transfers);
          break;
        case 'revenue':
          sortedTransfers = sortTransfersByRevenue(transfers);
          break;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
      const tableContainer = document.querySelector('.table-container');
      if (tableContainer) {
        tableContainer.innerHTML = renderTransfersTable(sortedTransfers);
        // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º setupTransfersSortHandlers –ø–æ–≤—Ç–æ—Ä–Ω–æ - —ç—Ç–æ —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∫—É—Ä—Å–∏—é
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–Ω–æ–ø–∫–∞–º –∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
      }
    });
  });
}

// –ü–æ–∫–∞–∑ —Å—Ç–∞–Ω—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
function showLoadingState() {
  mainContainer.innerHTML = `
    <div class="loading-container">
      <div class="loading-spinner"></div>
      <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó...</p>
    </div>
  `;
}

// –ü–æ–∫–∞–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
function showMainContent() {
  // –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∂–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
}

// –ü–æ–∫–∞–∑ —Å—Ç–∞–Ω—É –ø–æ–º–∏–ª–∫–∏
function showErrorState(message) {
  mainContainer.innerHTML = `
    <div class="error-container">
      <i class="fas fa-exclamation-circle"></i>
      <h3>–ü–æ–º–∏–ª–∫–∞</h3>
      <p>${message}</p>
      <button class="reload-btn">–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É</button>
    </div>
  `;
}

// –°–∏—Å—Ç–µ–º–∞ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
function generateAIRecommendations() {
  const recommendations = [];
  const now = new Date();
  
  // –û—Ç—Ä–∏–º—É—î–º–æ userAccess –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
  const userAccess = getUserAccess();
  
  // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ —ñ –≥–µ–Ω–µ—Ä—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤)
  Object.keys(signalizationData.clientActionsData || {}).forEach(clientCode => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ –∫–ª—ñ—î–Ω—Ç–∞
    if (!hasAccessToClient(clientCode, userAccess)) {
      return; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –±–µ–∑ –¥–æ—Å—Ç—É–ø—É
    }
    
    const clientData = signalizationData.clientActionsData[clientCode];
    if (!clientData || !clientData.actions) return;
    
    const clientName = getClientName(clientCode, clientCode);
    const clientInfo = signalizationData.clientManagerDirectory[clientCode];
    const managerName = clientInfo?.manager || '–ù–µ–≤—ñ–¥–æ–º–∏–π';
    
    const actions = [...clientData.actions].sort((a, b) => {
      const dateA = a && a.createdAt ? new Date(a.createdAt) : new Date(0);
      const dateB = b && b.createdAt ? new Date(b.createdAt) : new Date(0);
      return dateB - dateA;
    });
    const lastAction = actions[0];
    const firstAction = actions[actions.length - 1];
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥—ñ—ó —Ç–∞ —á–∏ –º–∞—é—Ç—å –≤–æ–Ω–∏ createdAt
    if (!actions.length || !firstAction || !firstAction.createdAt) {
      return; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –±–µ–∑ –¥—ñ–π –∞–±–æ –±–µ–∑ –¥–∞—Ç
    }
    
    const workingDays = Math.floor((now - new Date(firstAction.createdAt)) / (1000 * 60 * 60 * 24));
    const status = clientData.status || 'new';
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è 1: –î–æ–≤–≥–∞ —Ä–æ–±–æ—Ç–∞ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    if (workingDays > 21 && status === 'in_progress' && actions.length >= 3) {
      const callActions = actions.filter(a => a.type === 'call').length;
      const meetingActions = actions.filter(a => a.type === 'meeting').length;
      
      if (meetingActions === 0 && callActions >= 2) {
        recommendations.push({
          type: 'action_suggestion',
          priority: 'high',
          clientCode: clientCode,
          clientName: clientName,
          manager: managerName,
          title: '–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –æ—Å–æ–±–∏—Å—Ç–∞ –∑—É—Å—Ç—Ä—ñ—á',
          description: `–ó –∫–ª—ñ—î–Ω—Ç–æ–º ${clientName} –ø—Ä–∞—Ü—é—î–º–æ ${workingDays} –¥–Ω—ñ–≤, –±—É–ª–æ ${callActions} –¥–∑–≤—ñ–Ω–∫—ñ–≤, –∞–ª–µ –∂–æ–¥–Ω–æ—ó –∑—É—Å—Ç—Ä—ñ—á—ñ. –ß–∞—Å –¥–ª—è –æ—Å–æ–±–∏—Å—Ç–æ—ó –∑—É—Å—Ç—Ä—ñ—á—ñ.`,
          actionType: 'meeting',
          reasoning: '–î–æ–≤–≥–∞ —Ä–æ–±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—É, –ø–æ—Ç—Ä—ñ–±–µ–Ω –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–æ–Ω—Ç–∞–∫—Ç'
        });
      }
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è 2: –ë–∞–≥–∞—Ç–æ –¥–∑–≤—ñ–Ω–∫—ñ–≤ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É - –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ö–ü
    if (status === 'in_progress') {
      const callActions = actions.filter(a => a.type === 'call').length;
      const proposalActions = actions.filter(a => a.type === 'commercial_proposal').length;
      
      if (callActions >= 3 && proposalActions === 0) {
        recommendations.push({
          type: 'action_suggestion',
          priority: 'medium',
          clientCode: clientCode,
          clientName: clientName,
          manager: managerName,
          title: '–ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é',
          description: `–ü—ñ—Å–ª—è ${callActions} –¥–∑–≤—ñ–Ω–∫—ñ–≤ –∑ ${clientName} –≤–∞—Ä—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ö–ü –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∞—Ü—ñ—ó –ø–æ—Ç—Ä–µ–±.`,
          actionType: 'commercial_proposal',
          reasoning: '–ë–∞–≥–∞—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó'
        });
      }
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è 3: –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –¥—ñ—ó
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const actionsWithDates = actions.filter(action => 
      action.nextActionDate && action.status !== 'cancelled'
    );
    
    if (actionsWithDates.length > 0) {
      const latestAction = actionsWithDates[0];
      const actionDate = new Date(latestAction.nextActionDate);
      
      if (actionDate < today) {
        const daysPastDue = Math.floor((today - actionDate) / (1000 * 60 * 60 * 24));
        
        recommendations.push({
          type: 'urgent_action',
          priority: daysPastDue > 7 ? 'critical' : 'high',
          clientCode: clientCode,
          clientName: clientName,
          manager: managerName,
          title: `–¢–µ—Ä–º—ñ–Ω–æ–≤–∞ –¥—ñ—è: ${latestAction.nextAction}`,
          description: `–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ ${latestAction.nextAction} –∑ ${clientName} –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ –Ω–∞ ${daysPastDue} –¥–Ω—ñ–≤!`,
          actionType: latestAction.type,
          reasoning: `–ü—Ä–æ—Å—Ç—Ä–æ—á–∫–∞ ${daysPastDue} –¥–Ω—ñ–≤`
        });
      }
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è 4: –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–æ—Ä–æ
    if (clientData.potentialOrderDate) {
      const potentialDate = new Date(clientData.potentialOrderDate);
      const daysUntil = Math.floor((potentialDate - today) / (1000 * 60 * 60 * 24));
      
      if (daysUntil >= 0 && daysUntil <= 3) {
        recommendations.push({
          type: 'opportunity',
          priority: 'high',
          clientCode: clientCode,
          clientName: clientName,
          manager: managerName,
          title: '–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±–ª–∏–∑—å–∫–æ!',
          description: `${clientName} –ø–ª–∞–Ω—É–≤–∞–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ ${clientData.potentialOrderDate} (${daysUntil === 0 ? '—Å—å–æ–≥–æ–¥–Ω—ñ' : `—á–µ—Ä–µ–∑ ${daysUntil} –¥–Ω—ñ–≤`})`,
          actionType: 'call',
          reasoning: '–ß–∞—Å –∑–∞–∫—Ä–∏–≤–∞—Ç–∏ —É–≥–æ–¥—É'
        });
      }
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è 5: –°—Ç–∞—Ç—É—Å "–Ω–æ–≤–∏–π" –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ
    if (status === 'new' && workingDays > 3) {
      recommendations.push({
        type: 'status_issue',
        priority: 'medium',
        clientCode: clientCode,
        clientName: clientName,
        manager: managerName,
        title: '–û–Ω–æ–≤—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª—ñ—î–Ω—Ç–∞',
        description: `${clientName} –º–∞—î —Å—Ç–∞—Ç—É—Å "–Ω–æ–≤–∏–π" –≤–∂–µ ${workingDays} –¥–Ω—ñ–≤. –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó —Ä–æ–±–æ—Ç–∏.`,
        actionType: 'status_update',
        reasoning: '–ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–≤–∞–∂–∞—î –∞–Ω–∞–ª—ñ—Ç–∏—Ü—ñ'
      });
    }
  });
  
  // –°–æ—Ä—Ç—É—î–º–æ –ø–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
  const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
  recommendations.sort((a, b) => priorityOrder[b.priority] - priorityOrder[a.priority]);
  
  aiRecommendations = recommendations;
  lastRecommendationUpdate = now;
  
  return recommendations;
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—ñ–¥–∂–µ—Ç–∞ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
function renderAIRecommendationsWidget() {
  if (!aiRecommendations.length) {
    generateAIRecommendations();
  }
  
  // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–æ–ø-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
  const topRecommendations = aiRecommendations.slice(0, 5);
  
  if (topRecommendations.length === 0) {
    return `
      <div class="bg-green-900/20 border border-green-600 rounded-lg p-4">
        <div class="flex items-center gap-2 mb-2">
          <span class="text-green-400">ü§ñ</span>
          <span class="font-medium text-green-200">AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</span>
        </div>
        <p class="text-sm text-green-300">–í—ñ–¥–º—ñ–Ω–Ω–æ! –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ! üéâ</p>
      </div>
    `;
  }
  
  const criticalCount = topRecommendations.filter(r => r.priority === 'critical').length;
  const highCount = topRecommendations.filter(r => r.priority === 'high').length;
  
  return `
    <div class="bg-gray-800 rounded-lg p-4 border border-gray-700">
      <div class="flex items-center justify-between mb-4">
        <div class="flex items-center gap-2">
          <span class="text-blue-400 text-xl">ü§ñ</span>
          <div>
            <h3 class="text-lg font-semibold text-white">AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</h3>
            <p class="text-sm text-gray-400">–†–æ–∑—É–º–Ω—ñ –ø–æ—Ä–∞–¥–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏</p>
          </div>
        </div>
        <div class="flex items-center gap-2">
          <button onclick="generateAIRecommendations(); renderDashboard();" 
                  class="px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700">
            –û–Ω–æ–≤–∏—Ç–∏
          </button>
          <div class="text-xs text-gray-400">
            ${criticalCount > 0 ? `${criticalCount} –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö` : ''}
            ${highCount > 0 ? `${highCount} –≤–∞–∂–ª–∏–≤–∏—Ö` : ''}
          </div>
        </div>
      </div>
      
      <div class="space-y-3">
        ${topRecommendations.map(rec => {
          const priorityColors = {
            critical: 'border-red-500 bg-red-900/30 text-red-200',
            high: 'border-orange-500 bg-orange-900/30 text-orange-200',
            medium: 'border-yellow-500 bg-yellow-900/30 text-yellow-200',
            low: 'border-gray-500 bg-gray-900/30 text-gray-200'
          };
          
          const priorityIcons = {
            critical: 'üö®',
            high: '‚ö†Ô∏è',
            medium: 'üí°',
            low: '‚ÑπÔ∏è'
          };
          
          return `
            <div class="border rounded p-3 text-sm ${priorityColors[rec.priority]}">
              <div class="flex items-start justify-between mb-2">
                <div class="flex items-center gap-2">
                  <span>${priorityIcons[rec.priority]}</span>
                  <span class="font-medium">${rec.title}</span>
                </div>
                <button onclick="showClientDetail('${rec.clientCode}')" 
                        class="text-blue-400 hover:text-blue-300 underline text-xs">
                  –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ ‚Üí
                </button>
              </div>
              <p class="mb-2 text-xs">${rec.description}</p>
              <div class="flex items-center justify-between text-xs opacity-75">
                <span>${rec.manager}</span>
                <span>${rec.reasoning}</span>
              </div>
            </div>
          `;
        }).join('')}
      </div>
      
      ${aiRecommendations.length > 5 ? `
        <div class="mt-3 text-center">
          <button onclick="showAllAIRecommendations()" 
                  class="text-blue-400 hover:text-blue-300 text-sm underline">
            –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ ${aiRecommendations.length} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
          </button>
        </div>
      ` : ''}
    </div>
  `;
}

// –ü–æ–∫–∞–∑ –≤—Å—ñ—Ö AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
function showAllAIRecommendations() {
  const modal = document.createElement('div');
  modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[1000]';
  
  modal.innerHTML = `
    <div class="bg-gray-900 rounded-lg p-6 max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-white">–í—Å—ñ AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</h2>
        <button class="text-gray-400 hover:text-white text-xl close-modal-btn">&times;</button>
      </div>
      
      <div class="space-y-4">
        ${aiRecommendations.map(rec => {
          const priorityColors = {
            critical: 'border-red-500 bg-red-900/30 text-red-200',
            high: 'border-orange-500 bg-orange-900/30 text-orange-200',
            medium: 'border-yellow-500 bg-yellow-900/30 text-yellow-200',
            low: 'border-gray-500 bg-gray-900/30 text-gray-200'
          };
          
          const priorityIcons = {
            critical: 'üö®',
            high: '‚ö†Ô∏è',
            medium: 'üí°',
            low: '‚ÑπÔ∏è'
          };
          
          return `
            <div class="border rounded p-4 ${priorityColors[rec.priority]}">
              <div class="flex items-start justify-between mb-3">
                <div class="flex items-center gap-2">
                  <span class="text-lg">${priorityIcons[rec.priority]}</span>
                  <span class="font-medium text-lg">${rec.title}</span>
                </div>
                <button onclick="showClientDetail('${rec.clientCode}')" 
                        class="text-blue-400 hover:text-blue-300 underline">
                  –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ ‚Üí
                </button>
              </div>
              <p class="mb-3">${rec.description}</p>
              <div class="flex items-center justify-between text-sm opacity-75">
                <span>–ú–µ–Ω–µ–¥–∂–µ—Ä: ${rec.manager}</span>
                <span>–ü—Ä–∏—á–∏–Ω–∞: ${rec.reasoning}</span>
              </div>
            </div>
          `;
        }).join('')}
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // –û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è
  const closeBtn = modal.querySelector('.close-modal-btn');
  const close = () => modal.remove();
  
  closeBtn.addEventListener('click', close);
  modal.addEventListener('click', (e) => {
    if (e.target === modal) close();
  });
  
  document.addEventListener('keydown', function escHandler(e) {
    if (e.key === 'Escape') {
      close();
      document.removeEventListener('keydown', escHandler);
    }
  });
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
window.generateAIRecommendations = generateAIRecommendations;
window.showAllAIRecommendations = showAllAIRecommendations;

// –°–∏—Å—Ç–µ–º–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö
function exportCSV() {
  const now = new Date();
  const timestamp = now.toISOString().slice(0, 19).replace(/:/g, '-');
  
  // –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
  const exportData = [];
  
  Object.keys(signalizationData.clientActionsData || {}).forEach(clientCode => {
    const clientData = signalizationData.clientActionsData[clientCode];
    if (!clientData || !clientData.actions) return;
    
    const clientName = getClientName(clientCode, clientCode);
    const clientInfo = signalizationData.clientManagerDirectory[clientCode];
    const managerName = clientInfo?.manager || '–ù–µ–≤—ñ–¥–æ–º–∏–π';
    
    const actions = [...clientData.actions].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
    const firstAction = actions[actions.length - 1];
    
    const workingDays = Math.floor((now - new Date(firstAction.createdAt)) / (1000 * 60 * 60 * 24));
    const status = clientData.status || 'new';
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥—ñ–π
    const actionStats = {};
    const actionTypes = ['call', 'meeting', 'email', 'commercial_proposal', 'other'];
    actionTypes.forEach(type => {
      actionStats[type] = actions.filter(a => a.type === type).length;
    });
    
    // –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –¥—ñ—ó
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const overdueActions = actions.filter(action => {
      if (!action.nextActionDate || action.status === 'cancelled') return false;
      const actionDate = new Date(action.nextActionDate);
      return actionDate < today;
    });
    
    exportData.push({
      '–ö–æ–¥ –∫–ª—ñ—î–Ω—Ç–∞': clientCode,
      '–ù–∞–∑–≤–∞ –∫–ª—ñ—î–Ω—Ç–∞': clientName,
      '–ú–µ–Ω–µ–¥–∂–µ—Ä': managerName,
      '–°—Ç–∞—Ç—É—Å': status,
      '–í—Å—å–æ–≥–æ –¥—ñ–π': actions.length,
      '–î–Ω—ñ–≤ —Ä–æ–±–æ—Ç–∏': workingDays,
      '–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –¥—ñ—ó': overdueActions.length,
      '–î–∑–≤—ñ–Ω–∫–∏': actionStats.call,
      '–ó—É—Å—Ç—Ä—ñ—á—ñ': actionStats.meeting,
      'Email': actionStats.email,
      '–ö–ü': actionStats.commercial_proposal,
      '–Ü–Ω—à–µ': actionStats.other,
      '–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è': clientData.potentialOrderDate || '',
      '–û—á—ñ–∫—É–≤–∞–Ω–∞ —Å—É–º–∞': clientData.expectedAmount || '',
      '–û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å': clientData.lastActivity || '',
      '–ü–µ—Ä—à–∞ –¥—ñ—è': firstAction.createdAt,
      '–û—Å—Ç–∞–Ω–Ω—è –¥—ñ—è': actions[0].createdAt
    });
  });
  
  if (exportData.length === 0) {
    alert('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É');
    return;
  }
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ CSV
  const headers = Object.keys(exportData[0]);
  const csvContent = [
    headers.join(','),
    ...exportData.map(row => 
      headers.map(header => {
        const value = row[header];
        // –ï–∫—Ä–∞–Ω—É—î–º–æ –∫–æ–º–∏ —Ç–∞ –ª–∞–ø–∫–∏
        if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
          return `"${value.replace(/"/g, '""')}"`;
        }
        return value;
      }).join(',')
    )
  ].join('\n');
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', `signalization_export_${timestamp}.csv`);
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –µ–∫—Å–ø–æ—Ä—Ç—É
window.exportCSV = exportCSV;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –∑–≥—ñ–¥–Ω–æ –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
function getFilteredData() {
  if (!signalizationData || !signalizationData.masterData) {
    return [];
  }
  
  let filteredData = signalizationData.masterData;
  
  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç userAccess –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–æ–¥—É–ª—é –ü–æ–º—ñ—á–Ω–∏–∫ –ø—Ä–æ–¥–∞–∂—É
  const userAccess = {
    userId: window.state?.currentUserId,
    employeeId: null,
    employee: null,
    role: window.state?.currentUserRole?.toLowerCase(),
    departmentId: window.state?.currentUserDepartment,
    isAdmin: window.state?.isAdmin || false
  };
  
  // –ù–∞—Ö–æ–¥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ userId
  if (userAccess.userId && signalizationData.managersData && signalizationData.managersData.length > 0) {
    const currentEmployee = signalizationData.managersData.find(emp => emp.userId === userAccess.userId);
    if (currentEmployee) {
      userAccess.employeeId = currentEmployee.id;
      userAccess.employee = currentEmployee;
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º departmentId –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
      if (!userAccess.departmentId && currentEmployee.department) {
        if (typeof currentEmployee.department === 'object' && currentEmployee.department.id) {
          userAccess.departmentId = currentEmployee.department.id;
        } else if (typeof currentEmployee.department === 'string') {
          userAccess.departmentId = currentEmployee.department;
        }
      }
    }
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø—Ä–∞–≤–∞–º –¥–æ—Å—Ç—É–ø–∞
  filteredData = filteredData.filter(sale => {
    const clientCode = sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'];
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!hasAccessToClient(clientCode, userAccess)) {
            return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É –∫–ª–∏–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑ API
    const clientInfo = signalizationData.clientManagerDirectory[clientCode];
    if (!clientInfo) {
      // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –∫–∞–∫ fallback
      return passesFiltersOldLogic(sale);
    }
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É
    if (filters.manager) {
      const managerName = getManagerName(filters.manager);
      if (!managerName || !clientInfo.manager) {
        return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É
      return clientInfo.manager.trim() === managerName.trim();
    }
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª (–±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞) - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏–∑ —ç—Ç–æ–≥–æ –æ—Ç–¥–µ–ª–∞
    else if (filters.department) {
      if (signalizationData.managersData && signalizationData.managersData.length > 0) {
        // –†–µ–∂–∏–º Firebase: –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞
        const departmentManagers = signalizationData.managersData.filter(manager => {
          return manager.departmentId === filters.department ||
                 manager.department === filters.department ||
                 (manager.department && manager.department.id === filters.department);
        });
        
        const departmentManagerNames = departmentManagers.map(m => m.name);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç –æ–¥–Ω–æ–º—É –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ—Ç–¥–µ–ª–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É
        return departmentManagerNames.includes(clientInfo.manager);
      } else {
        // Fallback —Ä–µ–∂–∏–º: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
        return false;
      }
    }
    
    return true;
  });
  
  // –§—ñ–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
  if (filters.status) {
    filteredData = filteredData.filter(sale => {
      const clientCode = sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'];
      const clientStatus = signalizationData.clientActionsData[clientCode]?.status || 'new';
      return clientStatus === filters.status;
    });
  }
  
  // –§—ñ–ª—å—Ç—Ä –ø–æ –ø–æ—à—É–∫—É
  if (filters.search) {
    const searchTerm = filters.search.toLowerCase();
    filteredData = filteredData.filter(sale => {
      const clientCode = sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'];
      const clientName = signalizationData.clientNames[clientCode] || clientCode;
      return clientName.toLowerCase().includes(searchTerm) || 
             clientCode.toLowerCase().includes(searchTerm);
    });
  }
  
  // –§—ñ–ª—å—Ç—Ä –ø–æ –ø–µ—Ä—ñ–æ–¥—É
  if (filters.period) {
    const periodMonths = parseInt(filters.period);
    const cutoffDate = new Date();
    cutoffDate.setMonth(cutoffDate.getMonth() - periodMonths);
    
    filteredData = filteredData.filter(sale => {
      const saleDate = new Date(sale['–î–∞—Ç–∞']);
      return saleDate >= cutoffDate;
    });
  }
  
  return filteredData;
}

// –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
let hasAccessDebugCount = 0;

// –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–ª—ñ—î–Ω—Ç–∞
function hasAccessToClient(clientCode, userAccess) {
  const shouldLog = hasAccessDebugCount < 5; // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –≤—ã–∑–æ–≤–æ–≤
  hasAccessDebugCount++;

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  if (!userAccess?.userId) {
    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  if (!signalizationData?.clientManagerDirectory) {
    if (shouldLog) console.warn('‚ö†Ô∏è [hasAccessToClient] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö clientManagerDirectory, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:', Object.keys(signalizationData || {}).length);
    return true; // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  }

  if (shouldLog) {
  }
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω - –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
  if (userAccess.isAdmin) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∞–ª–µ—Ä—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏
  if (window.hasPermission && window.hasPermission('alerts_view_all_clients')) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ sales_manage (–∫–∞–∫ –≤ salesAssistant.js)
  if (window.state?.currentUserPermissions?.sales_manage) {
    return true;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
  const clientInfo = signalizationData.clientManagerDirectory[clientCode];
  if (!clientInfo) {
    if (shouldLog) console.warn('‚ö†Ô∏è –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ:', clientCode);
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–ª–µ—Ä—Ç–æ–≤ —Å–≤–æ–µ–≥–æ –æ—Ç–¥–µ–ª–∞
  if (window.hasPermission && window.hasPermission('alerts_view_department_clients')) {
    const currentUser = userAccess.employee;
    if (currentUser && currentUser.department) {
      const userDeptId = typeof currentUser.department === 'object' ? currentUser.department.id : currentUser.department;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏–∑ –æ—Ç–¥–µ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const departmentManagers = signalizationData.managersData.filter(manager => {
        return manager.departmentId === userDeptId ||
               manager.department === userDeptId ||
               (manager.department && manager.department.id === userDeptId);
      });
      
      const departmentManagerNames = departmentManagers.map(m => m.name);
      return departmentManagerNames.includes(clientInfo.manager);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  if (window.hasPermission && window.hasPermission('alerts_view_manager_clients')) {
    const currentUser = userAccess.employee;
    if (currentUser) {
      const managerName = currentUser.name;
      return clientInfo.manager === managerName;
    }
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–æ–ª—è–º
  if (userAccess.role && userAccess.role.includes('–º–µ–Ω–µ–¥–∂')) {
    const currentUser = userAccess.employee;
    if (currentUser) {
      const managerName = currentUser.name;
      const isMyClient = clientInfo.manager === managerName;
      return isMyClient;
    }
  } else if (userAccess.role && userAccess.role.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫')) {
    const currentUser = userAccess.employee;
    if (currentUser && currentUser.department) {
      const userDeptId = typeof currentUser.department === 'object' ? currentUser.department.id : currentUser.department;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏–∑ –æ—Ç–¥–µ–ª–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
      const departmentManagers = signalizationData.managersData.filter(manager => {
        return manager.departmentId === userDeptId ||
               manager.department === userDeptId ||
               (manager.department && manager.department.id === userDeptId);
      });
      
      const departmentManagerNames = departmentManagers.map(m => m.name);
      return departmentManagerNames.includes(clientInfo.manager);
    }
  }
  
  return false;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ ID
function getManagerName(managerId) {
  if (!signalizationData?.managersData) return null;
  
  const manager = signalizationData.managersData.find(m => m.id === managerId);
  return manager ? manager.name : null;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è userAccess
function getUserAccess() {
  const userAccess = {
    userId: window.state?.currentUserId,
    employeeId: null,
    employee: null,
    role: window.state?.currentUserRole?.toLowerCase(),
    departmentId: window.state?.currentUserDepartment,
    isAdmin: window.state?.isAdmin || false
  };
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ members
  if (window.state?.allMembers && window.state.allMembers.length > 0) {
    const currentMember = window.state.allMembers.find(m => 
      m.userId === userAccess.userId || 
      m.userId === window.state?.currentUserId
    );
    
    if (currentMember && currentMember.employeeId) {
      userAccess.employeeId = currentMember.employeeId;
      const employee = signalizationData.managersData?.find(emp => emp.id === currentMember.employeeId);
      if (employee) {
        userAccess.employee = employee;
        if (!userAccess.departmentId && employee.department) {
          if (typeof employee.department === 'object' && employee.department.id) {
            userAccess.departmentId = employee.department.id;
          } else if (typeof employee.department === 'string') {
            userAccess.departmentId = employee.department;
          }
        }
        if (employee.role) {
          userAccess.role = employee.role.toLowerCase();
        } else if (employee.position) {
          const position = employee.position.toLowerCase();
          if (position.includes('–º–µ–Ω–µ–¥–∂–µ—Ä') || position.includes('manager')) {
            userAccess.role = '–º–µ–Ω–µ–¥–∂–µ—Ä';
          } else if (position.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫') || position.includes('head')) {
            userAccess.role = '–∫–µ—Ä—ñ–≤–Ω–∏–∫';
          } else if (position.includes('–∞–¥–º—ñ–Ω') || position.includes('admin')) {
            userAccess.role = '–∞–¥–º—ñ–Ω';
          }
        }
      }
    }
  }
  
  return userAccess;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –ø–æ –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
async function setupUserFilters() {
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ userAccess –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ salesAssistant.js
  const userAccess = {
    userId: window.state?.currentUserId,
    employeeId: null,
    employee: null,
    role: window.state?.currentUserRole?.toLowerCase(),
    departmentId: window.state?.currentUserDepartment,
    isAdmin: window.state?.isAdmin || false
  };
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ members (—è–∫ –≤ salesAssistant.js)
  if (window.state?.allMembers && window.state.allMembers.length > 0) {
    const currentMember = window.state.allMembers.find(m => 
      m.userId === userAccess.userId || 
      m.userId === window.state?.currentUserId
    );
    
    if (currentMember && currentMember.employeeId) {
      userAccess.employeeId = currentMember.employeeId;
      
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ employee –ø–æ employeeId –≤ managersData
      const employee = signalizationData.managersData?.find(emp => emp.id === currentMember.employeeId);
      
      if (employee) {
        userAccess.employee = employee;
        if (!userAccess.departmentId && employee.department) {
          if (typeof employee.department === 'object' && employee.department.id) {
            userAccess.departmentId = employee.department.id;
          } else if (typeof employee.department === 'string') {
            userAccess.departmentId = employee.department;
          }
        }
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ role –∑ employee
        if (employee.role) {
          userAccess.role = employee.role.toLowerCase();
        } else if (employee.position) {
          const position = employee.position.toLowerCase();
          if (position.includes('–º–µ–Ω–µ–¥–∂–µ—Ä') || position.includes('manager')) {
            userAccess.role = '–º–µ–Ω–µ–¥–∂–µ—Ä';
          } else if (position.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫') || position.includes('head')) {
            userAccess.role = '–∫–µ—Ä—ñ–≤–Ω–∏–∫';
          } else if (position.includes('–∞–¥–º—ñ–Ω') || position.includes('admin')) {
            userAccess.role = '–∞–¥–º—ñ–Ω';
          }
        }
        
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ä–æ–ª—ñ
        if (!userAccess.isAdmin && userAccess.employeeId) {
          if (userAccess.role && userAccess.role.includes('–º–µ–Ω–µ–¥–∂')) {
            // –î–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å–µ–±–µ
            filters.manager = userAccess.employeeId;
          } else if (userAccess.role && userAccess.role.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫')) {
            // –î–ª—è –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ –≤—ñ–¥–¥—ñ–ª
            if (userAccess.departmentId) {
              filters.department = userAccess.departmentId;
            }
          }
        }
      }
    }
  }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
  populateFilters();
  
  // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
  applyFilters();
}

// –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É —Å–ø–∞–¥—É –≤–∏—Ä—É—á–∫–∏ - —Ç–æ—á–Ω–æ —è–∫ –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—ñ
function analyzeRevenueDrops() {
  const now = new Date();
  const periodMs = currentPeriod * 30 * 24 * 60 * 60 * 1000;
  const prevPeriodMs = periodMs;
  const clients = {};
  

  
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ—á–Ω–æ —Ç–∞–∫—É –∂ –ª–æ–≥—ñ–∫—É —è–∫ –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—ñ
  let processedSales = 0;
  let filteredSales = 0;
  
  signalizationData.masterData.forEach(sale => {
    processedSales++;
    
    if (!passesFilters || !passesFilters(sale)) {
      filteredSales++;
      return;
    }
    
    const code = sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'];
    const date = new Date(sale['–î–∞—Ç–∞']);
    const revenue = typeof sale['–í—ã—Ä—É—á–∫–∞'] === 'string' ? 
      parseFloat(sale['–í—ã—Ä—É—á–∫–∞'].replace(/\s/g, '').replace(',', '.')) : 
      (sale['–í—ã—Ä—É—á–∫–∞'] || 0);
    
    if (!clients[code]) {
      clients[code] = { 
        name: signalizationData.clientNames[code] || sale['–ö–ª–∏–µ–Ω—Ç'] || code, 
        code, 
        now: 0, 
        prev: 0, 
        link: signalizationData.clientLinks[code] 
      };
    }
    
    if (now - date <= periodMs) {
      clients[code].now += revenue;
    } else if (now - date <= periodMs + prevPeriodMs) {
      clients[code].prev += revenue;
    }
  });
  
  
  
  // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑—ñ –∑–º–µ–Ω—à–µ–Ω–Ω—è–º –ø—Ä–æ–¥–∞–∂—ñ–≤
  let alerts = Object.values(clients)
    .filter(c => c.prev > 0 && c.now < c.prev)
    .sort((a, b) => (a.now/a.prev) - (b.now/b.prev));
  

  
  // –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  alerts = alerts.map(client => ({
    ...client,
    dropPercent: ((client.now - client.prev) / client.prev) * 100
  }));
  
  const averageDrop = alerts.length > 0 
    ? alerts.reduce((sum, client) => sum + Math.abs(client.dropPercent), 0) / alerts.length 
    : 0;
  

  
  return {
    clientsCount: alerts.length,
    averageDrop,
    clients: alerts // –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
  };
}

// –§—É–Ω–∫—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É —Å–ø–∞–¥—É –≤–∏—Ä—É—á–∫–∏ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é –¥–æ—Å—Ç—É–ø—É
function analyzeRevenueDropsFiltered(userAccess) {
  const now = new Date();
  const periodMs = currentPeriod * 30 * 24 * 60 * 60 * 1000;
  const prevPeriodMs = periodMs;
  const clients = {};
  
  signalizationData.masterData.forEach(sale => {
    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ –∫–ª—ñ—î–Ω—Ç–∞
    const code = sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'];
    if (!hasAccessToClient(code, userAccess)) {
      return; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –±–µ–∑ –¥–æ—Å—Ç—É–ø—É
    }
    
    // –ü–æ—Ç—ñ–º –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∑–≤–∏—á–∞–π–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
    if (!passesFilters || !passesFilters(sale)) {
      return;
    }
    
    const date = new Date(sale['–î–∞—Ç–∞']);
    const revenue = typeof sale['–í—ã—Ä—É—á–∫–∞'] === 'string' ? 
      parseFloat(sale['–í—ã—Ä—É—á–∫–∞'].replace(/\s/g, '').replace(',', '.')) : 
      (sale['–í—ã—Ä—É—á–∫–∞'] || 0);
    
    if (!clients[code]) {
      clients[code] = { 
        name: signalizationData.clientNames[code] || sale['–ö–ª–∏–µ–Ω—Ç'] || code, 
        code, 
        now: 0, 
        prev: 0, 
        link: signalizationData.clientLinks[code] 
      };
    }
    
    if (now - date <= periodMs) {
      clients[code].now += revenue;
    } else if (now - date <= periodMs + prevPeriodMs) {
      clients[code].prev += revenue;
    }
  });
  
  // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑—ñ –∑–º–µ–Ω—à–µ–Ω–Ω—è–º –ø—Ä–æ–¥–∞–∂—ñ–≤
  let alerts = Object.values(clients)
    .filter(c => c.prev > 0 && c.now < c.prev)
    .sort((a, b) => (a.now/a.prev) - (b.now/b.prev));
  
  // –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  alerts = alerts.map(client => ({
    ...client,
    dropPercent: ((client.now - client.prev) / client.prev) * 100
  }));
  
  const averageDrop = alerts.length > 0 
    ? alerts.reduce((sum, client) => sum + Math.abs(client.dropPercent), 0) / alerts.length 
    : 0;
  
  return {
    clientsCount: alerts.length,
    averageDrop,
    clients: alerts
  };
}

// –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É –∑–º–µ–Ω—à–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ - —Ç–æ—á–Ω–æ —è–∫ –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—ñ
function analyzeFrequencyDrops() {
  const now = new Date();
  const periodMs = currentPeriod * 30 * 24 * 60 * 60 * 1000;
  const prevPeriodMs = periodMs;
  const clients = {};
  

  
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ—á–Ω–æ —Ç–∞–∫—É –∂ –ª–æ–≥—ñ–∫—É —è–∫ –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—ñ
  signalizationData.masterData.forEach(sale => {
    if (!passesFilters || !passesFilters(sale)) return;
    
    const code = sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'];
    const date = new Date(sale['–î–∞—Ç–∞']);
    
    if (!clients[code]) {
      clients[code] = { 
        name: signalizationData.clientNames[code] || sale['–ö–ª–∏–µ–Ω—Ç'] || code, 
        code, 
        now: [], 
        prev: [], 
        link: signalizationData.clientLinks[code],
        manager: sale['–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä']
      };
    }
    
    if (now - date <= periodMs) {
      clients[code].now.push(date);
    } else if (now - date <= periodMs + prevPeriodMs) {
      clients[code].prev.push(date);
    }
  });
  
  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É (—Ç–æ—á–Ω–æ —è–∫ –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—ñ)
  function avgInterval(dates) {
    if (dates.length < 2) return null;
    // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–Ω–∏
    const uniqueDays = Array.from(new Set(dates.map(d => d.toISOString().slice(0, 10)))).map(s => new Date(s)).sort((a, b) => a - b);
    if (uniqueDays.length < 2) return null;
    let sum = 0;
    for (let i = 1; i < uniqueDays.length; ++i) sum += (uniqueDays[i] - uniqueDays[i - 1]);
    return sum / (uniqueDays.length - 1);
  }
  
  let alerts = Object.values(clients).map(c => {
    const nowInt = avgInterval(c.now);
    const prevInt = avgInterval(c.prev);
    return { ...c, nowInt, prevInt };
  }).filter(c => c.prevInt && c.nowInt && c.nowInt > c.prevInt);
  
  // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
  alerts = alerts.sort((a,b) => b.nowInt/b.prevInt - a.nowInt/a.prevInt);
  
  // –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  alerts = alerts.map(client => ({
    ...client,
    dropPercent: ((client.nowInt - client.prevInt) / client.prevInt) * 100
  }));
  
  const averageDrop = alerts.length > 0 
    ? alerts.reduce((sum, client) => sum + Math.abs(client.dropPercent), 0) / alerts.length 
    : 0;
  
  return {
    clientsCount: alerts.length,
    averageDrop,
    clients: alerts // –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
  };
}

// –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É –∑–º–µ–Ω—à–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–µ–∫–∞ - —Ç–æ—á–Ω–æ —è–∫ –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—ñ
function analyzeAvgCheckDrops() {
  const now = new Date();
  const periodMs = currentPeriod * 30 * 24 * 60 * 60 * 1000;
  const prevPeriodMs = periodMs;
  const clients = {};
  

  
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ—á–Ω–æ —Ç–∞–∫—É –∂ –ª–æ–≥—ñ–∫—É —è–∫ –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—ñ
  signalizationData.masterData.forEach(sale => {
    if (!passesFilters || !passesFilters(sale)) return;
    
    const code = sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'];
    const date = new Date(sale['–î–∞—Ç–∞']);
    const revenue = typeof sale['–í—ã—Ä—É—á–∫–∞'] === 'string' ? 
      parseFloat(sale['–í—ã—Ä—É—á–∫–∞'].replace(/\s/g, '').replace(',', '.')) : 
      (sale['–í—ã—Ä—É—á–∫–∞'] || 0);
    
    if (!clients[code]) {
      clients[code] = { 
        name: signalizationData.clientNames[code] || sale['–ö–ª–∏–µ–Ω—Ç'] || code, 
        code, 
        now: [], 
        prev: [], 
        link: signalizationData.clientLinks[code],
        manager: sale['–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä']
      };
    }
    
    if (now - date <= periodMs) {
      clients[code].now.push(revenue);
    } else if (now - date <= periodMs + prevPeriodMs) {
      clients[code].prev.push(revenue);
    }
  });
  
  function avg(arr) { 
    return arr.length ? arr.reduce((a,b)=>a+b,0)/arr.length : null; 
  }
  
  let alerts = Object.values(clients).map(c => {
    const nowAvg = avg(c.now);
    const prevAvg = avg(c.prev);
    return { ...c, nowAvg, prevAvg };
  }).filter(c => c.prevAvg && c.nowAvg && c.nowAvg < c.prevAvg);
  
  // –°–æ—Ä—Ç—É—î–º–æ –ø–æ —Å–ø–∞–¥—É —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–µ–∫–∞
  alerts = alerts.sort((a,b) => a.nowAvg/a.prevAvg - b.nowAvg/b.prevAvg);
  
  // –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  alerts = alerts.map(client => ({
    ...client,
    change: ((client.nowAvg - client.prevAvg) / client.prevAvg) * 100
  }));
  
  const averageDrop = alerts.length > 0 
    ? alerts.reduce((sum, client) => sum + Math.abs(client.change), 0) / alerts.length 
    : 0;
  
  const totalOldAvg = alerts.length > 0 
    ? alerts.reduce((sum, client) => sum + client.prevAvg, 0) / alerts.length 
    : 0;
  
  const totalNewAvg = alerts.length > 0 
    ? alerts.reduce((sum, client) => sum + client.nowAvg, 0) / alerts.length 
    : 0;
  
  const totalChange = totalOldAvg > 0 ? ((totalNewAvg - totalOldAvg) / totalOldAvg) * 100 : 0;
  
  return {
    clientsCount: alerts.length,
    averageDrop,
    totalOldAvg,
    totalNewAvg,
    totalChange,
    clients: alerts // –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
  };
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
function calculateAverageInterval(dates) {
  if (dates.length < 2) return 0;
  
  let totalDays = 0;
  for (let i = 1; i < dates.length; i++) {
    const diffTime = Math.abs(dates[i] - dates[i-1]);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    totalDays += diffDays;
  }
  
  return totalDays / (dates.length - 1);
}

function renderClientStatus(clientCode) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ window.clientActionsData –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const status = window.clientActionsData?.[clientCode]?.status || 
                 signalizationData.clientActionsData?.[clientCode]?.status || 'new';
  
  const statusColors = {
    'new': 'bg-red-600 text-white',
    'in_progress': 'bg-yellow-600 text-white', 
    'resolved': 'bg-green-600 text-white',
    'closed': 'bg-gray-600 text-white'
  };
  
  const statusLabels = {
    'new': 'üÜï –ù–æ–≤–∏–π',
    'in_progress': 'üîÑ –í —Ä–æ–±–æ—Ç—ñ',
    'resolved': '‚úÖ –í–∏—Ä—ñ—à–µ–Ω–æ',
    'closed': 'üóÇÔ∏è –ó–∞–∫—Ä–∏—Ç–æ'
  };
  
  return `<span class="text-xs px-2 py-1 rounded ${statusColors[status]}">${statusLabels[status]}</span>`;
}

// –ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è 

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞
function showClientDetail(clientCode) {
  const oldModal = document.getElementById('client-detail-modal');
  if (oldModal) oldModal.remove();

  const sales = signalizationData.masterData.filter(s => s['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] === clientCode);
  if (!sales.length) {
    return;
  }

  const monthMap = {};
  sales.forEach(sale => {
    const date = new Date(sale['–î–∞—Ç–∞']);
    const ym = date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0');
    const revenue = typeof sale['–í—ã—Ä—É—á–∫–∞'] === 'string' ? parseFloat(sale['–í—ã—Ä—É—á–∫–∞'].replace(/\s/g, '').replace(',', '.')) : (sale['–í—ã—Ä—É—á–∫–∞'] || 0);
    if (!monthMap[ym]) monthMap[ym] = 0;
    monthMap[ym] += revenue;
  });
  const sortedMonths = Object.keys(monthMap).sort((a, b) => new Date(a + '-01') - new Date(b + '-01'));

  const dates = sales.map(s=>new Date(s['–î–∞—Ç–∞'])).sort((a,b)=>a-b);
  let freqArr = [];
  for (let i=1; i<dates.length; ++i) freqArr.push((dates[i]-dates[i-1])/86400000);

  const avgCheckArr = {};
  sales.forEach(sale => {
    const date = new Date(sale['–î–∞—Ç–∞']);
    const ym = date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0');
    const revenue = typeof sale['–í—ã—Ä—É—á–∫–∞'] === 'string' ? parseFloat(sale['–í—ã—Ä—É—á–∫–∞'].replace(/\s/g, '').replace(',', '.')) : (sale['–í—ã—Ä—É—á–∫–∞'] || 0);
    if (!avgCheckArr[ym]) avgCheckArr[ym] = [];
    avgCheckArr[ym].push(revenue);
  });
  const avgCheckByMonth = Object.fromEntries(Object.entries(avgCheckArr).map(([m, arr]) => [m, arr.reduce((a,b)=>a+b,0)/arr.length]));
  const sortedAvgCheck = sortedMonths.map(m => avgCheckByMonth[m] || null);

  const salesByDate = {};
  sales.forEach(sale => {
    const date = sale['–î–∞—Ç–∞'];
    if (!salesByDate[date]) salesByDate[date] = [];
    salesByDate[date].push(sale);
  });
  const lastDates = Object.keys(salesByDate).sort((a,b)=>new Date(b)-new Date(a)).slice(0,10);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞
  const currentStatus = window.clientActionsData?.[clientCode]?.status || 
                       signalizationData.clientActionsData?.[clientCode]?.status || 'new';
  const statusOptions = [
    { value: 'new', label: 'üÜï –ù–æ–≤–∏–π', color: 'bg-red-600' },
    { value: 'in_progress', label: 'üîÑ –í —Ä–æ–±–æ—Ç—ñ', color: 'bg-yellow-600' },
    { value: 'resolved', label: '‚úÖ –í–∏—Ä—ñ—à–µ–Ω–æ', color: 'bg-green-600' },
    { value: 'closed', label: 'üóÇÔ∏è –ó–∞–∫—Ä–∏—Ç–æ', color: 'bg-gray-600' }
  ];

  let modal = document.createElement('div');
  modal.id = 'client-detail-modal';
  modal.className = 'fixed inset-0 z-[100] flex items-center justify-center bg-black bg-opacity-60';
  modal.innerHTML = `
    <div class="bg-gray-900 rounded-2xl shadow-2xl p-10 w-full max-w-6xl relative max-h-[95vh] flex flex-col overflow-y-auto animate-fade-in">
      <button id="close-client-detail" class="absolute top-4 right-4 text-gray-400 hover:text-white text-2xl">&times;</button>
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-2xl font-bold text-white">–î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è: <span class="text-indigo-400">${sales[0] ? signalizationData.clientNames[clientCode] || sales[0]['–ö–ª–∏–µ–Ω—Ç'] : ''}</span></h3>
        <div class="flex items-center gap-4">
          <div class="flex items-center gap-2">
            <span class="text-sm text-gray-300">–°—Ç–∞—Ç—É—Å:</span>
            <select id="client-status-select" class="px-3 py-1 bg-gray-800 border border-gray-600 rounded text-white text-sm">
              ${statusOptions.map(option => 
                `<option value="${option.value}" ${option.value === currentStatus ? 'selected' : ''}>${option.label}</option>`
              ).join('')}
            </select>
          </div>
          <button id="save-status-btn" class="px-4 py-1 bg-indigo-600 text-white rounded hover:bg-indigo-700 text-sm">
            –ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞—Ç—É—Å
          </button>
        </div>
      </div>
      
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∑–∞–∫–∞–∑—ã -->
        <div class="space-y-8">
          <div>
            <h4 class="font-bold mb-3 text-gray-200">–î–∏–Ω–∞–º—ñ–∫–∞ –≤–∏—Ä—É—á–∫–∏ –ø–æ –º—ñ—Å—è—Ü—è–º</h4>
            <canvas id="clientRevenueChart" height="100"></canvas>
          </div>
          <div>
            <h4 class="font-bold mb-3 text-gray-200">–î–∏–Ω–∞–º—ñ–∫–∞ —á–∞—Å—Ç–æ—Ç–∏ –ø–æ–∫—É–ø–æ–∫</h4>
            <canvas id="clientFreqChart" height="80"></canvas>
          </div>
          <div>
            <h4 class="font-bold mb-3 text-gray-200">–î–∏–Ω–∞–º—ñ–∫–∞ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–µ–∫–∞</h4>
            <canvas id="clientAvgCheckChart" height="80"></canvas>
          </div>
          <div>
            <h4 class="font-bold mb-3 text-gray-200">–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h4>
            <div class="max-h-[200px] overflow-y-auto">
              <table class="min-w-full text-xs bg-gray-800 rounded-lg overflow-hidden">
                <thead>
                  <tr class="bg-gray-700 text-gray-300">
                    <th class="px-3 py-2">–î–∞—Ç–∞</th>
                    <th class="px-3 py-2">–°—É–º–∞</th>
                    <th class="px-3 py-2">–¢–æ–≤–∞—Ä–∏</th>
                  </tr>
                </thead>
                <tbody>
                  ${lastDates.map(date => {
                    const orders = salesByDate[date];
                    const total = orders.reduce((sum, s) => sum + (typeof s['–í—ã—Ä—É—á–∫–∞'] === 'string' ? parseFloat(s['–í—ã—Ä—É—á–∫–∞'].replace(/\s/g, '').replace(',', '.')) : (s['–í—ã—Ä—É—á–∫–∞'] || 0)), 0);
                    const safeId = 'order_' + date.replace(/[^\d]/g, '');
                    return `<tr>
                      <td class="px-3 py-2 text-gray-200">${date}</td>
                      <td class="px-3 py-2 text-green-400">${total.toFixed(2)}</td>
                      <td class="px-3 py-2">
                        <button class='px-2 py-1 bg-gray-700 text-gray-200 rounded hover:bg-gray-600 toggle-order-detail-btn' data-element-id="${safeId}">–ü–æ–∫–∞–∑–∞—Ç–∏</button>
                        <div id='${safeId}' class='hidden mt-2 text-xs bg-gray-900 rounded p-3'>
                          <ul class='list-disc list-inside space-y-1'>
                            ${orders.map(s=>`<li>${s['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞']} <span class='text-gray-400'>(${typeof s['–í—ã—Ä—É—á–∫–∞'] === 'string' ? s['–í—ã—Ä—É—á–∫–∞'] : (s['–í—ã—Ä—É—á–∫–∞']||0)})</span></li>`).join('')}
                          </ul>
                        </div>
                      </td>
                    </tr>`;
                  }).join('')}
                </tbody>
              </table>
            </div>
          </div>
        </div>
        
        <!-- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –∏—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π -->
        <div>
          <h4 class="font-bold mb-3 text-gray-200">–Ü—Å—Ç–æ—Ä—ñ—è –¥—ñ–π</h4>
          <div class="bg-gray-800 rounded-lg p-4 max-h-[600px] overflow-y-auto">
            ${renderClientActionsHistory(clientCode)}
          </div>
        </div>
      </div>
    </div>
  `;
  document.body.appendChild(modal);
  

  
  const close = () => modal.remove();
  document.getElementById('close-client-detail').onclick = close;
  modal.onclick = (e) => {
    if (e.target === modal) close();
  }
  document.addEventListener('keydown', function escHandler(e) {
    if (e.key === 'Escape') {
      close();
      document.removeEventListener('keydown', escHandler);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  document.getElementById('save-status-btn').onclick = async function() {
    const newStatus = document.getElementById('client-status-select').value;
    const oldStatus = currentStatus;
    
    if (newStatus === oldStatus) {
      showActionNotification('–°—Ç–∞—Ç—É—Å –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è', 'info');
      return;
    }
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!signalizationData.clientActionsData[clientCode]) {
        signalizationData.clientActionsData[clientCode] = {
          status: 'new',
          actions: [],
          lastActivity: null,
          potentialOrderDate: null,
          expectedAmount: null
        };
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ signalizationData
      signalizationData.clientActionsData[clientCode].status = newStatus;
      signalizationData.clientActionsData[clientCode].lastActivity = new Date().toISOString();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ window.clientActionsData –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (!window.clientActionsData[clientCode]) {
        window.clientActionsData[clientCode] = {
          status: 'new',
          actions: [],
          lastActivity: null,
          potentialOrderDate: null,
          expectedAmount: null
        };
      }
      
      window.clientActionsData[clientCode].status = newStatus;
      window.clientActionsData[clientCode].lastActivity = new Date().toISOString();
      
      // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      missedForecastCache = null;
      lastFilterHash = null;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
      const companyId = window.state?.currentCompanyId;
      if (companyId) {
        try {
          const { db, doc, setDoc, serverTimestamp } = await import('./firebase.js');
          const docRef = doc(db, 'companies', companyId, 'clientAlerts', clientCode);
          
          await setDoc(docRef, {
            ...signalizationData.clientActionsData[clientCode],
            updatedAt: serverTimestamp()
          }, { merge: true });
          
        } catch (firebaseError) {
          console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ Firebase, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ:', firebaseError);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –≤ localStorage –∫–∞–∫ fallback
          try {
            const localActions = JSON.parse(localStorage.getItem('clientActionsData') || '{}');
            localActions[clientCode] = signalizationData.clientActionsData[clientCode];
            localStorage.setItem('clientActionsData', JSON.stringify(localActions));
          } catch (localError) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', localError);
          }
        }
      }
      
      showActionNotification('–°—Ç–∞—Ç—É—Å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const activeTab = document.querySelector('.nav-btn.active')?.getAttribute('data-tab') || currentTab;
      if (activeTab) {
        renderTabContent(activeTab);
      }
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–ª–∏—Ü–µ
      setTimeout(() => {
        const statusElements = document.querySelectorAll(`[data-client-code="${clientCode}"] .client-status`);
        statusElements.forEach(element => {
          element.innerHTML = renderClientStatus(clientCode);
        });
      }, 50);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É "–ü—Ä–æ–≥–Ω–æ–∑" –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
      if (activeTab === 'forecast') {
        setTimeout(() => {
          renderMissedForecast();
        }, 100);
      }
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', error);
      showActionNotification('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: ' + error.message, 'error');
    }
  };
  
  // –ì—Ä–∞—Ñ—ñ–∫–∏
  setTimeout(()=>{
    const revenueCanvas = document.getElementById('clientRevenueChart');
    const freqCanvas = document.getElementById('clientFreqChart');
    const avgCheckCanvas = document.getElementById('clientAvgCheckChart');
    
    if (revenueCanvas) {
      new Chart(revenueCanvas.getContext('2d'), {
        type: 'line',
        data: {
          labels: sortedMonths,
          datasets: [{
            label:'–í–∏—Ä—É—á–∫–∞',
            data:sortedMonths.map(m=>monthMap[m]),
            borderColor:'#34d399',
            backgroundColor:'rgba(52,211,153,0.2)',
            fill:true
          }]
        },
        options: {
          responsive:true, 
          plugins:{legend:{display:false}}, 
          scales:{
            x:{ticks:{color:'#a1a1aa'}},
            y:{ticks:{color:'#a1a1aa'}}
          }
        }
      });
    }
    
    if (freqCanvas) {
      new Chart(freqCanvas.getContext('2d'), {
        type: 'line',
        data: {
          labels: freqArr.map((_,i)=>i+1),
          datasets: [{
            label:'–Ü–Ω—Ç–µ—Ä–≤–∞–ª (–¥–Ω—ñ–≤)',
            data:freqArr,
            borderColor:'#fbbf24',
            backgroundColor:'rgba(251,191,36,0.2)',
            fill:true
          }]
        },
        options: {
          responsive:true, 
          plugins:{legend:{display:false}}, 
          scales:{
            x:{ticks:{color:'#a1a1aa'}},
            y:{ticks:{color:'#a1a1aa'}}
          }
        }
      });
    }
    
    if (avgCheckCanvas) {
      new Chart(avgCheckCanvas.getContext('2d'), {
        type: 'line',
        data: {
          labels: sortedMonths,
          datasets: [{
            label:'–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫',
            data:sortedAvgCheck,
            borderColor:'#8b5cf6',
            backgroundColor:'rgba(139,92,246,0.2)',
            fill:true
          }]
        },
        options: {
          responsive:true, 
          plugins:{legend:{display:false}}, 
          scales:{
            x:{ticks:{color:'#a1a1aa'}},
            y:{ticks:{color:'#a1a1aa'}}
          }
        }
      });
    }
    
    // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    if (window.setupDynamicEventListeners) {
      window.setupDynamicEventListeners();
    }
  }, 100);
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ—Å—Ç—É–ø—É –∑ HTML
window.showClientDetail = showClientDetail;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –¥—ñ–π
function renderActionsMenu(clientCode) {
  return `
    <div class="relative">
      <button class="px-3 py-2 bg-gray-700 text-white rounded hover:bg-gray-600 flex items-center gap-1 actions-menu-toggle" 
              data-client-code="${clientCode}" 
              id="actions-btn-${clientCode}">
        <span class="text-sm">–î—ñ—ó</span>
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"/>
        </svg>
      </button>
      <div class="absolute top-full left-0 mt-1 bg-white rounded-lg shadow-lg border border-gray-200 min-w-40 z-50 hidden" 
           id="actions-menu-${clientCode}">
        <div class="py-1">
          <button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center gap-2 action-modal-btn"
                  data-client-code="${clientCode}" 
                  data-action-type="call">
            <span>üìû</span>
            <span>–î–∑–≤—ñ–Ω–æ–∫</span>
          </button>
          <button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center gap-2 action-modal-btn"
                  data-client-code="${clientCode}" 
                  data-action-type="meeting">
            <span>ü§ù</span>
            <span>–ó—É—Å—Ç—Ä—ñ—á</span>
          </button>
          <button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center gap-2 action-modal-btn"
                  data-client-code="${clientCode}" 
                  data-action-type="email">
            <span>üìß</span>
            <span>–õ–∏—Å—Ç</span>
          </button>
          <button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center gap-2 action-modal-btn"
                  data-client-code="${clientCode}" 
                  data-action-type="proposal">
            <span>üìÑ</span>
            <span>–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è</span>
          </button>
          <button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center gap-2 action-modal-btn"
                  data-client-code="${clientCode}" 
                  data-action-type="other">
            <span>üìù</span>
            <span>–Ü–Ω—à–µ</span>
          </button>
        </div>
      </div>
    </div>
  `;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º–µ–Ω—é –¥—ñ–π
function toggleActionsMenu(clientCode) {
  const menu = document.getElementById(`actions-menu-${clientCode}`);
  if (!menu) return;
  
  const isVisible = !menu.classList.contains('hidden');
  
  // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ —ñ–Ω—à—ñ –º–µ–Ω—é
  document.querySelectorAll('[id^="actions-menu-"]').forEach(m => {
    m.classList.add('hidden');
  });
  
  if (!isVisible) {
    menu.classList.remove('hidden');
  }
  
  // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–µ–Ω—é –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º
  const closeMenu = (e) => {
    if (!menu.contains(e.target) && !e.target.closest(`#actions-btn-${clientCode}`)) {
      menu.classList.add('hidden');
      document.removeEventListener('click', closeMenu);
    }
  };
  
  setTimeout(() => {
    document.addEventListener('click', closeMenu);
  }, 0);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –¥–æ—Å—Ç—É–ø—É –∑ HTML
window.renderActionsMenu = renderActionsMenu;
window.toggleActionsMenu = toggleActionsMenu;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥—ñ–π
function showActionModal(clientCode, actionType) {
  const oldModal = document.getElementById('action-modal');
  if (oldModal) oldModal.remove();
  
  const actionLabels = {
    'call': 'üìû –î–∑–≤—ñ–Ω–æ–∫',
    'meeting': 'ü§ù –ó—É—Å—Ç—Ä—ñ—á', 
    'email': 'üìß –õ–∏—Å—Ç',
    'proposal': 'üìÑ –ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è',
    'other': 'üìù –Ü–Ω—à–µ'
  };
  
  const clientName = signalizationData.clientNames[clientCode] || clientCode;
  
  const modal = document.createElement('div');
  modal.id = 'action-modal';
  modal.className = 'fixed inset-0 z-[110] flex items-center justify-center bg-black bg-opacity-60';
  modal.innerHTML = `
    <div class="bg-gray-800 rounded-xl shadow-2xl p-6 w-full max-w-md relative">
      <button id="close-action-modal" class="absolute top-4 right-4 text-gray-400 hover:text-white text-xl">&times;</button>
      
      <h3 class="text-xl font-bold text-white mb-4">
        ${actionLabels[actionType] || actionLabels.other}
      </h3>
      
      <div class="mb-4">
        <p class="text-gray-300 text-sm mb-2">–ö–ª—ñ—î–Ω—Ç: <span class="text-indigo-400 font-medium">${clientName}</span></p>
      </div>
      
      <form id="action-form" class="space-y-4">
          <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">–ö–æ–º–µ–Ω—Ç–∞—Ä</label>
          <textarea id="action-comment" 
                    class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500" 
                    rows="3" 
                    placeholder="–û–ø–∏—à—ñ—Ç—å —â–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ..."></textarea>
          </div>
        
          <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">–ù–∞—Å—Ç—É–ø–Ω–∞ –¥—ñ—è</label>
          <select id="next-action" 
                  class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500">
            <option value="">–ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ</option>
            <option value="call">–î–∑–≤—ñ–Ω–æ–∫</option>
            <option value="meeting">–ó—É—Å—Ç—Ä—ñ—á</option>
            <option value="email">–õ–∏—Å—Ç</option>
            <option value="proposal">–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è</option>
            <option value="other">–Ü–Ω—à–µ</option>
          </select>
          </div>
        
        <div id="next-action-date-container" class="hidden">
          <label class="block text-sm font-medium text-gray-300 mb-2">–î–∞—Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –¥—ñ—ó</label>
          <input type="date" id="next-action-date" 
                 class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500">
          </div>
        
          <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</label>
          <div class="grid grid-cols-2 gap-2">
            <input type="date" id="potential-order-date" 
                   class="px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
                   placeholder="–î–∞—Ç–∞">
            <input type="number" id="potential-amount" 
                   class="px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
                   placeholder="–°—É–º–∞">
          </div>
        </div>
        
        <div class="flex gap-3">
          <button type="submit" 
                  class="flex-1 px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500">
            –ó–±–µ—Ä–µ–≥—Ç–∏
          </button>
          <button type="button" id="cancel-action" 
                  class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500">
            –°–∫–∞—Å—É–≤–∞—Ç–∏
          </button>
          </div>
      </form>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const closeModal = () => modal.remove();
  document.getElementById('close-action-modal').onclick = closeModal;
  document.getElementById('cancel-action').onclick = closeModal;
  modal.onclick = (e) => { if (e.target === modal) closeModal(); };
  
  // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–æ–ª–µ –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π –∞–∫—Ü–∏–∏
  document.getElementById('next-action').onchange = function() {
    const container = document.getElementById('next-action-date-container');
    if (this.value) {
      container.classList.remove('hidden');
    } else {
      container.classList.add('hidden');
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
  document.getElementById('action-form').onsubmit = function(e) {
    e.preventDefault();
    saveClientAction(clientCode, actionType);
    closeModal();
  };
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞
async function saveClientAction(clientCode, actionType) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (window.hasPermission && !window.hasPermission('alerts_add_actions')) {
      alert('–ü–æ–º–∏–ª–∫–∞: –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥—ñ–π –ø–æ –∞–ª–µ—Ä—Ç–∞—Ö');
      return;
    }
    
    const comment = document.getElementById('action-comment')?.value || '';
    const nextAction = document.getElementById('next-action')?.value || '';
    const nextActionDate = document.getElementById('next-action-date')?.value || '';
    const potentialOrderDate = document.getElementById('potential-order-date')?.value || '';
    const potentialAmount = document.getElementById('potential-amount')?.value || '';
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = window.state?.currentUserId || 'unknown';
    const companyId = window.state?.currentCompanyId || 'unknown';
    
    if (userId === 'unknown' || companyId === 'unknown') {
      console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –∫–æ–º–ø–∞–Ω—ñ—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
    }
    
    const now = new Date();
    const actionData = {
      id: `action_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type: actionType,
      date: now.toISOString().split('T')[0],
      time: now.toTimeString().slice(0, 5),
      comment: comment,
      nextAction: nextAction,
      nextActionDate: nextActionDate,
      status: 'completed',
      userId: userId,
      createdAt: now.toISOString() // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –¥–∞—Ç—É –≤–º–µ—Å—Ç–æ serverTimestamp –¥–ª—è –º–∞—Å—Å–∏–≤–∞
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (!window.clientActionsData[clientCode]) {
    window.clientActionsData[clientCode] = {
        status: 'new',
      actions: [],
      lastActivity: null,
      potentialOrderDate: null,
      expectedAmount: null
    };
    }
    
    window.clientActionsData[clientCode].actions.push(actionData);
    window.clientActionsData[clientCode].lastActivity = now.toISOString();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "resolved" –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –ø—Ä–æ—à–ª–æ–º
    let newStatus = 'in_progress';
    if (potentialOrderDate) {
      const orderDate = new Date(potentialOrderDate);
      const today = new Date();
      today.setHours(0, 0, 0, 0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–∞—Ç
      
      if (orderDate < today) {
        newStatus = 'resolved';
      }
    }
    
    window.clientActionsData[clientCode].status = newStatus;
    
    if (potentialOrderDate) {
      window.clientActionsData[clientCode].potentialOrderDate = potentialOrderDate;
    }
    if (potentialAmount) {
      window.clientActionsData[clientCode].expectedAmount = parseFloat(potentialAmount);
    }
    
    // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    missedForecastCache = null;
    lastFilterHash = null;
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Firebase
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Firebase
      const { db, serverTimestamp } = await import('./firebase.js');
      
      window.clientActionsData[clientCode].updatedAt = serverTimestamp(); // –ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
      const { collection, doc, setDoc } = await import('./firebase.js');
      const docRef = doc(db, 'companies', companyId, 'clientAlerts', clientCode);
      
      await setDoc(docRef, window.clientActionsData[clientCode], { merge: true });
      
    } catch (firebaseError) {
      console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Firebase, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ:', firebaseError);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –≤ localStorage –∫–∞–∫ fallback
      try {
        const localActions = JSON.parse(localStorage.getItem('clientActionsData') || '{}');
        localActions[clientCode] = window.clientActionsData[clientCode];
        localStorage.setItem('clientActionsData', JSON.stringify(localActions));
      } catch (localError) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', localError);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (window.renderSignals) {
      window.renderSignals();
    } else {
      // –ï—Å–ª–∏ renderSignals –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
      const activeTab = document.querySelector('.nav-btn.active')?.getAttribute('data-tab') || currentTab;
      if (activeTab) {
        renderTabContent(activeTab);
      } else {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É
        renderTabContent(currentTab);
      }
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    setTimeout(() => {
      const activeTab = document.querySelector('.nav-btn.active')?.getAttribute('data-tab') || currentTab;
      if (activeTab) {
        renderTabContent(activeTab);
      }
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É "–ü—Ä–æ–≥–Ω–æ–∑" –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
      if (activeTab === 'forecast') {
        setTimeout(() => {
          renderMissedForecast();
        }, 100);
      }
      
      // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
      if (window.setupDynamicEventListeners) {
        window.setupDynamicEventListeners();
      }
    }, 100);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showActionNotification('–î—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!', 'success');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥—ñ—ó:', error);
    showActionNotification('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥—ñ—ó: ' + error.message, 'error');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
function showActionNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `fixed top-4 right-4 z-[200] px-4 py-2 rounded-md text-white ${
    type === 'success' ? 'bg-green-600' : 
    type === 'error' ? 'bg-red-600' : 'bg-blue-600'
  }`;
  notification.textContent = message;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    notification.remove();
  }, 3000);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
function toggleLostProducts(elementId) {
  const element = document.getElementById(elementId);
  if (element) {
    element.classList.toggle('hidden');
  }
}




// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–∞–Ω–∞–ª–æ–≥ –∏–∑ alerts.js)
function getClientName(clientCode, fallbackName) {
  if (signalizationData && signalizationData.clientNames && signalizationData.clientNames[clientCode]) {
    return signalizationData.clientNames[clientCode];
  }
  return fallbackName || clientCode;
}







// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü
function renderTable(list, headers, rowFn, rowClassFn) {
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
  let contentBody = document.getElementById('content-body');
  
  // –Ø–∫—â–æ –º–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—ó –∫–æ–Ω—Ç–µ–Ω—Ç
  const activeTab = document.querySelector('.nav-btn.active')?.getAttribute('data-tab') || currentTab;
  if (activeTab && activeTab !== 'dashboard') {
    const tabContent = document.getElementById(`${activeTab}-tab-content`);
    if (tabContent) {
      contentBody = tabContent;
    }
  }
  
  if (!contentBody) {
    console.warn('‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É —Ç–∞–±–ª–∏—Ü—ñ');
    return;
  }
  
  contentBody.innerHTML = `
    <div class="table-container">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-bold text-white">${getSignalTitle()}</h2>
        <span class="text-xs text-gray-400">${list.length} –∫–ª—ñ—î–Ω—Ç—ñ–≤</span>
          </div>
      <div class="overflow-x-auto">
        <table class="min-w-full text-sm">
          <thead class="bg-gray-800">
            <tr>
              ${headers.map(h => `<th class="px-4 py-3 text-left text-gray-300 font-medium">${h}</th>`).join('')}
                  </tr>
                </thead>
          <tbody class="divide-y divide-gray-700">
            ${list.map(c => `<tr class="${rowClassFn ? rowClassFn(c) : 'hover:bg-gray-800/50 transition-colors'}">${rowFn(c).map(cell => `<td class="px-4 py-3">${cell}</td>`).join('')}</tr>`).join('')}
                </tbody>
              </table>
      </div>
    </div>
  `;
  
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ event listeners –ø—ñ—Å–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É —Ç–∞–±–ª–∏—Ü—ñ
  if (window.setupDynamicEventListeners) {
    window.setupDynamicEventListeners();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
function getSignalTitle() {
  const activeTab = document.querySelector('.nav-btn.active')?.getAttribute('data-tab') || currentTab;
  switch(activeTab) {
    case 'revenue-drop': return '–ö–ª—ñ—î–Ω—Ç–∏ –∑—ñ —Å–ø–∞–¥–æ–º –≤–∏—Ä—É—á–∫–∏ >30%';
    case 'frequency-drop': return '–ö–ª—ñ—î–Ω—Ç–∏ –∑ –ø–∞–¥—ñ–Ω–Ω—è–º —á–∞—Å—Ç–æ—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å';
    case 'avgcheck-drop': return '–ö–ª—ñ—î–Ω—Ç–∏ –∑—ñ –∑–º–µ–Ω—à–µ–Ω–Ω—è–º —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–µ–∫–∞';
    case 'missed-forecast': return '–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –Ω–µ –∑–∞–º–æ–≤–∏–ª–∏ —É –ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—É –¥–∞—Ç—É';
    case 'product-drop': return '–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –∫—É–ø—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏';
    case 'overdue-agreements': return '–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ';
    case 'manager-analytics': return '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤';
    case 'client-reports': return '–î–µ—Ç–∞–ª—å–Ω—ñ –∑–≤—ñ—Ç–∏ –ø–æ –∫–ª—ñ—î–Ω—Ç–∞—Ö';
    default: return '–°–∏–≥–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è';
  }
}

// –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ (—Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∞ –∑ alerts.js)
function passesFilters(sale) {
  const clientCode = sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'];
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç userAccess –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ –º–æ–¥—É–ª—è –ü–æ–º—ñ—á–Ω–∏–∫ –ø—Ä–æ–¥–∞–∂—É
  const userAccess = {
    userId: window.state?.currentUserId,
    employeeId: null,
    employee: null,
    role: window.state?.currentUserRole?.toLowerCase(),
    departmentId: window.state?.currentUserDepartment,
    isAdmin: window.state?.isAdmin || false
  };
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –ø–æ userId
  if (userAccess.userId && window.managersData && window.managersData.length > 0) {
    const currentEmployee = window.managersData.find(emp => emp.userId === userAccess.userId);
    if (currentEmployee) {
      userAccess.employeeId = currentEmployee.id;
      userAccess.employee = currentEmployee;
      // –í–∏–∑–Ω–∞—á–∞—î–º–æ departmentId —è–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–∏–π
      if (!userAccess.departmentId && currentEmployee.department) {
        if (typeof currentEmployee.department === 'object' && currentEmployee.department.id) {
          userAccess.departmentId = currentEmployee.department.id;
        } else if (typeof currentEmployee.department === 'string') {
          userAccess.departmentId = currentEmployee.department;
        }
      }
    }
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–∞–Ω–∏—Ö
  if (!hasAccessToClient(clientCode, userAccess)) {
    return false;
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ –¥–æ–≤—ñ–¥–Ω–∏–∫—É –∫–ª—ñ—î–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∑ API
  const clientInfo = signalizationData.clientManagerDirectory[clientCode];
  if (!clientInfo) {
    // –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç–∞ –Ω–µ–º–∞—î –≤ –¥–æ–≤—ñ–¥–Ω–∏–∫—É API, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä—É –ª–æ–≥—ñ–∫—É —è–∫ fallback
    return passesFiltersOldLogic(sale);
  }
  
  // –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–ª—ñ—î–Ω—Ç –Ω–∞–ª–µ–∂–∏—Ç—å —Ü—å–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ –¥–æ–≤—ñ–¥–Ω–∏–∫—É
  if (filters.manager) {
    const managerName = getManagerName(filters.manager);
    if (!managerName || !clientInfo.manager) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É
    return clientInfo.manager.trim() === managerName.trim();
  }
  
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª (–±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞) - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏–∑ —ç—Ç–æ–≥–æ –æ—Ç–¥–µ–ª–∞
    else if (filters.department) {
      if (signalizationData.managersData && signalizationData.managersData.length > 0) {
        // –†–µ–∂–∏–º Firebase: –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞
        const departmentManagers = signalizationData.managersData.filter(manager => {
          return manager.departmentId === filters.department ||
                 manager.department === filters.department ||
                 (manager.department && manager.department.id === filters.department);
        });
        
        const departmentManagerNames = departmentManagers.map(m => m.name);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç –æ–¥–Ω–æ–º—É –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ—Ç–¥–µ–ª–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É
        return departmentManagerNames.includes(clientInfo.manager);
      } else {
        // Fallback —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        return passesFiltersOldLogic(sale);
      }
    }
  
  return true;
}

// –°—Ç–∞—Ä–∞ –ª–æ–≥—ñ–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —è–∫ fallback (—Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∞ –∑ alerts.js)
function passesFiltersOldLogic(sale) {
  // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–¥ –∫–ª—ñ—î–Ω—Ç–∞ –∑ –ø—Ä–æ–¥–∞–∂—É
  const clientCode = sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'];
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç userAccess –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ –º–æ–¥—É–ª—è –ü–æ–º—ñ—á–Ω–∏–∫ –ø—Ä–æ–¥–∞–∂—É
  const userAccess = {
    userId: window.state?.currentUserId,
    employeeId: null,
    employee: null,
    role: window.state?.currentUserRole?.toLowerCase(),
    departmentId: window.state?.currentUserDepartment,
    isAdmin: window.state?.isAdmin || false
  };
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –ø–æ userId
  if (userAccess.userId && window.managersData && window.managersData.length > 0) {
    const currentEmployee = window.managersData.find(emp => emp.userId === userAccess.userId);
    if (currentEmployee) {
      userAccess.employeeId = currentEmployee.id;
      userAccess.employee = currentEmployee;
      // –í–∏–∑–Ω–∞—á–∞—î–º–æ departmentId —è–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–∏–π
      if (!userAccess.departmentId && currentEmployee.department) {
        if (typeof currentEmployee.department === 'object' && currentEmployee.department.id) {
          userAccess.departmentId = currentEmployee.department.id;
        } else if (typeof currentEmployee.department === 'string') {
          userAccess.departmentId = currentEmployee.department;
        }
      }
    }
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–∞–Ω–∏—Ö
  if (!userAccess.isAdmin) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ –≤—Å—ñ—Ö –∞–ª–µ—Ä—Ç—ñ–≤ –∫–æ–º–ø–∞–Ω—ñ—ó
    if (window.hasPermission && window.hasPermission('alerts_view_all_clients')) {
      // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –±–∞—á–∏—Ç–∏ –≤—Å—ñ –∞–ª–µ—Ä—Ç–∏ - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
    } else if (window.hasPermission && window.hasPermission('alerts_view_department_clients')) {
      // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –±–∞—á–∏—Ç–∏ –∞–ª–µ—Ä—Ç–∏ —Å–≤–æ–≥–æ –≤—ñ–¥–¥—ñ–ª—É
      const currentUser = signalizationData.managersData?.find(emp => emp.id === userAccess.employeeId);
      if (currentUser && currentUser.department) {
        const userDeptId = typeof currentUser.department === 'object' ? currentUser.department.id : currentUser.department;
        const departmentManagers = signalizationData.managersData?.filter(manager => {
          return manager.departmentId === userDeptId ||
                 manager.department === userDeptId ||
                 (manager.department && manager.department.id === userDeptId);
        }) || [];
        
        const departmentManagerNames = departmentManagers.map(m => m.name);
        if (!departmentManagerNames.includes(sale['–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä'])) {
          return false;
        }
      }
    } else if (window.hasPermission && window.hasPermission('alerts_view_manager_clients')) {
      // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –±–∞—á–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Å–≤–æ—ó—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
      const currentUser = signalizationData.managersData?.find(emp => emp.id === userAccess.employeeId);
      if (currentUser && sale['–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä'] !== currentUser.name) {
        return false;
      }
    } else {
      // –ù–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ - –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—Å–µ
      return false;
    }
  }
  
  // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–¥–º—ñ–Ω, –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –ø–æ —Ä–æ–ª—è—Ö
  if (!userAccess.isAdmin && userAccess.employeeId) {
    if (userAccess.role && userAccess.role.includes('–º–µ–Ω–µ–¥–∂')) {
      // –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞—á–∏—Ç—å —Ç—ñ–ª—å–∫–∏ —Å–≤–æ—ó—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
      const currentUser = signalizationData.managersData?.find(emp => emp.id === userAccess.employeeId);
      if (currentUser && sale['–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä'] !== currentUser.name) {
        return false;
      }
    } else if (userAccess.role && userAccess.role.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫')) {
      // –ö–µ—Ä—ñ–≤–Ω–∏–∫ –±–∞—á–∏—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤ —Å–≤–æ–≥–æ –≤—ñ–¥–¥—ñ–ª—É
      const currentUser = signalizationData.managersData?.find(emp => emp.id === userAccess.employeeId);
      if (currentUser && currentUser.department) {
        const userDeptId = typeof currentUser.department === 'object' ? currentUser.department.id : currentUser.department;
        const clientInfo = signalizationData.clientManagerDirectory[clientCode];
        if (!clientInfo) return false;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–ª—ñ—î–Ω—Ç –Ω–∞–ª–µ–∂–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –∑ –≤—ñ–¥–¥—ñ–ª—É –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞
        const departmentManagers = signalizationData.managersData?.filter(manager => {
          return manager.departmentId === userDeptId ||
                 manager.department === userDeptId ||
                 (manager.department && manager.department.id === userDeptId);
        }) || [];
        
        const departmentManagerNames = departmentManagers.map(m => m.name);
        if (!departmentManagerNames.includes(clientInfo.manager)) {
          return false;
        }
      }
    }
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ –¥–æ–≤—ñ–¥–Ω–∏–∫—É –∫–ª—ñ—î–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∑ API
  const clientInfo = signalizationData.clientManagerDirectory[clientCode];
  if (!clientInfo) {
    // –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç–∞ –Ω–µ–º–∞—î –≤ –¥–æ–≤—ñ–¥–Ω–∏–∫—É API, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ false
    return false;
  }
  
  // –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä - —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ –Ω—å–æ–º—É
  if (filters.manager) {
    if (signalizationData.managersData && signalizationData.managersData.length > 0) {
      // –†–µ–∂–∏–º Firebase: —à—É–∫–∞—î–º–æ –ø–æ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      const manager = signalizationData.managersData.find(m => m.id === filters.manager);
      if (!manager || sale['–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä'] !== manager.name) {
        return false;
      }
    } else {
      // Fallback —Ä–µ–∂–∏–º: –ø—Ä—è–º–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —ñ–º–µ–Ω—ñ
      if (sale['–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä'] !== filters.manager) {
        return false;
      }
    }
  }
  // –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–¥—ñ–ª (–±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞) - –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –≤—ñ–¥–¥—ñ–ª—É
  else if (filters.department) {
    if (signalizationData.managersData && signalizationData.managersData.length > 0) {
      // –†–µ–∂–∏–º Firebase: –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –≤—ñ–¥–¥—ñ–ª—É
      const departmentManagers = signalizationData.managersData.filter(manager => {
        return manager.departmentId === filters.department ||
               manager.department === filters.department ||
               (manager.department && manager.department.id === filters.department);
      });
      
      const departmentManagerNames = departmentManagers.map(m => m.name);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–¥–∞–∂—É —Å–µ—Ä–µ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –≤—ñ–¥–¥—ñ–ª—É
      if (!departmentManagerNames.includes(sale['–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä'])) {
        return false;
      }
    } else {
      // Fallback —Ä–µ–∂–∏–º: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞–Ω—ñ –∑ –ø—Ä–æ–¥–∞–∂—ñ–≤
      const managersInDepartment = [...new Set(signalizationData.masterData.filter(d => d['–í—ñ–¥–¥—ñ–ª'] === filters.department).map(d => d['–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä']))];
      
      if (!managersInDepartment.includes(sale['–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä'])) {
        return false;
      }
    }
  }
  
  return true;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ ID

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –∫–ª—ñ—î–Ω—Ç—ñ–≤
function checkAndUpdateClientStatuses() {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  
  Object.keys(signalizationData.clientActionsData).forEach(clientCode => {
    const clientData = signalizationData.clientActionsData[clientCode];
    if (!clientData || clientData.status === 'resolved' || clientData.status === 'closed') return;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—É –¥–∞—Ç—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    if (clientData.potentialOrderDate) {
      const orderDate = new Date(clientData.potentialOrderDate);
      if (orderDate < today) {
        signalizationData.clientActionsData[clientCode].status = 'resolved';
      }
    }
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –∫–ª—ñ—î–Ω—Ç–∞
window.saveClientStatus = async function(clientCode) {
  try {
    const selectedStatus = document.querySelector('input[name="status"]:checked')?.value;
    if (!selectedStatus) {
      alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—É—Å');
      return;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
    if (!window.hasPermission || !window.hasPermission('alerts_change_status')) {
      alert('–ü–æ–º–∏–ª–∫–∞: –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É');
      return;
    }
    
    const userId = window.state?.currentUserId;
    const companyId = window.state?.currentCompanyId;
    
    if (!userId || !companyId) {
      alert('–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –∫–æ–º–ø–∞–Ω—ñ—é');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!signalizationData.clientActionsData[clientCode]) {
      signalizationData.clientActionsData[clientCode] = {
        status: 'new',
        actions: [],
        lastActivity: null,
        potentialOrderDate: null,
        expectedAmount: null
      };
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ signalizationData
    signalizationData.clientActionsData[clientCode].status = selectedStatus;
    signalizationData.clientActionsData[clientCode].lastActivity = new Date().toISOString();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ window.clientActionsData –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (!window.clientActionsData[clientCode]) {
      window.clientActionsData[clientCode] = {
        status: 'new',
        actions: [],
        lastActivity: null,
        potentialOrderDate: null,
        expectedAmount: null
      };
    }
    
    window.clientActionsData[clientCode].status = selectedStatus;
    window.clientActionsData[clientCode].lastActivity = new Date().toISOString();
    
    // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    missedForecastCache = null;
    lastFilterHash = null;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
    const { db, doc, setDoc, serverTimestamp } = await import('./firebase.js');
    const docRef = doc(db, 'companies', companyId, 'clientAlerts', clientCode);
    
    await setDoc(docRef, {
      ...signalizationData.clientActionsData[clientCode],
      updatedAt: serverTimestamp()
    }, { merge: true });
    
    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    document.querySelector('.fixed')?.remove();
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const activeTab = document.querySelector('.nav-btn.active')?.getAttribute('data-tab') || currentTab;
    if (activeTab) {
      renderTabContent(activeTab);
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–ª–∏—Ü–µ
    setTimeout(() => {
      const statusElements = document.querySelectorAll(`[data-client-code="${clientCode}"] .client-status`);
      statusElements.forEach(element => {
        element.innerHTML = renderClientStatus(clientCode);
      });
    }, 50);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É "–ü—Ä–æ–≥–Ω–æ–∑" –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
    if (activeTab === 'forecast') {
      setTimeout(() => {
        renderMissedForecast();
      }, 100);
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    showActionNotification(`–°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${selectedStatus}`, 'success');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É:', error);
    showActionNotification('–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É: ' + error.message, 'error');
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ –¥–µ—Ç–∞–ª–µ–π –¥—ñ–π –ø–æ –¥–∞—Ç—ñ
window.toggleActionDetails = function(safeId) {
  const details = document.getElementById(safeId);
  const arrow = document.getElementById(`arrow-${safeId}`);
  
  if (!details || !arrow) return;
  
  // –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ –≤–∏–¥–∏–º—ñ—Å—Ç—å
  details.classList.toggle('hidden');
  
  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç—Ä—ñ–ª–∫—É
  if (details.classList.contains('hidden')) {
    arrow.style.transform = 'rotate(0deg)';
  } else {
    arrow.style.transform = 'rotate(90deg)';
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –¥—ñ–π –∫–ª—ñ—î–Ω—Ç–∞
function renderClientActionsHistory(clientCode) {
  const clientData = window.clientActionsData?.[clientCode] || signalizationData.clientActionsData?.[clientCode];
  
  if (!clientData || !clientData.actions || clientData.actions.length === 0) {
    return `
      <div class="text-center text-gray-400 py-8">
        <svg class="w-12 h-12 mx-auto mb-4 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9zM4 5a2 2 0 012-2v1a1 1 0 001 1h6a1 1 0 001-1V3a2 2 0 012 2v6a2 2 0 01-2 2H6a2 2 0 01-2-2V5zM8 10a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z"/>
        </svg>
        <p class="text-sm">–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å–∞–Ω–∏—Ö –¥—ñ–π –ø–æ —Ü—å–æ–º—É –∫–ª—ñ—î–Ω—Ç—É</p>
        <p class="text-xs text-gray-500 mt-1">–î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à—É –¥—ñ—é —á–µ—Ä–µ–∑ –º–µ–Ω—é "–î—ñ—ó" –≤ —Ç–∞–±–ª–∏—Ü—ñ –∞–ª–µ—Ä—Ç—ñ–≤</p>
      </div>
    `;
  }
  
  // –°–æ—Ä—Ç—É—î–º–æ –¥—ñ—ó –ø–æ –¥–∞—Ç—ñ (–Ω–æ–≤—ñ –∑–≤–µ—Ä—Ö—É)  
  const sortedActions = [...clientData.actions].sort((a, b) => {
    const dateA = a && a.createdAt ? new Date(a.createdAt) : new Date(0);
    const dateB = b && b.createdAt ? new Date(b.createdAt) : new Date(0);
    return dateB - dateA;
  });
  
  // –ì—Ä—É–ø—É—î–º–æ –¥—ñ—ó –ø–æ –¥–∞—Ç–∞—Ö
  const groupedByDate = {};
  sortedActions.forEach(action => {
    if (!action || !action.createdAt) return; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥—ñ—ó –±–µ–∑ –¥–∞—Ç–∏
    
    const createdDate = new Date(action.createdAt);
    const dateKey = createdDate.toLocaleDateString('uk-UA');
    if (!groupedByDate[dateKey]) {
      groupedByDate[dateKey] = [];
    }
    groupedByDate[dateKey].push(action);
  });
  
  // –°–æ—Ä—Ç—É—î–º–æ –¥–∞—Ç–∏ (–Ω–æ–≤—ñ –∑–≤–µ—Ä—Ö—É)
  const sortedDates = Object.keys(groupedByDate).sort((a, b) => {
    const dateA = new Date(a.split('.').reverse().join('-'));
    const dateB = new Date(b.split('.').reverse().join('-'));
    return dateB - dateA;
  });
  
  return `
    <div class="space-y-2">
      <div class="flex justify-between items-center mb-4">
        <h5 class="text-sm font-semibold text-gray-300">–í—Å—å–æ–≥–æ –¥—ñ–π: ${sortedActions.length}</h5>
        <div class="text-xs text-gray-400">
          –°—Ç–∞—Ç—É—Å: ${renderClientStatus(clientCode)}
        </div>
      </div>
      
      ${sortedDates.map(dateKey => {
        const dayActions = groupedByDate[dateKey];
        const safeId = `actions-${clientCode}-${dateKey}`.replace(/[^\w-]/g, '_');
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–∫–æ–Ω–∫–∏ –¥–ª—è –¥—ñ–π –≤ —Ü–µ–π –¥–µ–Ω—å
        const dayActionTypes = [...new Set(dayActions.map(a => a.type))];
  const actionIcons = {
          'call': 'üìû',
          'meeting': 'ü§ù', 
          'email': 'üìß',
          'proposal': 'üìÑ'
        };
        const dayIcons = dayActionTypes.map(type => actionIcons[type] || 'üìã').join(' ');

  return `
          <div class="bg-gray-800 rounded-lg border border-gray-700">
            <!-- –ö–æ–º–ø–∞–∫—Ç–Ω–∏–π —Ä—è–¥–æ–∫ –¥–∞—Ç–∏ -->
            <div class="flex justify-between items-center p-3 cursor-pointer hover:bg-gray-750 transition-colors" 
                 onclick="toggleActionDetails('${safeId}')">
              <div class="flex items-center gap-3">
          <div class="flex items-center gap-2">
                  <svg class="w-4 h-4 text-gray-400 transition-transform duration-200" id="arrow-${safeId}" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"/>
                  </svg>
                  <span class="font-medium text-white">${dateKey}</span>
          </div>
                <div class="text-lg">${dayIcons}</div>
              </div>
              <div class="flex items-center gap-3">
                <span class="text-xs px-2 py-1 bg-blue-600/20 text-blue-300 rounded-full">
                  ${dayActions.length} ${dayActions.length === 1 ? '–¥—ñ—è' : dayActions.length < 5 ? '–¥—ñ—ó' : '–¥—ñ–π'}
                </span>
                <span class="text-xs text-gray-500">
                  ${dayActions[0] && dayActions[0].createdAt ? new Date(dayActions[0].createdAt).toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' }) : ''}
                  ${dayActions.length > 1 && dayActions[dayActions.length-1] && dayActions[dayActions.length-1].createdAt ? ` - ${new Date(dayActions[dayActions.length-1].createdAt).toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' })}` : ''}
                </span>
              </div>
            </div>
            
            <!-- –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (–ø—Ä–∏—Ö–æ–≤–∞–Ω–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º) -->
            <div id="${safeId}" class="hidden border-t border-gray-700">
              ${dayActions.map((action, index) => {
                const actionLabels = {
                  'call': '–î–∑–≤—ñ–Ω–æ–∫',
                  'meeting': '–ó—É—Å—Ç—Ä—ñ—á',
                  'email': 'Email',
                  'proposal': '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è'
                };
                
                const createdDate = action && action.createdAt ? new Date(action.createdAt) : new Date();
                const formattedTime = createdDate.toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' });
                
                return `
                  <div class="p-3 ${index < dayActions.length - 1 ? 'border-b border-gray-700/50' : ''} bg-gray-750/30">
                    <div class="flex justify-between items-start mb-2">
                      <div class="flex items-center gap-2">
                        <span class="text-base">${actionIcons[action.type] || 'üìã'}</span>
                        <span class="font-medium text-gray-200">${actionLabels[action.type] || action.type}</span>
                      </div>
                      <div class="text-xs text-gray-500">
                        ${formattedTime}
                      </div>
                    </div>
                    
                    ${action.comment ? `
                      <div class="mb-2 ml-6">
                        <span class="text-xs text-gray-400">–ö–æ–º–µ–Ω—Ç–∞—Ä:</span>
                        <p class="text-sm text-gray-300 mt-1">${action.comment}</p>
                      </div>
                    ` : ''}
                    
                    ${action.nextAction ? `
                      <div class="mb-2 ml-6">
                        <span class="text-xs text-gray-400">–ù–∞—Å—Ç—É–ø–Ω–∞ –¥—ñ—è:</span>
                        <p class="text-sm text-blue-300">${action.nextAction}</p>
                        ${action.nextActionDate ? `<span class="text-xs text-gray-500">–Ω–∞ ${action.nextActionDate}</span>` : ''}
                      </div>
                    ` : ''}
                  </div>
                `;
              }).join('')}
            </div>
          </div>
        `;
      }).join('')}
      
      ${clientData.potentialOrderDate ? `
        <div class="bg-green-900/30 border border-green-600 rounded-lg p-3 mt-4">
          <div class="flex items-center gap-2 mb-1">
            <span class="text-green-400">üéØ</span>
            <span class="font-medium text-green-200">–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</span>
          </div>
          <p class="text-sm text-gray-200">
            –î–∞—Ç–∞: <span class="text-green-300">${clientData.potentialOrderDate}</span>
            ${clientData.expectedAmount ? ` ‚Ä¢ –°—É–º–∞: <span class="text-green-300">${clientData.expectedAmount} –≥—Ä–Ω</span>` : ''}
          </p>
        </div>
      ` : ''}
    </div>
  `;
}

// –®–≤–∏–¥–∫–∞ –¥—ñ—è –ø–æ –∫–ª—ñ—î–Ω—Ç—É
window.quickAction = function(clientCode, actionType) {
  // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –¥—ñ—ó
  showActionModal(clientCode, actionType);
};

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
window.checkAndUpdateClientStatuses = checkAndUpdateClientStatuses;
window.renderClientActionsHistory = renderClientActionsHistory;

// –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫ –ø–µ—Ä–µ–¥–∞—á –∫–ª—ñ—î–Ω—Ç—ñ–≤
function switchTransferredClientsTab(transferType) {
  // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –≤–∫–ª–∞–¥–∫—É
  document.querySelectorAll('.transferred-clients-tab').forEach(tab => {
    tab.classList.remove('active');
  });
  
  // –ë–µ–∑–ø–µ—á–Ω–æ –¥–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å
  const activeTab = document.querySelector(`[data-transfer="${transferType}"]`);
  if (activeTab) {
    activeTab.classList.add('active');
  } else {
    console.warn(`–í–∫–ª–∞–¥–∫–∞ –∑ data-transfer="${transferType}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
  }
  
  const contentDiv = document.getElementById('transferred-clients-tab-content');
  
  switch(transferType) {
    case 'list':
      renderTransfersList();
      break;
    case 'statistics':
      renderTransfersStatistics();
      break;
  }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ–¥–∞—á
function renderTransfersList() {
  const contentDiv = document.getElementById('transferred-clients-tab-content');
  
  if (!signalizationData || !signalizationData.masterData) {
    contentDiv.innerHTML = '<p>–î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ</p>';
    return;
  }

  // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–µ—Ä–µ–¥–∞—á—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤
  const transfers = analyzeClientTransfers();
  
  contentDiv.innerHTML = `
    ${transfers.length > 0 ? `
      <div class="stats-summary mb-4">
        <div class="flex justify-between items-center mb-4">
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="bg-gray-100 p-3 rounded-lg">
              <h4 class="text-sm font-semibold text-gray-800">–í—Å—å–æ–≥–æ –ø–µ—Ä–µ–¥–∞—á</h4>
              <p class="text-xl font-bold text-blue-600">${transfers.length}</p>
              <p class="text-xs text-gray-500">–ü–µ—Ä–µ–¥–∞—á—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ ${currentPeriod} –º—ñ—Å—è—Ü—ñ</p>
            </div>
            <div class="bg-gray-100 p-3 rounded-lg">
              <h4 class="text-sm font-semibold text-gray-800">–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤</h4>
              <p class="text-xl font-bold text-green-600">${new Set(transfers.map(t => t.clientCode)).size}</p>
              <p class="text-xs text-gray-500">–ö–ª—ñ—î–Ω—Ç–∏ –∑ –ø–µ—Ä–µ–¥–∞—á–∞–º–∏ –∑–∞ ${currentPeriod} –º—ñ—Å.</p>
            </div>
            <div class="bg-gray-100 p-3 rounded-lg">
              <h4 class="text-sm font-semibold text-gray-800">–ó–∞–ª—É—á–µ–Ω–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤</h4>
              <p class="text-xl font-bold text-purple-600">${new Set(transfers.flatMap(t => [t.fromManager, t.toManager])).size}</p>
              <p class="text-xs text-gray-500">–ú–µ–Ω–µ–¥–∂–µ—Ä–∏ –∑–∞ ${currentPeriod} –º—ñ—Å.</p>
            </div>
          </div>
        </div>
      </div>
      <div class="table-container">
        ${renderTransfersTable(transfers)}
      </div>
    ` : `
      <div class="empty-state">
        <i class="fas fa-exchange-alt text-gray-400 text-4xl mb-4"></i>
        <h4 class="text-xl font-semibold text-gray-600 mb-2">–ü–µ—Ä–µ–¥–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h4>
        <p class="text-gray-500">–ó–∞ –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –ø–µ—Ä–µ–¥–∞—á –∫–ª—ñ—î–Ω—Ç—ñ–≤ –º—ñ–∂ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –Ω–µ –±—É–ª–æ</p>
      </div>
    `}
  `;
  
  // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ –ø–µ—Ä–µ–¥–∞—á
  setupDynamicEventListeners();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  setupTransfersSortHandlers(transfers);
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥–∞—á
function renderTransfersStatistics() {
  const contentDiv = document.getElementById('transferred-clients-tab-content');
  
  if (!signalizationData || !signalizationData.masterData) {
    contentDiv.innerHTML = '<p>–î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ</p>';
    return;
  }
  
  // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–µ—Ä–µ–¥–∞—á—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤
  const transfers = analyzeClientTransfers();
  
  if (transfers.length === 0) {
    contentDiv.innerHTML = `
      <div class="empty-state">
        <i class="fas fa-chart-bar text-gray-400 text-4xl mb-4"></i>
        <h4 class="text-xl font-semibold text-gray-600 mb-2">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</h4>
        <p class="text-gray-500">–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</p>
      </div>
    `;
    return;
  }
  
  // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const statistics = analyzeTransfersStatistics(transfers) || {
    totalTransfers: 0,
    uniqueClients: 0,
    uniqueManagers: 0,
    periods: {},
    departments: {},
    managers: {}
  };
  const conversion = analyzeTransferConversion(transfers) || {
    conversionRate: 0,
    averageRevenueAfterTransfer: 0
  };
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –º–µ—Å—è—Ü–µ–≤ –∏ –ª–µ—Ç
  const monthOptions = Array.from({length: 12}, (_, i) => 
    `<option value="${i + 1}">${getMonthName(i + 1)}</option>`
  ).join('');
  
  const yearOptions = generateYearOptions();
  
  contentDiv.innerHTML = `
    <div class="transfers-statistics-content">
      <!-- –§–∏–ª—å—Ç—Ä—ã –ø–æ –ø–µ—Ä–∏–æ–¥—É -->
      <div class="mb-6 p-4 bg-gray-800 rounded-lg">
        <h3 class="text-lg font-semibold text-white mb-4">–§—ñ–ª—å—Ç—Ä –∑–∞ –ø–µ—Ä—ñ–æ–¥–æ–º</h3>
        <div class="flex items-center space-x-4">
          <div class="flex items-center space-x-2">
            <label class="text-gray-300 text-sm">–ú—ñ—Å—è—Ü—å:</label>
            <select class="month-select bg-gray-700 text-white border border-gray-600 rounded px-3 py-1 text-sm">
              ${monthOptions}
            </select>
          </div>
          <div class="flex items-center space-x-2">
            <label class="text-gray-300 text-sm">–†—ñ–∫:</label>
            <select class="year-select bg-gray-700 text-white border border-gray-600 rounded px-3 py-1 text-sm">
              ${yearOptions}
            </select>
          </div>
          <button class="apply-date-filter px-4 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 transition-colors">
            –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏
          </button>
        </div>
      </div>
      
      <!-- –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <div class="bg-gray-800 p-4 rounded-lg">
          <h4 class="text-sm font-semibold text-gray-300 mb-2">–í—Å—å–æ–≥–æ –ø–µ—Ä–µ–¥–∞—á</h4>
          <p class="text-2xl font-bold text-blue-400">${statistics.totalTransfers}</p>
          </div>
        <div class="bg-gray-800 p-4 rounded-lg">
          <h4 class="text-sm font-semibold text-gray-300 mb-2">–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤</h4>
          <p class="text-2xl font-bold text-green-400">${statistics.uniqueClients}</p>
          </div>
        <div class="bg-gray-800 p-4 rounded-lg">
          <h4 class="text-sm font-semibold text-gray-300 mb-2">–ó–∞–ª—É—á–µ–Ω–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤</h4>
          <p class="text-2xl font-bold text-purple-400">${statistics.uniqueManagers}</p>
          </div>
        <div class="bg-gray-800 p-4 rounded-lg">
          <h4 class="text-sm font-semibold text-gray-300 mb-2">–ö–æ–Ω–≤–µ—Ä—Å—ñ—è</h4>
          <p class="text-2xl font-bold text-yellow-400">${conversion.conversionRate}%</p>
        </div>
      </div>
      
      <!-- –°—É–º–º—ã –æ—Ç–≥—Ä—É–∑–∫–∏ -->
      <div class="mb-6 p-4 bg-gray-800 rounded-lg">
        <h3 class="text-lg font-semibold text-white mb-4">–°—É–º–º–∏ –≤—ñ–¥–≥—Ä—É–∑–∫–∏</h3>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="text-center">
            <h4 class="text-sm font-semibold text-gray-300 mb-2">–î–æ –ø–µ—Ä–µ–¥–∞—á—ñ</h4>
            <p class="text-xl font-bold text-green-400">${calculateTotalRevenueBeforeTransfer(transfers).toFixed(2)} –≥—Ä–Ω</p>
          </div>
          <div class="text-center">
            <h4 class="text-sm font-semibold text-gray-300 mb-2">–ü—ñ—Å–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ</h4>
            <p class="text-xl font-bold text-blue-400">${calculateTotalRevenueAfterTransfer(transfers).toFixed(2)} –≥—Ä–Ω</p>
          </div>
          <div class="text-center">
            <h4 class="text-sm font-semibold text-gray-300 mb-2">–ó–º—ñ–Ω–∞</h4>
            <p class="text-xl font-bold ${calculateRevenueChange(transfers) >= 0 ? 'text-green-400' : 'text-red-400'}">
              ${calculateRevenueChange(transfers).toFixed(2)} –≥—Ä–Ω
            </p>
          </div>
        </div>
      </div>
      
      <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º -->
      <div class="mb-6">
        <h3 class="text-lg font-semibold text-white mb-4">–ü–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö</h3>
        <div class="bg-gray-800 rounded-lg overflow-hidden">
          <table class="w-full">
            <thead class="bg-gray-700">
              <tr>
                <th class="px-4 py-2 text-left text-gray-300">–ü–µ—Ä—ñ–æ–¥</th>
                <th class="px-4 py-2 text-left text-gray-300">–ü–µ—Ä–µ–¥–∞—á—ñ</th>
                <th class="px-4 py-2 text-left text-gray-300">–ö–ª—ñ—î–Ω—Ç–∏</th>
                <th class="px-4 py-2 text-left text-gray-300">–ú–µ–Ω–µ–¥–∂–µ—Ä–∏</th>
                  </tr>
                </thead>
                <tbody>
              ${Object.entries(statistics.periods).map(([period, data]) => `
                <tr class="border-b border-gray-700">
                  <td class="px-4 py-2 font-medium text-white">${period}</td>
                  <td class="px-4 py-2 text-blue-400">${data.transfers}</td>
                  <td class="px-4 py-2 text-green-400">${data.clients}</td>
                  <td class="px-4 py-2 text-purple-400">${data.managers}</td>
                </tr>
              `).join('')}
            </tbody>
          </table>
                        </div>
      </div>
      
      <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º -->
      <div class="mb-6">
        <h3 class="text-lg font-semibold text-white mb-4">–ü–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö</h3>
        <div class="bg-gray-800 rounded-lg overflow-hidden">
          <table class="w-full">
            <thead class="bg-gray-700">
              <tr>
                <th class="px-4 py-2 text-left text-gray-300">–í—ñ–¥–¥—ñ–ª</th>
                <th class="px-4 py-2 text-left text-gray-300">–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ</th>
                <th class="px-4 py-2 text-left text-gray-300">–û—Ç—Ä–∏–º–∞–Ω–æ</th>
                <th class="px-4 py-2 text-left text-gray-300">–ö–ª—ñ—î–Ω—Ç–∏</th>
              </tr>
            </thead>
            <tbody>
              ${Object.entries(statistics.departments).map(([department, data]) => `
                <tr class="border-b border-gray-700">
                  <td class="px-4 py-2 font-medium text-white">${department}</td>
                  <td class="px-4 py-2 text-red-400">${data.sent}</td>
                  <td class="px-4 py-2 text-green-400">${data.received}</td>
                  <td class="px-4 py-2 text-gray-300">${data.clients.size}</td>
                </tr>
              `).join('')}
                </tbody>
              </table>
          </div>
        </div>
        
      <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º -->
      <div class="mb-6">
        <h3 class="text-lg font-semibold text-white mb-4">–ü–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö</h3>
        <div class="bg-gray-800 rounded-lg overflow-hidden">
          <table class="w-full">
            <thead class="bg-gray-700">
              <tr>
                <th class="px-4 py-2 text-left text-gray-300">–ú–µ–Ω–µ–¥–∂–µ—Ä</th>
                <th class="px-4 py-2 text-left text-gray-300">–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ</th>
                <th class="px-4 py-2 text-left text-gray-300">–û—Ç—Ä–∏–º–∞–Ω–æ</th>
                <th class="px-4 py-2 text-left text-gray-300">–ö–ª—ñ—î–Ω—Ç–∏</th>
                <th class="px-4 py-2 text-left text-gray-300">–°—É–º–∞ –¥–æ –ø–µ—Ä–µ–¥–∞—á—ñ</th>
                <th class="px-4 py-2 text-left text-gray-300">–°—É–º–∞ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ</th>
              </tr>
            </thead>
            <tbody>
              ${Object.entries(statistics.managers).map(([manager, data]) => {
                const managerTransfers = transfers.filter(t => t.fromManager === manager || t.toManager === manager);
                const revenueBefore = calculateManagerRevenueBefore(managerTransfers, manager);
                const revenueAfter = calculateManagerRevenueAfter(managerTransfers, manager);
                return `
                  <tr class="border-b border-gray-700">
                    <td class="px-4 py-2 font-medium text-white">${manager}</td>
                    <td class="px-4 py-2 text-red-400">${data.sent}</td>
                    <td class="px-4 py-2 text-green-400">${data.received}</td>
                    <td class="px-4 py-2 text-gray-300">${data.clients.size}</td>
                    <td class="px-4 py-2 text-gray-300">${revenueBefore.toFixed(2)} –≥—Ä–Ω</td>
                    <td class="px-4 py-2 text-gray-300">${revenueAfter.toFixed(2)} –≥—Ä–Ω</td>
                  </tr>
                `;
              }).join('')}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  `;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  setupTransfersStatisticsHandlers(transfers);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥–∞—á
function setupTransfersStatisticsHandlers(transfers) {
  const applyDateFilter = document.querySelector('.apply-date-filter');
  const monthSelect = document.querySelector('.month-select');
  const yearSelect = document.querySelector('.year-select');
  
  if (applyDateFilter && monthSelect && yearSelect) {
    applyDateFilter.addEventListener('click', () => {
      const selectedMonth = parseInt(monthSelect.value);
      const selectedYear = parseInt(yearSelect.value);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Å—è—Ü—É –∏ –≥–æ–¥—É
      const newFilteredTransfers = transfers.filter(transfer => {
        const transferDate = transfer.transferDate;
        const transferMonth = transferDate.getMonth() + 1;
        const transferYear = transferDate.getFullYear();
        return transferMonth === selectedMonth && transferYear === selectedYear;
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
      updateStatisticsForSubmodule(newFilteredTransfers, selectedMonth, selectedYear, transfers);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      setTimeout(() => {
        monthSelect.value = selectedMonth;
        yearSelect.value = selectedYear;
      }, 0);
    });
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–¥–º–æ–¥—É–ª—è
function updateStatisticsForSubmodule(filteredTransfers, selectedMonth, selectedYear, allTransfers) {
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞—á
  const monthStatistics = analyzeTransfersStatistics(filteredTransfers);
  const conversion = analyzeTransferConversion(filteredTransfers);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const statsCards = document.querySelectorAll('.transfers-statistics-content .bg-gray-800');
  if (statsCards.length >= 4) {
    // –í—Å—å–æ–≥–æ –ø–µ—Ä–µ–¥–∞—á
    const totalTransfersCard = statsCards[0];
    if (totalTransfersCard) {
      const valueElement = totalTransfersCard.querySelector('p');
      if (valueElement) {
        valueElement.textContent = monthStatistics.totalTransfers || 0;
      }
    }
    
    // –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
    const uniqueClientsCard = statsCards[1];
    if (uniqueClientsCard) {
      const valueElement = uniqueClientsCard.querySelector('p');
      if (valueElement) {
        valueElement.textContent = monthStatistics.uniqueClients || 0;
      }
    }
    
    // –ó–∞–ª—É—á–µ–Ω–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
    const uniqueManagersCard = statsCards[2];
    if (uniqueManagersCard) {
      const valueElement = uniqueManagersCard.querySelector('p');
      if (valueElement) {
        valueElement.textContent = monthStatistics.uniqueManagers || 0;
      }
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Å—ñ—è
    const conversionCard = statsCards[3];
    if (conversionCard) {
      const valueElement = conversionCard.querySelector('p');
      if (valueElement) {
        valueElement.textContent = `${conversion.conversionRate || 0}%`;
      }
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—ã –æ—Ç–≥—Ä—É–∑–∫–∏
  const revenueSection = document.querySelector('.transfers-statistics-content .mb-6:nth-of-type(3)');
  if (revenueSection) {
    const revenueValues = revenueSection.querySelectorAll('.text-xl');
    if (revenueValues.length >= 3) {
      // –î–æ –ø–µ—Ä–µ–¥–∞—á—ñ
      revenueValues[0].textContent = `${calculateTotalRevenueBeforeTransfer(filteredTransfers).toFixed(2)} –≥—Ä–Ω`;
      // –ü—ñ—Å–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ
      revenueValues[1].textContent = `${calculateTotalRevenueAfterTransfer(filteredTransfers).toFixed(2)} –≥—Ä–Ω`;
      // –ó–º—ñ–Ω–∞
      const change = calculateRevenueChange(filteredTransfers);
      revenueValues[2].textContent = `${change >= 0 ? '+' : ''}${change.toFixed(2)} –≥—Ä–Ω`;
      revenueValues[2].className = `text-xl font-bold ${change >= 0 ? 'text-green-400' : 'text-red-400'}`;
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
  const periodsTable = document.querySelector('.transfers-statistics-content .bg-gray-800:nth-of-type(4) tbody');
  if (periodsTable && monthStatistics.periods) {
    periodsTable.innerHTML = Object.entries(monthStatistics.periods).map(([period, data]) => `
      <tr class="border-b border-gray-700">
        <td class="px-4 py-2 font-medium text-white">${period}</td>
        <td class="px-4 py-2 text-blue-400">${data.transfers || 0}</td>
        <td class="px-4 py-2 text-green-400">${data.clients || 0}</td>
        <td class="px-4 py-2 text-purple-400">${data.managers || 0}</td>
      </tr>
    `).join('');
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ –æ—Ç–¥–µ–ª–∞–º
  const departmentsTable = document.querySelector('.transfers-statistics-content .bg-gray-800:nth-of-type(5) tbody');
  if (departmentsTable && monthStatistics.departments) {
    departmentsTable.innerHTML = Object.entries(monthStatistics.departments).map(([department, data]) => `
      <tr class="border-b border-gray-700">
        <td class="px-4 py-2 font-medium text-white">${department}</td>
        <td class="px-4 py-2 text-red-400">${data.sent || 0}</td>
        <td class="px-4 py-2 text-green-400">${data.received || 0}</td>
        <td class="px-4 py-2 text-gray-300">${data.clients ? data.clients.size : 0}</td>
      </tr>
    `).join('');
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
  const managersTable = document.querySelector('.transfers-statistics-content .bg-gray-800:nth-of-type(6) tbody');
  if (managersTable && monthStatistics.managers) {
    managersTable.innerHTML = Object.entries(monthStatistics.managers).map(([manager, data]) => {
      const managerTransfers = filteredTransfers.filter(t => t.fromManager === manager || t.toManager === manager);
      const revenueBefore = calculateManagerRevenueBefore(managerTransfers, manager);
      const revenueAfter = calculateManagerRevenueAfter(managerTransfers, manager);
      return `
        <tr class="border-b border-gray-700">
          <td class="px-4 py-2 font-medium text-white">${manager}</td>
          <td class="px-4 py-2 text-red-400">${data.sent || 0}</td>
          <td class="px-4 py-2 text-green-400">${data.received || 0}</td>
          <td class="px-4 py-2 text-gray-300">${data.clients ? data.clients.size : 0}</td>
          <td class="px-4 py-2 text-gray-300">${revenueBefore.toFixed(2)} –≥—Ä–Ω</td>
          <td class="px-4 py-2 text-gray-300">${revenueAfter.toFixed(2)} –≥—Ä–Ω</td>
        </tr>
      `;
    }).join('');
  }
}
