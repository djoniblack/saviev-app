rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isCompanyOwner(companyId) {
      let companyPath = /databases/$(database)/documents/companies/$(companyId);
      return exists(companyPath) && get(companyPath).data.ownerId == request.auth.uid;
    }

    // OPTIMIZED: Single function that reads member document only once
    function getUserEffectivePermissions(companyId, userId) {
      let memberPath = /databases/$(database)/documents/companies/$(companyId)/members/$(userId);
      return exists(memberPath) 
        ? (get(memberPath).data.role == 'owner'
            ? {
                // All permissions for owner role - single object read
                'timesheet_view': true,
                'timesheet_edit_cells': true,
                'timesheet_archive_employees': true,
                'timesheet_fill_schedule': true,
                'timesheet_clear_month': true,
                'timesheet_change_norm': true,
                'timesheet_export': true,
                'massSalary_view_page': true,
                'massSalary_generate_table': true,
                'massSalary_calculate_all': true,
                'massSalary_save_snapshot': true,
                'massSalary_export_excel': true,
                'kpiIndividual_view_page': true,
                'kpiIndividual_load_actuals': true,
                'kpiIndividual_calculate': true,
                'kpiIndividual_save_actuals': true,
                'reports_view_page': true,
                'reports_view_dynamics': true,
                'settings_employees_manage': true,
                'settings_departments_manage': true,
                'settings_schedules_manage': true,
                'settings_positions_manage': true,
                'settings_users_access_manage': true,
                'settings_roles_manage': true,
                'settings_kpi_constructor_manage': true,
                'vacations_view_page': true,
                'vacations_manage_requests': true,
                'competencies_view_page': true,
                'competencies_assess_employees': true,
                'competencies_manage_models': true,
                'competencies_view_reports': true,
                'competencies_view_own_assessment': true,
                'isOwner': true,
                'smartday_access': true,
                'department_dashboard_view': true,
                'focus_view': true,
                'focus_create': true,
                'focus_edit': true,
                'focus_manage': true,
                'debts_view_page': true,
                'debts_view_all_clients': true,
                'debts_view_manager_clients': true,
                'debts_view_department_clients': true,
                'debts_add_comments': true,
                'debts_edit_comments': true,
                'debts_delete_comments': true,
                'debts_add_forecasts': true,
                'debts_edit_forecasts': true,
                'debts_delete_forecasts': true,
                'debts_export_data': true,
                // Alerts (Сигналізація) permissions
                'alerts_view_page': true,
                'alerts_view_all_clients': true,
                'alerts_view_manager_clients': true,
                'alerts_view_department_clients': true,
                'alerts_add_actions': true,
                'alerts_edit_actions': true,
                'alerts_view_actions': true,
                'alerts_change_status': true,
                                 'alerts_add_potential_orders': true,
                 'alerts_view_overdue_agreements': true,
                 'alerts_export_data': true,
                 'ai_notifications_view': true,
                 'ai_notifications_create': true,
                'planfact_view_page': true,
                'planfact_create_plans': true,
                'planfact_edit_own_plans': true,
                'planfact_edit_all_plans': true,
                'planfact_delete_own_plans': true,
                'planfact_delete_all_plans': true,
                'planfact_view_dashboard': true,
                'planfact_create_targets': true,
                'planfact_edit_targets': true,
                'planfact_manage_focus_types': true,
                'planfact_mass_assignment': true,
                'planfact_view_analytics': true,
                'planfact_create_templates': true,
                'planfact_edit_templates': true,
                'planfact_delete_templates': true,
                'planfact_activate_templates': true,
                // Forecasting permissions
                'forecasting_view_page': true,
                'forecasting_create_plans': true,
                'forecasting_edit_plans': true,
                'forecasting_delete_plans': true,
                'forecasting_generate_forecasts': true,
                'forecasting_view_analytics': true,
                'forecasting_manage_settings': true,
                'forecasting_export_reports': true,
                // Manager Calendar permissions
                'manager_calendar_view_page': true,
                'manager_calendar_view_all_tasks': true,
                'manager_calendar_view_own_tasks': true,
                'manager_calendar_view_department_tasks': true,
                'manager_calendar_manage_tasks': true,
                'manager_calendar_view_reports': true,
                'manager_calendar_manage_reports': true,
                'manager_calendar_export_data': true,
                'manager_calendar_view_workload_norms': true,
                'manager_calendar_manage_workload_norms': true
              }
            : ('permissions' in get(memberPath).data 
                ? get(memberPath).data.permissions 
                : {}
              )
          )
        : {};
    }

    // OPTIMIZED: Efficient permission check using single document read
    function hasPermission(companyId, userId, permission) {
      return isCompanyOwner(companyId) || getUserEffectivePermissions(companyId, userId)[permission] == true;
    }

    function canMemberRead(companyId) {
      return isUserAuthenticated() && (isCompanyOwner(companyId) || exists(/databases/$(database)/documents/companies/$(companyId)/members/$(request.auth.uid)));
    }

    // Group rules for members
    match /{path=**}/members/{memberDocId} {
      allow read: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Company rules
    match /companies/{companyId} {
      allow read: if canMemberRead(companyId);
      allow create: if isUserAuthenticated();
      allow update, delete: if isUserAuthenticated() && isCompanyOwner(companyId);

      // Sales collection
      match /sales/{monthKey} {
        allow read: if isUserAuthenticated() && canMemberRead(companyId);
        allow write: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'sales_manage')
        );
      }
      
      // Client segments
      match /clientSegments/{clientCode} {
        allow read: if isUserAuthenticated() && canMemberRead(companyId);
        allow write: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'sales_manage')
        );
      }

      match /members/{memberUserId} {
        allow read: if canMemberRead(companyId);
        allow create: if request.auth.uid == memberUserId &&
                         request.resource.data.userId == request.auth.uid &&
                         request.resource.data.permissions != null;
        allow update: if isUserAuthenticated() &&
                       ( isCompanyOwner(companyId) ||
                         (request.auth.uid == memberUserId && !request.resource.data.keys().hasAny(['permissions', 'roleId', 'role']))
                       );
        allow delete: if isUserAuthenticated() &&
                         isCompanyOwner(companyId) &&
                         request.auth.uid != memberUserId;
      }

      match /roles/{roleId} {
        allow read: if canMemberRead(companyId);
        allow write: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'settings_roles_manage');
      }

      // Employees
      match /employees/{employeeId} {
        allow read: if isUserAuthenticated() &&
                       (
                         isCompanyOwner(companyId) ||
                         hasPermission(companyId, request.auth.uid, 'settings_employees_manage') ||
                         hasPermission(companyId, request.auth.uid, 'timesheet_view')
                       );
        allow create, delete: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'settings_employees_manage');
        allow update: if isUserAuthenticated() &&
                       ( hasPermission(companyId, request.auth.uid, 'settings_employees_manage') ||
                         (
                           request.resource.diff(resource).affectedKeys().hasAny(['timesheet', 'archivedInMonths']) &&
                           (hasPermission(companyId, request.auth.uid, 'timesheet_edit_cells') ||
                            hasPermission(companyId, request.auth.uid, 'timesheet_archive_employees') ||
                            hasPermission(companyId, request.auth.uid, 'timesheet_fill_schedule'))
                         )
                       );

        match /kpiActuals/{kpiActualsId} {
            allow read: if isUserAuthenticated() &&
                           (hasPermission(companyId, request.auth.uid, 'kpiIndividual_view_page') ||
                            (request.auth.uid == employeeId && hasPermission(companyId, request.auth.uid, 'kpiIndividual_load_actuals')));
            allow write: if isUserAuthenticated() &&
                            ( isCompanyOwner(companyId) ||
                             (request.auth.uid == employeeId && hasPermission(companyId, request.auth.uid, 'kpiIndividual_save_actuals')));
        }
      }

      // Departments
      match /departments/{departmentId} {
        allow read: if isUserAuthenticated() &&
                       (
                         isCompanyOwner(companyId) ||
                         hasPermission(companyId, request.auth.uid, 'settings_departments_manage') ||
                         hasPermission(companyId, request.auth.uid, 'timesheet_view')
                       );
        allow write: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'settings_departments_manage');
      }

      // Positions
      match /positions/{positionId} {
        allow read: if isUserAuthenticated() &&
                       (
                         isCompanyOwner(companyId) ||
                         hasPermission(companyId, request.auth.uid, 'settings_positions_manage') ||
                         hasPermission(companyId, request.auth.uid, 'timesheet_view')
                       );
        allow write: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'settings_positions_manage');
      }

      // Schedules
      match /schedules/{scheduleId} {
        allow read: if isUserAuthenticated() &&
                       (
                         isCompanyOwner(companyId) ||
                         hasPermission(companyId, request.auth.uid, 'settings_schedules_manage') ||
                         hasPermission(companyId, request.auth.uid, 'timesheet_view')
                       );
        allow write: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'settings_schedules_manage');
      }

      match /config/{configDocId} {
        allow read: if canMemberRead(companyId);
        allow write: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'timesheet_change_norm');
      }

      match /kpiSettings/{kpiSettingId} {
        allow read: if isUserAuthenticated() &&
                       (hasPermission(companyId, request.auth.uid, 'settings_kpi_constructor_manage') ||
                        hasPermission(companyId, request.auth.uid, 'kpiIndividual_view_page') ||
                        hasPermission(companyId, request.auth.uid, 'massSalary_view_page'));
        allow write: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'settings_kpi_constructor_manage');
      }

      match /massSalarySnapshots/{snapshotId} {
        allow read: if isUserAuthenticated() &&
                       (hasPermission(companyId, request.auth.uid, 'massSalary_view_page') ||
                        hasPermission(companyId, request.auth.uid, 'reports_view_dynamics'));
        allow write: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'massSalary_save_snapshot');
      }

      // Vacations
      match /vacationRequests/{vacationRequestId} {
        allow read: if canMemberRead(companyId);
        allow create: if isUserAuthenticated() &&
                          hasPermission(companyId, request.auth.uid, 'vacations_view_page');
        allow update: if isUserAuthenticated() &&
                          (hasPermission(companyId, request.auth.uid, 'vacations_manage_requests') ||
                           (request.auth.uid == resource.data.submittedById && resource.data.status == 'pending'));
        allow delete: if isUserAuthenticated() &&
                          request.auth.uid == resource.data.submittedById && resource.data.status == 'pending';
      }

      // Competencies
      match /competencyModels/{modelId} {
        allow read: if canMemberRead(companyId);
        allow create, update, delete: if isUserAuthenticated() &&
          (isCompanyOwner(companyId) || hasPermission(companyId, request.auth.uid, 'competencies_manage_models'));
      }
      match /assessments/{assessmentId} {
        allow read, write: if isUserAuthenticated() &&
          (isCompanyOwner(companyId) || hasPermission(companyId, request.auth.uid, 'competencies_assess_employees'));
      }
      match /evaluations/{evaluationId} {
        allow read, write: if canMemberRead(companyId);
      }
      match /competencyReports/{reportId} {
        allow read: if isUserAuthenticated() &&
          (isCompanyOwner(companyId) || hasPermission(companyId, request.auth.uid, 'competencies_view_reports'));
      }
      match /competencyAssessments/{assessmentId} {
        allow read: if isUserAuthenticated() && canMemberRead(companyId);
        allow create, update, delete: if isUserAuthenticated() &&
          (isCompanyOwner(companyId) || hasPermission(companyId, request.auth.uid, 'competencies_assess_employees'));
      }

      // Focus tasks
      match /focusTasks/{taskId} {
        allow read: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'focus_view');
        allow create: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'focus_create');
        allow update: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'focus_edit');
        allow delete: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'focus_manage');
        // Client notes for focus tasks
        match /notes/{clientCode} {
          allow read: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'focus_view');
          allow write: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'focus_edit');
        }
      }

      // Smart day tasks
      match /smartDayTasks/{taskId} {
        allow read: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'smartday_access');
        allow create, update, delete: if isUserAuthenticated() && hasPermission(companyId, request.auth.uid, 'smartday_access');
      }

      // Debts management
      match /debtComments/{commentId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'debts_view_page')
        );
        allow create: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'debts_add_comments')
        );
        allow update: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'debts_edit_comments') ||
          (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'debts_add_comments'))
        );
        allow delete: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'debts_delete_comments') ||
          (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'debts_add_comments'))
        );
      }

      match /paymentForecasts/{forecastId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'debts_view_page')
        );
        allow create: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'debts_add_forecasts')
        );
        allow update: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'debts_edit_forecasts') ||
          (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'debts_add_forecasts'))
        );
        allow delete: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'debts_delete_forecasts') ||
          (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'debts_add_forecasts'))
        );
      }

             // Client alerts and actions (Сигналізація)
       match /clientAlerts/{clientCode} {
         allow read: if isUserAuthenticated() && (
           isCompanyOwner(companyId) ||
           hasPermission(companyId, request.auth.uid, 'alerts_view_page')
         );
         allow create: if isUserAuthenticated() && (
           isCompanyOwner(companyId) ||
           hasPermission(companyId, request.auth.uid, 'alerts_add_actions')
         );
         allow update: if isUserAuthenticated() && (
           isCompanyOwner(companyId) ||
           hasPermission(companyId, request.auth.uid, 'alerts_add_actions') ||
           hasPermission(companyId, request.auth.uid, 'alerts_edit_actions') ||
           hasPermission(companyId, request.auth.uid, 'alerts_change_status')
         );
         allow delete: if isUserAuthenticated() && (
           isCompanyOwner(companyId) ||
           hasPermission(companyId, request.auth.uid, 'alerts_edit_actions')
         );
       }
       
               // AI Notifications (AI уведомления)
        match /aiNotifications/{notificationId} {
          allow read: if isUserAuthenticated() && (
            isCompanyOwner(companyId) ||
            (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'ai_notifications_view'))
          );
          allow create: if isUserAuthenticated() && (
            isCompanyOwner(companyId) ||
            hasPermission(companyId, request.auth.uid, 'ai_notifications_create')
          );
          allow update: if isUserAuthenticated() && (
            isCompanyOwner(companyId) ||
            (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'ai_notifications_view'))
          );
          allow delete: if isUserAuthenticated() && (
            isCompanyOwner(companyId) ||
            hasPermission(companyId, request.auth.uid, 'alerts_edit_actions')
          );
        }

      // Plan-fact analysis
      match /plans/{planId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_view_page') ||
          (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'planfact_view_page'))
        );
        allow create: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_create_plans')
        );
        allow update: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_edit_all_plans') ||
          (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'planfact_edit_own_plans'))
        );
        allow delete: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_delete_all_plans') ||
          (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'planfact_delete_own_plans'))
        );
      }

      // Plan templates for plan-fact
      match /planTemplates/{templateId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_view_page')
        );
        allow create: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_create_templates')
        );
        allow update: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_edit_templates')
        );
        allow delete: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_delete_templates')
        );
      }

      // Focus types for plan-fact
      match /focusTypes/{focusTypeId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_view_page')
        );
        allow create, update, delete: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_manage_focus_types')
        );
      }

      // Weekly goals (sprints)
      match /weeklyGoals/{goalId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_view_page') ||
          (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'planfact_view_page'))
        );
        allow create, update: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_create_targets') ||
          (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'planfact_create_targets'))
        );
        allow delete: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_edit_targets') ||
          (resource.data.managerId == request.auth.uid && hasPermission(companyId, request.auth.uid, 'planfact_edit_targets'))
        );
      }

      match /planTargets/{targetId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_view_page')
        );
        allow create, update: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_create_targets') ||
          hasPermission(companyId, request.auth.uid, 'planfact_edit_targets')
        );
        allow delete: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_edit_targets')
        );
      }

      match /planFactAnalytics/{analyticsId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_view_dashboard')
        );
        allow write: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_view_dashboard')
        );
      }

      // Forecasting plans and analytics
      match /forecastingPlans/{planId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'forecasting_view_page')
        );
        allow create: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'forecasting_create_plans')
        );
        allow update: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'forecasting_edit_plans')
        );
        allow delete: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'forecasting_delete_plans')
        );
      }

      match /forecastingAnalytics/{analyticsId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'forecasting_view_analytics')
        );
        allow write: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'forecasting_manage_settings')
        );
      }

      match /forecastingSettings/{settingId} {
        allow read, write: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'forecasting_manage_settings')
        );
      }

      // Manager Calendar tasks (подколлекция в компании)
      match /managerCalendarTasks/{taskId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'manager_calendar_view_all_tasks') ||
          hasPermission(companyId, request.auth.uid, 'manager_calendar_view_own_tasks') ||
          hasPermission(companyId, request.auth.uid, 'manager_calendar_view_department_tasks') ||
          hasPermission(companyId, request.auth.uid, 'manager_calendar_view_page')
        );
        allow create, update: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'manager_calendar_manage_tasks') ||
          hasPermission(companyId, request.auth.uid, 'manager_calendar_view_all_tasks') ||
          hasPermission(companyId, request.auth.uid, 'manager_calendar_view_page')
        );
        allow delete: if isUserAuthenticated() && isCompanyOwner(companyId);
      }

      // Manager Calendar analytics (подколлекция в компании)
      match /managerCalendarAnalytics/{analyticsId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'manager_calendar_view_reports') ||
          hasPermission(companyId, request.auth.uid, 'manager_calendar_view_all_tasks') ||
          hasPermission(companyId, request.auth.uid, 'manager_calendar_view_page')
        );
        allow write: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'manager_calendar_manage_reports') ||
          hasPermission(companyId, request.auth.uid, 'manager_calendar_view_all_tasks') ||
          hasPermission(companyId, request.auth.uid, 'manager_calendar_view_page')
        );
      }

      // Workload norms (подколлекция в компании)
      match /workloadNorms/{normId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'manager_calendar_view_workload_norms') ||
          hasPermission(companyId, request.auth.uid, 'manager_calendar_view_reports') ||
          hasPermission(companyId, request.auth.uid, 'manager_calendar_view_page')
        );
        allow write: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'manager_calendar_manage_workload_norms') ||
          hasPermission(companyId, request.auth.uid, 'manager_calendar_view_page')
        );
      }

      match /nomenclatureHierarchy/{hierarchyId} {
        allow read: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_view_page')
        );
        allow create: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_create_templates')
        );
        allow update: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_edit_templates')
        );
        allow delete: if isUserAuthenticated() && (
          isCompanyOwner(companyId) ||
          hasPermission(companyId, request.auth.uid, 'planfact_delete_templates')
        );
      }
    }

    match /invites/{inviteId} {
      allow create: if isUserAuthenticated() && request.resource.data.companyId != null && isCompanyOwner(request.resource.data.companyId);
      allow read: if isUserAuthenticated() && request.auth.uid == resource.data.invitedBy;
      allow update, delete: if isUserAuthenticated() && request.auth.uid == resource.data.invitedBy;
    }
  }
} 