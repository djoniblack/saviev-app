// debts.js - –ú–æ–¥—É–ª—å –¥–µ–±–∏—Ç–æ—Ä—Å–∫–æ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏
import * as firebase from './firebase.js';

let debtsData = [];
let managersData = [];
let departmentsData = [];
let clientCommentsData = [];
let paymentForecastsData = [];

// –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–±–∏—Ç–æ—Ä–∫–∏
const DEMO_DEBTS_DATA = [
    {
        clientCode: "00-00007283",
        clientName: "–¢–û–í –ê–ª—å—Ñ–∞ –¢—Ä–µ–π–¥",
        manager: "–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω",
        department: "–í—ñ–¥–¥—ñ–ª –ø—Ä–æ–¥–∞–∂—É",
        totalDebt: 125000,
        overdueDebt: 85000,
        currentDebt: 40000,
        lastPayment: "2024-11-15",
        daysOverdue: 45,
        invoices: [
            { number: "INV-2024-001", date: "2024-10-01", amount: 50000, dueDate: "2024-10-31", status: "overdue" },
            { number: "INV-2024-002", date: "2024-11-01", amount: 35000, dueDate: "2024-11-30", status: "overdue" },
            { number: "INV-2024-003", date: "2024-12-01", amount: 40000, dueDate: "2024-12-31", status: "current" }
        ]
    },
    {
        clientCode: "00-00026426",
        clientName: "–§–û–ü –ü–µ—Ç—Ä–µ–Ω–∫–æ –û.–í.",
        manager: "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä–æ",
        department: "–í—ñ–¥–¥—ñ–ª –ø—Ä–æ–¥–∞–∂—É",
        totalDebt: 75000,
        overdueDebt: 0,
        currentDebt: 75000,
        lastPayment: "2024-12-01",
        daysOverdue: 0,
        invoices: [
            { number: "INV-2024-004", date: "2024-12-05", amount: 75000, dueDate: "2025-01-05", status: "current" }
        ]
    },
    {
        clientCode: "00-00010339",
        clientName: "–¢–û–í –ë–µ—Ç–∞ –õ–æ–≥—ñ—Å—Ç–∏–∫",
        manager: "–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä",
        department: "–û–ø—Ç–æ–≤–∏–π –≤—ñ–¥–¥—ñ–ª",
        totalDebt: 200000,
        overdueDebt: 150000,
        currentDebt: 50000,
        lastPayment: "2024-10-20",
        daysOverdue: 60,
        invoices: [
            { number: "INV-2024-005", date: "2024-09-15", amount: 100000, dueDate: "2024-10-15", status: "overdue" },
            { number: "INV-2024-006", date: "2024-10-01", amount: 50000, dueDate: "2024-11-01", status: "overdue" },
            { number: "INV-2024-007", date: "2024-12-10", amount: 50000, dueDate: "2025-01-10", status: "current" }
        ]
    },
    {
        clientCode: "00-00008914",
        clientName: "–ü–ü –ì–∞–º–º–∞ –î–∏—Å—Ç—Ä–∏–±—É—Ü—ñ—è",
        manager: "–ö–æ–≤–∞–ª–µ–Ω–∫–æ –ê–Ω–Ω–∞",
        department: "–û–ø—Ç–æ–≤–∏–π –≤—ñ–¥–¥—ñ–ª",
        totalDebt: 95000,
        overdueDebt: 30000,
        currentDebt: 65000,
        lastPayment: "2024-11-20",
        daysOverdue: 25,
        invoices: [
            { number: "INV-2024-008", date: "2024-11-01", amount: 30000, dueDate: "2024-12-01", status: "overdue" },
            { number: "INV-2024-009", date: "2024-12-10", amount: 65000, dueDate: "2025-01-10", status: "current" }
        ]
    },
    {
        clientCode: "00-00015627",
        clientName: "–¢–û–í –î–µ–ª—å—Ç–∞ –ü–ª—é—Å",
        manager: "–ú–µ–ª—å–Ω–∏–∫ –û–ª–µ–≥",
        department: "–†–æ–∑–¥—Ä—ñ–±–Ω–∏–π –≤—ñ–¥–¥—ñ–ª",
        totalDebt: 45000,
        overdueDebt: 45000,
        currentDebt: 0,
        lastPayment: "2024-09-30",
        daysOverdue: 75,
        invoices: [
            { number: "INV-2024-010", date: "2024-09-15", amount: 45000, dueDate: "2024-10-15", status: "overdue" }
        ]
    }
];

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –¥–µ–±–∏—Ç–æ—Ä–∫–∏
 */
export function initDebtsModule(container) {
    console.log('initDebtsModule called', container);
    if (!container) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (!window.hasPermission('debts_view_page')) {
        container.innerHTML = `
            <div class="bg-red-900 rounded-xl shadow-lg p-6 text-center">
                <h2 class="text-2xl font-bold text-white mb-4">–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ</h2>
                <p class="text-red-200">–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ–±—ñ—Ç–æ—Ä—Å—å–∫–æ—ó –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ.</p>
                <p class="text-red-300 text-sm mt-2">–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É.</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = `
        <div class="bg-gray-800 rounded-xl shadow-lg p-6">
            <div class="mb-4 flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div>
                    <h1 class="text-3xl md:text-4xl font-bold text-white">–î–µ–±—ñ—Ç–æ—Ä—Å—å–∫–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å</h1>
                    <p class="mt-2 text-gray-400">–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—è–º–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤</p>
                </div>
                <div class="flex gap-2">
                    ${window.hasPermission('debts_export') ? `
                        <button onclick="exportDebtsToExcel()" 
                                class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">
                            üìä –ï–∫—Å–ø–æ—Ä—Ç Excel
                        </button>
                    ` : ''}
                    <button onclick="refreshDebtsData()" 
                            class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                        üîÑ –û–Ω–æ–≤–∏—Ç–∏
                    </button>
                </div>
            </div>
            <div id="debts-filters-container" class="mb-4"></div>
            <div id="debts-summary-container" class="mb-4"></div>
            <div id="debts-content-container" class="mb-4"></div>
        </div>
    `;

    loadDebtsData();
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö API –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
 */
function transformApiDataToInternalFormat(apiData) {
    if (!Array.isArray(apiData)) {
        console.error('API –≤–µ—Ä–Ω—É–ª–æ –Ω–µ –º–∞—Å—Å–∏–≤:', apiData);
        return [];
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
    const clientsMap = new Map();
    
    apiData.forEach(item => {
        const clientCode = item["–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥"] || item["–ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç.–ö–æ–¥"];
        const clientName = item["–ö–ª–∏–µ–Ω—Ç"] || item["–ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"];
        const manager = item["–ú–µ–Ω–µ–¥–∂–µ—Ä"];
        const debt = parseFloat(item["–î–æ–ª–≥"]) || 0;
        const contract = item["–î–æ–≥–æ–≤–æ—Ä"] || "–û—Å–Ω–æ–≤–Ω–∏–π –¥–æ–≥–æ–≤—ñ—Ä";
        
        if (!clientCode || debt === 0) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –¥–æ–ª–≥–∞
        
        if (!clientsMap.has(clientCode)) {
            clientsMap.set(clientCode, {
                clientCode: clientCode || '',
                clientName: clientName || '–ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –∫–ª—ñ—î–Ω—Ç',
                manager: manager || '–ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä',
                department: getManagerDepartment(manager) || '–ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –≤—ñ–¥–¥—ñ–ª',
                totalDebt: 0,
                overdueDebt: 0,
                currentDebt: 0,
                lastPayment: "",
                daysOverdue: 0,
                contracts: []
            });
        }
        
        const client = clientsMap.get(clientCode);
        client.totalDebt += debt;
        
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: —Å—á–∏—Ç–∞–µ–º –≤–µ—Å—å –¥–æ–ª–≥ —Ç–µ–∫—É—â–∏–º (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
        client.currentDebt += debt;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–≥–æ–≤–æ—Ä–µ
        client.contracts.push({
            name: contract,
            debt: debt,
            manager: manager
        });
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map –≤ –º–∞—Å—Å–∏–≤
    return Array.from(clientsMap.values()).map(client => ({
        ...client,
        // –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é —Å—á–µ—Ç–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        invoices: client.contracts.map((contract, index) => ({
            number: `${contract.name}-${index + 1}`,
            date: new Date().toISOString().split('T')[0],
            amount: contract.debt,
            dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // +30 –¥–Ω–µ–π
            status: "current",
            contract: contract.name
        }))
    }));
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */
function getManagerDepartment(managerName) {
    if (!managerName) return "–ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –≤—ñ–¥–¥—ñ–ª";
    
    // –ò—â–µ–º –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    const manager = managersData.find(mgr => 
        mgr.name === managerName || 
        mgr.fullName === managerName ||
        (mgr.firstName && mgr.lastName && `${mgr.firstName} ${mgr.lastName}` === managerName)
    );
    
    if (manager && manager.department) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å ID –æ—Ç–¥–µ–ª–∞, –∏—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞
        const department = departmentsData.find(dept => dept.id === manager.department);
        return department ? department.name : manager.department;
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    const lowerName = managerName.toLowerCase();
    if (lowerName.includes('–æ–ø—Ç–æ–≤') || lowerName.includes('wholesale')) {
        return "–û–ø—Ç–æ–≤–∏–π –≤—ñ–¥–¥—ñ–ª";
    } else if (lowerName.includes('—Ä–æ–∑–¥—Ä—ñ–±–Ω') || lowerName.includes('retail')) {
        return "–†–æ–∑–¥—Ä—ñ–±–Ω–∏–π –≤—ñ–¥–¥—ñ–ª";
    } else {
        return "–í—ñ–¥–¥—ñ–ª –ø—Ä–æ–¥–∞–∂—É";
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–µ–±–∏—Ç–æ—Ä–∫–∏
 */
export async function loadDebtsData() {
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingState();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const companyId = window.state?.currentCompanyId;
        
        const promises = [
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–µ–±–∏—Ç–æ—Ä–∫–∏ —Å API
            fetch('https://fastapi.lookfort.com/company.debt')
                .then(response => {
                    console.log('API –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å—Ç–∞—Ç—É—Å:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('API –¥–∞–Ω–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ:', Array.isArray(data) ? `${data.length} –∑–∞–ø–∏—Å—ñ–≤` : typeof data);
                    console.log('–ü—Ä–∏–∫–ª–∞–¥ API –∑–∞–ø–∏—Å—É:', data[0]);
                    return data;
                })
                .catch(error => {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ API –¥–µ–±—ñ—Ç–æ—Ä–∫–∏:', error);
                    console.warn('‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–µ–º–æ –¥–∞–Ω—ñ —è–∫ fallback');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    if (typeof window.showNotification === 'function') {
                        window.showNotification('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∫–∞–∑–∞–Ω–æ –¥–µ–º–æ –¥–∞–Ω—ñ.', 'warning');
                    }
                    
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ API
                    return DEMO_DEBTS_DATA.map(item => ({
                        "–ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç": item.clientName,
                        "–ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç.–ö–æ–¥": item.clientCode,
                        "–î–æ–≥–æ–≤–æ—Ä": "–û—Å–Ω–æ–≤–Ω–∏–π –¥–æ–≥–æ–≤—ñ—Ä",
                        "–î–æ–ª–≥": item.totalDebt,
                        "–ö–ª–∏–µ–Ω—Ç": item.clientName,
                        "–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥": item.clientCode,
                        "–ú–µ–Ω–µ–¥–∂–µ—Ä": item.manager
                    }));
                })
        ];
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏—è
        if (companyId) {
            promises.push(
                firebase.getDocs(firebase.collection(firebase.db, `companies/${companyId}/employees`)),
                firebase.getDocs(firebase.collection(firebase.db, `companies/${companyId}/departments`)),
                firebase.getDocs(firebase.collection(firebase.db, `companies/${companyId}/debtComments`)),
                firebase.getDocs(firebase.collection(firebase.db, `companies/${companyId}/paymentForecasts`))
            );
        }
        
        const results = await Promise.all(promises);
        const apiDebtsData = results[0];
        
        if (companyId && results.length > 1) {
            const [, employeesSnap, departmentsSnap, commentsSnap, forecastsSnap] = results;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            const allEmployees = employeesSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏/—Ä–æ–ª–∏
            managersData = allEmployees.filter(emp => {
                if (emp.role === 'manager') return true;
                if (emp.position) {
                    const position = emp.position.toLowerCase();
                    return position.includes('–º–µ–Ω–µ–¥–∂–µ—Ä') || 
                           position.includes('manager') || 
                           position.includes('sales') ||
                           position.includes('–ø—Ä–æ–¥–∞–∂');
                }
                return false;
            });
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            if (managersData.length === 0) {
                console.warn('üîç –ú–µ–Ω–µ–¥–∂–µ—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—Å—ñ—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤');
                managersData = allEmployees;
            }
            
            departmentsData = departmentsSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            clientCommentsData = commentsSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            paymentForecastsData = forecastsSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            
            console.log('üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ Firebase:');
            console.log('- –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤:', allEmployees.length);
            console.log('- –ú–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤:', managersData.length);
            console.log('- –í—ñ–¥–¥—ñ–ª—ñ–≤:', departmentsData.length);
            console.log('–ú–µ–Ω–µ–¥–∂–µ—Ä–∏:', managersData.map(m => `${m.name} (${m.departmentId})`));
            console.log('–í—ñ–¥–¥—ñ–ª–∏:', departmentsData.map(d => `${d.name} (${d.id})`));
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ API –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        debtsData = transformApiDataToInternalFormat(apiDebtsData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        const isUsingDemoData = apiDebtsData === DEMO_DEBTS_DATA || 
                               (Array.isArray(apiDebtsData) && apiDebtsData.length > 0 && 
                                apiDebtsData[0]["–ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"] === "–¢–û–í –ê–ª—å—Ñ–∞ –¢—Ä–µ–π–¥");
        
        console.log('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤ –¥–µ–±—ñ—Ç–æ—Ä–∫–∏:', debtsData.length);
        console.log('–ü—Ä–∏–∫–ª–∞–¥ –¥–∞–Ω–∏—Ö:', debtsData[0]);
        
        if (isUsingDemoData) {
            console.warn('üîÑ –£–≤–∞–≥–∞: –í—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ');
        } else {
            console.log('‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ API');
        }
        
        hideLoadingState();
        renderDebtsFilters();
        renderDebtsSummary(debtsData, isUsingDemoData);
        renderDebtsGroupedByManager();
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ–±—ñ—Ç–æ—Ä–∫–∏:', error);
        showErrorState('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö');
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 */
function showLoadingState() {
    const contentContainer = document.getElementById('debts-content-container');
    if (!contentContainer) return;
    
    contentContainer.innerHTML = `
        <div class="text-center p-8">
            <div class="loader mx-auto mb-4"></div>
            <p class="text-gray-300">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–µ–±—ñ—Ç–æ—Ä–∫–∏...</p>
        </div>
    `;
}

/**
 * –°–∫—Ä—ã—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 */
function hideLoadingState() {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ –≤ renderDebtsTable
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
 */
function showErrorState(message) {
    const contentContainer = document.getElementById('debts-content-container');
    if (!contentContainer) return;
    
    contentContainer.innerHTML = `
        <div class="text-center p-8 bg-red-900 rounded-lg">
            <p class="text-red-200 text-lg">${message}</p>
            <button onclick="loadDebtsData()" 
                    class="mt-4 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">
                –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
            </button>
        </div>
    `;
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ñ–∏–ª—å—Ç—Ä–æ–≤
 */
function renderDebtsFilters() {
    const filtersContainer = document.getElementById('debts-filters-container');
    if (!filtersContainer) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–¥–µ–ª—ã –∏–∑ Firebase –∏–ª–∏ fallback –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤
    let departmentOptions = '';
    let managerOptions = '';
    
    console.log('üîß renderDebtsFilters –≤–∏–∫–ª–∏–∫–∞–Ω–æ:');
    console.log('- departmentsData.length:', departmentsData.length);
    console.log('- managersData.length:', managersData.length);
    console.log('- debtsData.length:', debtsData.length);
    
    if (departmentsData.length > 0 && managersData.length > 0) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase
        console.log('‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞–Ω—ñ –∑ Firebase');
        console.log('Departments:', departmentsData);
        console.log('Managers:', managersData);
        
        departmentOptions = departmentsData.map(dept => 
            `<option value="${dept.id}">${dept.name}</option>`
        ).join('');
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ Firebase, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ—Ç–¥–µ–ª—É
        const selectedDepartment = document.getElementById('department-filter')?.value || '';
        const filteredManagers = selectedDepartment 
            ? managersData.filter(manager => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–≤—è–∑–∏ —Å –æ—Ç–¥–µ–ª–æ–º
                return manager.departmentId === selectedDepartment ||
                       manager.department === selectedDepartment ||
                       (manager.department && manager.department.id === selectedDepartment);
              })
            : managersData;
        
        managerOptions = filteredManagers.map(manager => 
            `<option value="${manager.id}">${manager.name}</option>`
        ).join('');
        
        console.log('üîß –§—ñ–ª—å—Ç—Ä–∏: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–∞–Ω—ñ –∑ Firebase');
    } else {
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –¥–æ–ª–≥–æ–≤
        console.log('‚ö†Ô∏è Fallback: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞–Ω—ñ –∑ API –¥–æ–ª–≥—ñ–≤');
        console.log('debtsData:', debtsData);
        
        const uniqueDepartments = [...new Set(debtsData.map(d => d.department))].filter(Boolean);
        const uniqueManagers = [...new Set(debtsData.map(d => d.manager))].filter(Boolean);
        
        console.log('uniqueDepartments:', uniqueDepartments);
        console.log('uniqueManagers:', uniqueManagers);
        
        departmentOptions = uniqueDepartments.map(dept => 
            `<option value="${dept}">${dept}</option>`
        ).join('');
        
        managerOptions = uniqueManagers.map(manager => 
            `<option value="${manager}">${manager}</option>`
        ).join('');
        
        console.log('‚ö†Ô∏è –§—ñ–ª—å—Ç—Ä–∏: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–∞–Ω—ñ –∑ API –¥–æ–ª–≥—ñ–≤ (fallback)');
    }
    
    filtersContainer.innerHTML = `
        <div class="bg-gray-700 rounded-lg p-4">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div>
                    <label class="block text-sm font-medium mb-1 text-gray-200">–í—ñ–¥–¥—ñ–ª:</label>
                    <select id="department-filter" class="dark-input bg-gray-600 text-gray-200 w-full">
                        <option value="">–í—Å—ñ –≤—ñ–¥–¥—ñ–ª–∏</option>
                        ${departmentOptions}
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1 text-gray-200">–ú–µ–Ω–µ–¥–∂–µ—Ä:</label>
                    <select id="manager-filter" class="dark-input bg-gray-600 text-gray-200 w-full">
                        <option value="">–í—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏</option>
                        ${managerOptions}
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1 text-gray-200">–¢–∏–ø –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ:</label>
                    <select id="debt-type-filter" class="dark-input bg-gray-600 text-gray-200 w-full">
                        <option value="">–í—Å—ñ</option>
                        <option value="overdue">–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞</option>
                        <option value="current">–ü–æ—Ç–æ—á–Ω–∞</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1 text-gray-200">–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:</label>
                    <select id="sort-filter" class="dark-input bg-gray-600 text-gray-200 w-full">
                        <option value="debt-desc">–ë–æ—Ä–≥ (–∑–º–µ–Ω—à–µ–Ω–Ω—è)</option>
                        <option value="debt-asc">–ë–æ—Ä–≥ (–∑—Ä–æ—Å—Ç–∞–Ω–Ω—è)</option>
                        <option value="overdue-desc">–ü—Ä–æ—Å—Ç—Ä–æ—á–∫–∞ (–∑–º–µ–Ω—à–µ–Ω–Ω—è)</option>
                        <option value="days-desc">–î–Ω—ñ–≤ –ø—Ä–æ—Å—Ç—Ä–æ—á–∫–∏</option>
                        <option value="name-asc">–ù–∞–∑–≤–∞ –∫–ª—ñ—î–Ω—Ç–∞</option>
                    </select>
                </div>
            </div>
        </div>
    `;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    document.getElementById('department-filter').onchange = () => {
        updateManagersFilter();
        applyFilters();
    };
    document.getElementById('manager-filter').onchange = applyFilters;
    document.getElementById('debt-type-filter').onchange = applyFilters;
    document.getElementById('sort-filter').onchange = applyFilters;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞
 */
function updateManagersFilter() {
    const departmentFilter = document.getElementById('department-filter');
    const managerFilter = document.getElementById('manager-filter');
    
    if (!departmentFilter || !managerFilter) return;
    
    const selectedDepartment = departmentFilter.value;
    const currentManager = managerFilter.value;
    
    let managerOptions = '';
    
    if (departmentsData.length > 0 && managersData.length > 0) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase
        const filteredManagers = selectedDepartment 
            ? managersData.filter(manager => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–≤—è–∑–∏ —Å –æ—Ç–¥–µ–ª–æ–º
                return manager.departmentId === selectedDepartment ||
                       manager.department === selectedDepartment ||
                       (manager.department && manager.department.id === selectedDepartment);
              })
            : managersData;
        
        managerOptions = filteredManagers.map(manager => 
            `<option value="${manager.id}">${manager.name}</option>`
        ).join('');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –Ω–æ–≤—ã–π –æ—Ç–¥–µ–ª
        if (currentManager && !filteredManagers.find(m => m.id === currentManager)) {
            managerFilter.value = '';
        }
    } else {
        // Fallback: —Ñ–∏–ª—å—Ç—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –æ—Ç–¥–µ–ª—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤
        const managersInDepartment = selectedDepartment 
            ? [...new Set(debtsData.filter(d => d.department === selectedDepartment).map(d => d.manager))]
            : [...new Set(debtsData.map(d => d.manager))];
        
        managerOptions = managersInDepartment.map(manager => 
            `<option value="${manager}">${manager}</option>`
        ).join('');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –Ω–æ–≤—ã–π –æ—Ç–¥–µ–ª
        if (currentManager && !managersInDepartment.includes(currentManager)) {
            managerFilter.value = '';
        }
    }
    
    managerFilter.innerHTML = `
        <option value="">–í—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏</option>
        ${managerOptions}
    `;
}

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
 */
function applyFilters() {
    const managerFilter = document.getElementById('manager-filter').value;
    const departmentFilter = document.getElementById('department-filter').value;
    const debtTypeFilter = document.getElementById('debt-type-filter').value;
    const sortFilter = document.getElementById('sort-filter').value;
    
    let filteredData = [...debtsData];
    
    if (departmentsData.length > 0 && managersData.length > 0) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É (–ø–æ ID)
        if (managerFilter) {
            const selectedManager = managersData.find(m => m.id === managerFilter);
            if (selectedManager) {
                filteredData = filteredData.filter(d => d.manager === selectedManager.name);
            }
        }
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ—Ç–¥–µ–ª—É (–ø–æ ID)
        if (departmentFilter) {
            const selectedDepartment = departmentsData.find(dept => dept.id === departmentFilter);
            if (selectedDepartment) {
                const departmentManagers = managersData
                    .filter(manager => {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–≤—è–∑–∏ —Å –æ—Ç–¥–µ–ª–æ–º
                        return manager.departmentId === departmentFilter ||
                               manager.department === departmentFilter ||
                               (manager.department && manager.department.id === departmentFilter);
                    })
                    .map(manager => manager.name);
                
                filteredData = filteredData.filter(d => departmentManagers.includes(d.manager));
            }
        }
    } else {
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –¥–æ–ª–≥–æ–≤ (–ø—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º)
        
        if (managerFilter) {
            filteredData = filteredData.filter(d => d.manager === managerFilter);
        }
        
        if (departmentFilter) {
            filteredData = filteredData.filter(d => d.department === departmentFilter);
        }
    }
    
    if (debtTypeFilter === 'overdue') {
        filteredData = filteredData.filter(d => d.overdueDebt > 0);
    } else if (debtTypeFilter === 'current') {
        filteredData = filteredData.filter(d => d.currentDebt > 0 && d.overdueDebt === 0);
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    switch(sortFilter) {
        case 'debt-desc':
            filteredData.sort((a, b) => b.totalDebt - a.totalDebt);
            break;
        case 'debt-asc':
            filteredData.sort((a, b) => a.totalDebt - b.totalDebt);
            break;
        case 'overdue-desc':
            filteredData.sort((a, b) => b.overdueDebt - a.overdueDebt);
            break;
        case 'days-desc':
            filteredData.sort((a, b) => b.daysOverdue - a.daysOverdue);
            break;
        case 'name-asc':
            filteredData.sort((a, b) => a.clientName.localeCompare(b.clientName));
            break;
    }
    
    renderDebtsSummary(filteredData, false); // –ü—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    renderDebtsGroupedByManager(filteredData);
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–≤–æ–¥–∫–∏
 */
function renderDebtsSummary(data = debtsData, isDemo = false) {
    const summaryContainer = document.getElementById('debts-summary-container');
    if (!summaryContainer) return;
    
    const totalDebt = data.reduce((sum, d) => sum + d.totalDebt, 0);
    const overdueDebt = data.reduce((sum, d) => sum + d.overdueDebt, 0);
    const currentDebt = data.reduce((sum, d) => sum + d.currentDebt, 0);
    const clientsCount = data.length;
    const overdueClientsCount = data.filter(d => d.overdueDebt > 0).length;
    const avgDaysOverdue = data.filter(d => d.daysOverdue > 0).reduce((sum, d) => sum + d.daysOverdue, 0) / 
                          (data.filter(d => d.daysOverdue > 0).length || 1);
    
    summaryContainer.innerHTML = `
        ${isDemo ? `
            <div class="bg-orange-900 border border-orange-600 rounded-lg p-3 mb-4 flex items-center gap-3">
                <div class="text-orange-400">‚ö†Ô∏è</div>
                <div>
                    <div class="text-orange-200 font-medium">–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ</div>
                    <div class="text-orange-300 text-sm">–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–æ–∫–∞–∑–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó.</div>
                </div>
            </div>
        ` : ''}
        <div class="grid grid-cols-2 md:grid-cols-6 gap-4">
            <div class="bg-gray-700 rounded-lg p-4">
                <div class="text-2xl font-bold text-white">${clientsCount}</div>
                <div class="text-sm text-gray-400">–ö–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –±–æ—Ä–≥–æ–º</div>
            </div>
            <div class="bg-blue-600 rounded-lg p-4">
                <div class="text-2xl font-bold text-white">${formatCurrency(totalDebt)}</div>
                <div class="text-sm text-blue-200">–ó–∞–≥–∞–ª—å–Ω–∏–π –±–æ—Ä–≥</div>
            </div>
            <div class="bg-red-600 rounded-lg p-4">
                <div class="text-2xl font-bold text-white">${formatCurrency(overdueDebt)}</div>
                <div class="text-sm text-red-200">–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π –±–æ—Ä–≥</div>
            </div>
            <div class="bg-green-600 rounded-lg p-4">
                <div class="text-2xl font-bold text-white">${formatCurrency(currentDebt)}</div>
                <div class="text-sm text-green-200">–ü–æ—Ç–æ—á–Ω–∏–π –±–æ—Ä–≥</div>
            </div>
            <div class="bg-yellow-600 rounded-lg p-4">
                <div class="text-2xl font-bold text-white">${overdueClientsCount}</div>
                <div class="text-sm text-yellow-200">–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏</div>
            </div>
            <div class="bg-purple-600 rounded-lg p-4">
                <div class="text-2xl font-bold text-white">${Math.round(avgDaysOverdue)}</div>
                <div class="text-sm text-purple-200">–°–µ—Ä–µ–¥–Ω—è –ø—Ä–æ—Å—Ç—Ä–æ—á–∫–∞</div>
            </div>
        </div>
    `;
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã –¥–µ–±–∏—Ç–æ—Ä–∫–∏
 */
function renderDebtsTable(data = debtsData) {
    const contentContainer = document.getElementById('debts-content-container');
    if (!contentContainer) return;
    
    contentContainer.innerHTML = `
        <div class="bg-white dark:bg-gray-700 rounded-lg overflow-hidden">
            <table class="w-full">
                <thead class="bg-gray-800">
                    <tr>
                        <th class="px-4 py-3 text-left text-white">–ö–ª—ñ—î–Ω—Ç</th>
                        <th class="px-4 py-3 text-left text-white">–ú–µ–Ω–µ–¥–∂–µ—Ä</th>
                        <th class="px-4 py-3 text-right text-white">–ó–∞–≥–∞–ª—å–Ω–∏–π –±–æ—Ä–≥</th>
                        <th class="px-4 py-3 text-right text-white">–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π</th>
                        <th class="px-4 py-3 text-center text-white">–î–Ω—ñ–≤ –ø—Ä–æ—Å—Ç—Ä–æ—á–∫–∏</th>
                        <th class="px-4 py-3 text-center text-white">–û—Å—Ç–∞–Ω–Ω—è –æ–ø–ª–∞—Ç–∞</th>
                        <th class="px-4 py-3 text-center text-white">–°—Ç–∞—Ç—É—Å</th>
                        <th class="px-4 py-3 text-center text-white">–î—ñ—ó</th>
                    </tr>
                </thead>
                <tbody>
                    ${data.map(debt => {
                        const hasComment = clientCommentsData.find(c => c.clientCode === debt.clientCode);
                        const hasForecast = paymentForecastsData.find(f => f.clientCode === debt.clientCode);
                        return `
                            <tr class="border-b border-gray-600 hover:bg-gray-600">
                                <td class="px-4 py-3 text-white">
                                    <div class="font-medium">${debt.clientName}</div>
                                    <div class="text-sm text-gray-400">${debt.clientCode}</div>
                                    ${hasComment ? '<div class="text-xs text-blue-400">üí¨ –Ñ –∫–æ–º–µ–Ω—Ç–∞—Ä</div>' : ''}
                                </td>
                                <td class="px-4 py-3 text-gray-200">
                                    <div>${debt.manager}</div>
                                    <div class="text-sm text-gray-400">${debt.department}</div>
                                </td>
                                <td class="px-4 py-3 text-right">
                                    <span class="font-medium text-white">${formatCurrency(debt.totalDebt)}</span>
                                </td>
                                <td class="px-4 py-3 text-right">
                                    <span class="font-medium ${debt.overdueDebt > 0 ? 'text-red-400' : 'text-green-400'}">
                                        ${formatCurrency(debt.overdueDebt)}
                                    </span>
                                </td>
                                <td class="px-4 py-3 text-center">
                                    <span class="px-2 py-1 rounded-full text-xs ${
                                        debt.daysOverdue === 0 ? 'bg-green-600 text-white' :
                                        debt.daysOverdue <= 30 ? 'bg-yellow-600 text-white' :
                                        debt.daysOverdue <= 60 ? 'bg-orange-600 text-white' :
                                        'bg-red-600 text-white'
                                    }">
                                        ${debt.daysOverdue || 0}
                                    </span>
                                </td>
                                <td class="px-4 py-3 text-center text-gray-200">${debt.lastPayment}</td>
                                <td class="px-4 py-3 text-center">
                                    ${hasForecast ? 
                                        '<div class="text-xs text-green-400">üìÖ –Ñ –ø—Ä–æ–≥–Ω–æ–∑</div>' : 
                                        '<div class="text-xs text-gray-500">–ë–µ–∑ –ø—Ä–æ–≥–Ω–æ–∑—É</div>'
                                    }
                                </td>
                                <td class="px-4 py-3 text-center">
                                    <button onclick="showDebtDetails('${debt.clientCode}')" 
                                            class="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm">
                                        –î–µ—Ç–∞–ª—ñ
                                    </button>
                                </td>
                            </tr>
                        `;
                    }).join('')}
                </tbody>
            </table>
        </div>
    `;
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ–±–∏—Ç–æ—Ä–∫–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
 */
function renderDebtsGroupedByManager(data = debtsData) {
    const contentContainer = document.getElementById('debts-content-container');
    if (!contentContainer) return;
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    const groupedByManager = {};
    data.forEach(debt => {
        const managerName = debt.manager || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
        if (!groupedByManager[managerName]) {
            groupedByManager[managerName] = {
                manager: managerName,
                department: debt.department || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
                clients: [],
                totalDebt: 0,
                overdueDebt: 0,
                clientsCount: 0
            };
        }
        
        groupedByManager[managerName].clients.push(debt);
        groupedByManager[managerName].totalDebt += debt.totalDebt || 0;
        groupedByManager[managerName].overdueDebt += debt.overdueDebt || 0;
        groupedByManager[managerName].clientsCount++;
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –æ–±—â–µ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏
    const sortedManagers = Object.values(groupedByManager).sort((a, b) => b.totalDebt - a.totalDebt);
    
    contentContainer.innerHTML = `
        <div class="space-y-6">
            ${sortedManagers.map(managerGroup => `
                <div class="bg-gray-700 rounded-lg overflow-hidden">
                    <div class="bg-gray-800 p-4 cursor-pointer hover:bg-gray-750" onclick="toggleManagerGroup('${(managerGroup.manager || 'unknown').replace(/'/g, '\\\'')}')">
                        <div class="flex justify-between items-center">
                            <div class="flex items-center gap-4">
                                <div>
                                    <h3 class="text-lg font-bold text-white">${managerGroup.manager}</h3>
                                    <p class="text-sm text-gray-400">${managerGroup.department}</p>
                                </div>
                            </div>
                            <div class="flex items-center gap-6">
                                <div class="text-center">
                                    <div class="text-lg font-bold text-white">${managerGroup.clientsCount}</div>
                                    <div class="text-xs text-gray-400">–ö–ª—ñ—î–Ω—Ç—ñ–≤</div>
                                </div>
                                <div class="text-center">
                                    <div class="text-lg font-bold text-white">${formatCurrency(managerGroup.totalDebt)}</div>
                                    <div class="text-xs text-gray-400">–ó–∞–≥–∞–ª—å–Ω–∏–π –±–æ—Ä–≥</div>
                                </div>
                                <div class="text-center">
                                    <div class="text-lg font-bold ${managerGroup.overdueDebt > 0 ? 'text-red-400' : 'text-green-400'}">${formatCurrency(managerGroup.overdueDebt)}</div>
                                    <div class="text-xs text-gray-400">–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π</div>
                                </div>
                                <div class="text-white">
                                    <span id="arrow-${(managerGroup.manager || 'unknown').replace(/[^a-zA-Z0-9]/g, '_')}">‚ñº</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="clients-${(managerGroup.manager || 'unknown').replace(/[^a-zA-Z0-9]/g, '_')}" class="hidden">
                        <table class="w-full">
                            <thead class="bg-gray-600">
                                <tr>
                                    <th class="px-4 py-3 text-left text-white">–ö–ª—ñ—î–Ω—Ç</th>
                                    <th class="px-4 py-3 text-right text-white">–ó–∞–≥–∞–ª—å–Ω–∏–π –±–æ—Ä–≥</th>
                                    <th class="px-4 py-3 text-right text-white">–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π</th>
                                    <th class="px-4 py-3 text-center text-white">–î–Ω—ñ–≤ –ø—Ä–æ—Å—Ç—Ä–æ—á–∫–∏</th>
                                    <th class="px-4 py-3 text-center text-white">–û—Å—Ç–∞–Ω–Ω—è –æ–ø–ª–∞—Ç–∞</th>
                                    <th class="px-4 py-3 text-center text-white">–°—Ç–∞—Ç—É—Å</th>
                                    <th class="px-4 py-3 text-center text-white">–î—ñ—ó</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${managerGroup.clients.sort((a, b) => b.totalDebt - a.totalDebt).map(debt => {
                                    const hasComment = clientCommentsData.find(c => c.clientCode === debt.clientCode);
                                    const hasForecast = paymentForecastsData.find(f => f.clientCode === debt.clientCode);
                                    return `
                                        <tr class="border-b border-gray-600 hover:bg-gray-600">
                                            <td class="px-4 py-3 text-white">
                                                <div class="font-medium">${debt.clientName}</div>
                                                <div class="text-sm text-gray-400">${debt.clientCode}</div>
                                                ${hasComment ? '<div class="text-xs text-blue-400">üí¨ –Ñ –∫–æ–º–µ–Ω—Ç–∞—Ä</div>' : ''}
                                            </td>
                                            <td class="px-4 py-3 text-right">
                                                <span class="font-medium text-white">${formatCurrency(debt.totalDebt)}</span>
                                            </td>
                                            <td class="px-4 py-3 text-right">
                                                <span class="font-medium ${debt.overdueDebt > 0 ? 'text-red-400' : 'text-green-400'}">
                                                    ${formatCurrency(debt.overdueDebt)}
                                                </span>
                                            </td>
                                            <td class="px-4 py-3 text-center">
                                                <span class="px-2 py-1 rounded-full text-xs ${
                                                    debt.daysOverdue === 0 ? 'bg-green-600 text-white' :
                                                    debt.daysOverdue <= 30 ? 'bg-yellow-600 text-white' :
                                                    debt.daysOverdue <= 60 ? 'bg-orange-600 text-white' :
                                                    'bg-red-600 text-white'
                                                }">
                                                    ${debt.daysOverdue || 0}
                                                </span>
                                            </td>
                                            <td class="px-4 py-3 text-center text-gray-200">${debt.lastPayment}</td>
                                            <td class="px-4 py-3 text-center">
                                                ${hasForecast ? 
                                                    '<div class="text-xs text-green-400">üìÖ –Ñ –ø—Ä–æ–≥–Ω–æ–∑</div>' : 
                                                    '<div class="text-xs text-gray-500">–ë–µ–∑ –ø—Ä–æ–≥–Ω–æ–∑—É</div>'
                                                }
                                            </td>
                                            <td class="px-4 py-3 text-center">
                                                <button onclick="showDebtDetails('${debt.clientCode}')" 
                                                        class="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm">
                                                    –î–µ—Ç–∞–ª—ñ
                                                </button>
                                            </td>
                                        </tr>
                                    `;
                                }).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>
            `).join('')}
        </div>
    `;
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */
window.toggleManagerGroup = function(managerName) {
    const managerId = (managerName || 'unknown').replace(/[^a-zA-Z0-9]/g, '_');
    const clientsDiv = document.getElementById(`clients-${managerId}`);
    const arrow = document.getElementById(`arrow-${managerId}`);
    
    if (clientsDiv && arrow) {
        if (clientsDiv.classList.contains('hidden')) {
            clientsDiv.classList.remove('hidden');
            arrow.textContent = '‚ñ≤';
        } else {
            clientsDiv.classList.add('hidden');
            arrow.textContent = '‚ñº';
        }
    }
};

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
 */
window.showDebtDetails = function(clientCode) {
    const debt = debtsData.find(d => d.clientCode === clientCode);
    if (!debt) return;
    
    const existingComment = clientCommentsData.find(c => c.clientCode === clientCode);
    const existingForecast = paymentForecastsData.find(f => f.clientCode === clientCode);
    
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60';
    modal.innerHTML = `
        <div class="bg-gray-800 rounded-lg p-6 w-full max-w-5xl max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-2xl font-bold text-white">–î–µ—Ç–∞–ª—ñ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ: ${debt.clientName}</h2>
                <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-white text-2xl">&times;</button>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div class="bg-gray-700 rounded-lg p-4">
                    <div class="text-lg font-bold text-white">${formatCurrency(debt.totalDebt)}</div>
                    <div class="text-sm text-gray-400">–ó–∞–≥–∞–ª—å–Ω–∏–π –±–æ—Ä–≥</div>
                </div>
                <div class="bg-red-600 rounded-lg p-4">
                    <div class="text-lg font-bold text-white">${formatCurrency(debt.overdueDebt)}</div>
                    <div class="text-sm text-red-200">–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π</div>
                </div>
                <div class="bg-green-600 rounded-lg p-4">
                    <div class="text-lg font-bold text-white">${formatCurrency(debt.currentDebt)}</div>
                    <div class="text-sm text-green-200">–ü–æ—Ç–æ—á–Ω–∏–π</div>
                </div>
                <div class="bg-yellow-600 rounded-lg p-4">
                    <div class="text-lg font-bold text-white">${debt.daysOverdue}</div>
                    <div class="text-sm text-yellow-200">–î–Ω—ñ–≤ –ø—Ä–æ—Å—Ç—Ä–æ—á–∫–∏</div>
                </div>
            </div>
            
            <div class="mb-6">
                <h3 class="text-lg font-bold text-white mb-3">–ó–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ –ø–æ –¥–æ–≥–æ–≤–æ—Ä–∞—Ö</h3>
                <div class="bg-gray-700 rounded-lg overflow-hidden">
                    <table class="w-full">
                        <thead class="bg-gray-600">
                            <tr>
                                <th class="px-4 py-2 text-left text-white">–î–æ–≥–æ–≤—ñ—Ä</th>
                                <th class="px-4 py-2 text-center text-white">–î–∞—Ç–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è</th>
                                <th class="px-4 py-2 text-right text-white">–°—É–º–∞ –±–æ—Ä–≥—É</th>
                                <th class="px-4 py-2 text-center text-white">–ú–µ–Ω–µ–¥–∂–µ—Ä</th>
                                <th class="px-4 py-2 text-center text-white">–°—Ç–∞—Ç—É—Å</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${debt.invoices.map(invoice => `
                                <tr class="border-b border-gray-600">
                                    <td class="px-4 py-2 text-white">
                                        <div class="font-medium">${invoice.contract || invoice.number}</div>
                                        ${invoice.contract !== invoice.number ? `<div class="text-xs text-gray-400">${invoice.number}</div>` : ''}
                                    </td>
                                    <td class="px-4 py-2 text-center text-gray-200">${invoice.date}</td>
                                    <td class="px-4 py-2 text-right text-white font-medium">${formatCurrency(invoice.amount)}</td>
                                    <td class="px-4 py-2 text-center text-gray-200">${debt.manager}</td>
                                    <td class="px-4 py-2 text-center">
                                        <span class="px-2 py-1 rounded-full text-xs ${
                                            invoice.status === 'overdue' ? 'bg-red-600 text-white' : 'bg-green-600 text-white'
                                        }">
                                            ${invoice.status === 'overdue' ? '–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ' : '–ü–æ—Ç–æ—á–Ω–∏–π'}
                                        </span>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                ${window.hasPermission('debts_manage_comments') ? `
                    <div>
                        <h3 class="text-lg font-bold text-white mb-3">–ö–æ–º–µ–Ω—Ç–∞—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞</h3>
                        <textarea id="manager-comment-${clientCode}" 
                                  class="w-full h-24 bg-gray-700 text-white rounded border border-gray-600 p-3"
                                  placeholder="–î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –ø—Ä–æ —Å—Ç–∞–Ω –æ–ø–ª–∞—Ç–∏...">${existingComment?.comment || ''}</textarea>
                        ${existingComment ? `<div class="text-xs text-gray-400 mt-1">–û–Ω–æ–≤–ª–µ–Ω–æ: ${new Date(existingComment.updatedAt?.seconds * 1000).toLocaleDateString()}</div>` : ''}
                    </div>
                ` : existingComment ? `
                    <div>
                        <h3 class="text-lg font-bold text-white mb-3">–ö–æ–º–µ–Ω—Ç–∞—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞</h3>
                        <div class="w-full h-24 bg-gray-600 text-gray-300 rounded border border-gray-500 p-3 overflow-y-auto">
                            ${existingComment.comment || '–ù–µ–º–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä—è'}
                        </div>
                        <div class="text-xs text-gray-400 mt-1">–û–Ω–æ–≤–ª–µ–Ω–æ: ${new Date(existingComment.updatedAt?.seconds * 1000).toLocaleDateString()}</div>
                    </div>
                ` : ''}
                ${window.hasPermission('debts_manage_forecasts') ? `
                    <div>
                        <h3 class="text-lg font-bold text-white mb-3">–ü—Ä–æ–≥–Ω–æ–∑ –æ–ø–ª–∞—Ç–∏</h3>
                        <input type="date" id="payment-forecast-${clientCode}" 
                               class="w-full bg-gray-700 text-white rounded border border-gray-600 p-3 mb-2"
                               value="${existingForecast?.forecastDate || ''}">
                        <input type="number" id="payment-amount-${clientCode}" 
                               class="w-full bg-gray-700 text-white rounded border border-gray-600 p-3"
                               placeholder="–°—É–º–∞ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –æ–ø–ª–∞—Ç–∏"
                               value="${existingForecast?.forecastAmount || ''}">
                        ${existingForecast ? `<div class="text-xs text-gray-400 mt-1">–ü—Ä–æ–≥–Ω–æ–∑ –≤—ñ–¥: ${new Date(existingForecast.createdAt?.seconds * 1000).toLocaleDateString()}</div>` : ''}
                    </div>
                ` : existingForecast ? `
                    <div>
                        <h3 class="text-lg font-bold text-white mb-3">–ü—Ä–æ–≥–Ω–æ–∑ –æ–ø–ª–∞—Ç–∏</h3>
                        <div class="w-full bg-gray-600 text-gray-300 rounded border border-gray-500 p-3 mb-2">
                            –î–∞—Ç–∞: ${existingForecast.forecastDate || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
                        </div>
                        <div class="w-full bg-gray-600 text-gray-300 rounded border border-gray-500 p-3">
                            –°—É–º–∞: ${existingForecast.forecastAmount ? formatCurrency(existingForecast.forecastAmount) : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
                        </div>
                        <div class="text-xs text-gray-400 mt-1">–ü—Ä–æ–≥–Ω–æ–∑ –≤—ñ–¥: ${new Date(existingForecast.createdAt?.seconds * 1000).toLocaleDateString()}</div>
                    </div>
                ` : ''}
            </div>
            
            <div class="flex justify-end gap-4 mt-6">
                <button onclick="this.closest('.fixed').remove()" 
                        class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700">
                    –ó–∞–∫—Ä–∏—Ç–∏
                </button>
                ${window.hasPermission('debts_manage_comments') || window.hasPermission('debts_manage_forecasts') ? `
                    <button onclick="saveDebtComment('${clientCode}')" 
                            class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                        –ó–±–µ—Ä–µ–≥—Ç–∏
                    </button>
                ` : ''}
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
};

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –¥–µ–±–∏—Ç–æ—Ä–∫–µ
 */
window.saveDebtComment = async function(clientCode) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (!window.hasPermission || (!window.hasPermission('debts_manage_comments') && !window.hasPermission('debts_manage_forecasts'))) {
        alert('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö');
        return;
    }
    
    const comment = document.getElementById(`manager-comment-${clientCode}`)?.value || '';
    const forecastDate = document.getElementById(`payment-forecast-${clientCode}`)?.value || '';
    const forecastAmount = document.getElementById(`payment-amount-${clientCode}`)?.value || '';
    
    try {
        const companyId = window.state?.currentCompanyId;
        const userId = window.state?.currentUserId;
        
        if (!companyId) {
            alert('–ü–æ–º–∏–ª–∫–∞: –ö–æ–º–ø–∞–Ω—ñ—è –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞');
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
        if (comment.trim() && window.hasPermission('debts_manage_comments')) {
            const commentData = {
                clientCode,
                comment: comment.trim(),
                updatedAt: firebase.serverTimestamp(),
                updatedBy: userId
            };
            
            await firebase.setDoc(
                firebase.doc(firebase.db, `companies/${companyId}/debtComments`, clientCode),
                commentData,
                { merge: true }
            );
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –æ–ø–ª–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
        if (forecastDate && forecastAmount && window.hasPermission('debts_manage_forecasts')) {
            const forecastData = {
                clientCode,
                forecastDate,
                forecastAmount: parseFloat(forecastAmount),
                createdAt: firebase.serverTimestamp(),
                createdBy: userId
            };
            
            await firebase.setDoc(
                firebase.doc(firebase.db, `companies/${companyId}/paymentForecasts`, clientCode),
                forecastData,
                { merge: true }
            );
        }
        
        alert('–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!');
        document.querySelector('.fixed').remove();
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        loadDebtsData();
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö');
    }
};

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
 */
window.exportDebtsToExcel = function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (!window.hasPermission || !window.hasPermission('debts_export')) {
        alert('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö');
        return;
    }
    
    try {
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        const exportData = debtsData.map(debt => ({
            '–ö–æ–¥ –∫–ª—ñ—î–Ω—Ç–∞': debt.clientCode,
            '–ù–∞–∑–≤–∞ –∫–ª—ñ—î–Ω—Ç–∞': debt.clientName,
            '–ú–µ–Ω–µ–¥–∂–µ—Ä': debt.manager,
            '–í—ñ–¥–¥—ñ–ª': debt.department,
            '–ó–∞–≥–∞–ª—å–Ω–∏–π –±–æ—Ä–≥': debt.totalDebt,
            '–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π –±–æ—Ä–≥': debt.overdueDebt,
            '–ü–æ—Ç–æ—á–Ω–∏–π –±–æ—Ä–≥': debt.currentDebt,
            '–î–Ω—ñ–≤ –ø—Ä–æ—Å—Ç—Ä–æ—á–∫–∏': debt.daysOverdue,
            '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ–≥–æ–≤–æ—Ä—ñ–≤': debt.contracts?.length || debt.invoices?.length || 0
        }));
        
        // –°–æ–∑–¥–∞–µ–º CSV –∫–æ–Ω—Ç–µ–Ω—Ç
        const headers = Object.keys(exportData[0]);
        const csvContent = [
            headers.join(','),
            ...exportData.map(row => 
                headers.map(header => {
                    const value = row[header];
                    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –∫–∞–≤—ã—á–∫–∏
                    if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
                        return `"${value.replace(/"/g, '""')}"`;
                    }
                    return value;
                }).join(',')
            )
        ].join('\n');
        
        // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const blob = new Blob(['\uFEFF' + csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', `debitorka_${new Date().toISOString().split('T')[0]}.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        console.log('–ï–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∑–∞–ø–∏—Å—ñ–≤:', exportData.length);
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö');
    }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 */
window.refreshDebtsData = function() {
    loadDebtsData();
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
 */
function formatCurrency(amount) {
    return new Intl.NumberFormat('uk-UA', {
        style: 'currency',
        currency: 'UAH',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
    }).format(amount);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
window.loadDebtsData = loadDebtsData;