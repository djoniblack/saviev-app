// planFact.js - –ú–æ–¥—É–ª—å –ø–ª–∞–Ω-—Ñ–∞–∫—Ç
import * as firebase from './firebase.js';

let plansData = [];
let salesData = [];
let managersData = [];
let currentActiveTab = 'overview';

// –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≤
const DEMO_PLANS_DATA = [
    {
        id: "plan-001",
        managerId: "mgr-001",
        managerName: "–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω",
        department: "–í—ñ–¥–¥—ñ–ª –ø—Ä–æ–¥–∞–∂—É",
        planName: "–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂—É –Ω–∞ –≥—Ä—É–¥–µ–Ω—å 2024",
        period: "2024-12",
        type: "mixed", // revenue, quantity, mixed
        status: "active",
        targets: [
            {
                id: "target-001",
                name: "–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∏—Ä—É—á–∫–∞",
                type: "revenue",
                target: 500000,
                current: 320000,
                products: [], // –í—Å–µ —Ç–æ–≤–∞—Ä—ã
                deadline: "2024-12-31"
            },
            {
                id: "target-002", 
                name: "–ü—Ä–æ–¥–∞–∂—ñ —Å—Ç–∞–∫–∞–Ω—ñ–≤",
                type: "quantity",
                target: 1000,
                current: 650,
                products: ["–°—Ç–∞–∫–∞–Ω 360–º–ª", "–°—Ç–∞–∫–∞–Ω 500–º–ª"],
                deadline: "2024-12-31"
            },
            {
                id: "target-003",
                name: "–ù–æ–≤—ñ –∫–ª—ñ—î–Ω—Ç–∏",
                type: "quantity",
                target: 20,
                current: 12,
                products: [],
                deadline: "2024-12-31"
            }
        ],
        createdAt: "2024-12-01",
        createdBy: "user-001"
    },
    {
        id: "plan-002",
        managerId: "mgr-002", 
        managerName: "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä–æ",
        department: "–í—ñ–¥–¥—ñ–ª –ø—Ä–æ–¥–∞–∂—É",
        planName: "–ü–ª–∞–Ω –Ω–∞ —Å—ñ—á–µ–Ω—å 2025",
        period: "2025-01",
        type: "revenue",
        status: "active",
        targets: [
            {
                id: "target-004",
                name: "–í–∏—Ä—É—á–∫–∞ –≤—ñ–¥ –æ–ø—Ç–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤",
                type: "revenue",
                target: 300000,
                current: 45000,
                products: [],
                deadline: "2025-01-31"
            }
        ],
        createdAt: "2024-12-15",
        createdBy: "user-002"
    },
    {
        id: "plan-003",
        managerId: "mgr-003", 
        managerName: "–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä",
        department: "–û–ø—Ç–æ–≤–∏–π –≤—ñ–¥–¥—ñ–ª",
        planName: "–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω Q1 2025",
        period: "2025-Q1",
        type: "mixed",
        status: "draft",
        targets: [
            {
                id: "target-005",
                name: "–û–ø—Ç–æ–≤–∏–π –æ–±–æ—Ä–æ—Ç",
                type: "revenue",
                target: 1500000,
                current: 0,
                products: [],
                deadline: "2025-03-31"
            },
            {
                id: "target-006",
                name: "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–≥–æ–¥",
                type: "quantity",
                target: 150,
                current: 0,
                products: [],
                deadline: "2025-03-31"
            }
        ],
        createdAt: "2024-12-20",
        createdBy: "user-003"
    }
];

// –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –ø–ª–∞–Ω-—Ñ–∞–∫—Ç
const DEMO_SALES_DATA = [
    { date: "2024-12-01", managerId: "mgr-001", manager: "–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω", product: "–°—Ç–∞–∫–∞–Ω 360–º–ª", quantity: 50, revenue: 15000 },
    { date: "2024-12-02", managerId: "mgr-001", manager: "–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω", product: "–°—Ç–∞–∫–∞–Ω 500–º–ª", quantity: 30, revenue: 12000 },
    { date: "2024-12-03", managerId: "mgr-001", manager: "–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω", product: "–ö—Ä–∏—à–∫–∞", quantity: 100, revenue: 8000 },
    { date: "2024-12-05", managerId: "mgr-001", manager: "–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω", product: "–°—Ç–∞–∫–∞–Ω 360–º–ª", quantity: 75, revenue: 22500 },
    { date: "2024-12-10", managerId: "mgr-001", manager: "–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω", product: "–Ü–Ω—à–∏–π —Ç–æ–≤–∞—Ä", quantity: 20, revenue: 45000 },
    { date: "2024-12-15", managerId: "mgr-001", manager: "–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω", product: "–°—Ç–∞–∫–∞–Ω 500–º–ª", quantity: 45, revenue: 18000 },
    { date: "2025-01-02", managerId: "mgr-002", manager: "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä–æ", product: "–¢–æ–≤–∞—Ä –ê", quantity: 10, revenue: 25000 },
    { date: "2025-01-05", managerId: "mgr-002", manager: "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä–æ", product: "–¢–æ–≤–∞—Ä –ë", quantity: 15, revenue: 20000 }
];

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –ø–ª–∞–Ω-—Ñ–∞–∫—Ç
 */
export function initPlanFactModule(container) {
    console.log('initPlanFactModule called', container);
    if (!container) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (!window.hasPermission('planfact_view_page')) {
        container.innerHTML = `
            <div class="bg-red-900 rounded-xl shadow-lg p-6 text-center">
                <h2 class="text-2xl font-bold text-white mb-4">–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ</h2>
                <p class="text-red-200">–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –º–æ–¥—É–ª—è –ü–ª–∞–Ω-–§–∞–∫—Ç.</p>
                <p class="text-red-300 text-sm mt-2">–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É.</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = `
        <div class="bg-gray-800 rounded-xl shadow-lg p-6">
            <div class="mb-4 flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div>
                    <h1 class="text-3xl md:text-4xl font-bold text-white">–ü–ª–∞–Ω-–§–∞–∫—Ç</h1>
                    <p class="mt-2 text-gray-400">–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ–ª–µ–π</p>
                </div>
                <div class="flex gap-2">
                    ${window.hasPermission('planfact_create_plans') ? `
                        <button onclick="showCreatePlanModal()" 
                                class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">
                            + –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞–Ω
                        </button>
                    ` : ''}
                    <button onclick="refreshPlanFactData()" 
                            class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                        üîÑ –û–Ω–æ–≤–∏—Ç–∏
                    </button>
                </div>
            </div>
            <div id="planfact-tabs" class="mb-4"></div>
            <div id="planfact-content" class="mb-4"></div>
        </div>
    `;

    loadPlanFactData();
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω-—Ñ–∞–∫—Ç
 */
async function loadPlanFactData() {
    try {
        showLoadingState();
        
        // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        plansData = DEMO_PLANS_DATA;
        salesData = DEMO_SALES_DATA;
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ Firebase
        const companyId = window.state?.currentCompanyId;
        if (companyId) {
            const employeesSnap = await firebase.getDocs(
                firebase.collection(firebase.db, `companies/${companyId}/employees`)
            );
            managersData = employeesSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        }
        
        hideLoadingState();
        renderPlanFactTabs();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        if (currentActiveTab === 'overview') {
            renderPlansOverview();
        } else {
            renderPlansDashboard();
        }
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–ª–∞–Ω-—Ñ–∞–∫—Ç:', error);
        showErrorState('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö');
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 */
function showLoadingState() {
    const contentContainer = document.getElementById('planfact-content');
    if (!contentContainer) return;
    
    contentContainer.innerHTML = `
        <div class="text-center p-8">
            <div class="loader mx-auto mb-4"></div>
            <p class="text-gray-300">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–ª–∞–Ω-—Ñ–∞–∫—Ç...</p>
        </div>
    `;
}

/**
 * –°–∫—Ä—ã—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 */
function hideLoadingState() {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ –≤ render —Ñ—É–Ω–∫—Ü–∏—è—Ö
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
 */
function showErrorState(message) {
    const contentContainer = document.getElementById('planfact-content');
    if (!contentContainer) return;
    
    contentContainer.innerHTML = `
        <div class="text-center p-8 bg-red-900 rounded-lg">
            <p class="text-red-200 text-lg">${message}</p>
            <button onclick="loadPlanFactData()" 
                    class="mt-4 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">
                –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
            </button>
        </div>
    `;
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–æ–∫
 */
function renderPlanFactTabs() {
    const tabsContainer = document.getElementById('planfact-tabs');
    if (!tabsContainer) return;
    
    tabsContainer.innerHTML = `
        <div class="flex space-x-1 bg-gray-700 rounded-lg p-1">
            <button onclick="switchPlanFactTab('overview')" 
                    id="tab-overview"
                    class="tab-button px-4 py-2 rounded-md text-sm font-medium transition-colors ${currentActiveTab === 'overview' ? 'bg-white text-gray-900' : 'text-gray-300 hover:text-white'}">
                –û–≥–ª—è–¥ –ø–ª–∞–Ω—ñ–≤
            </button>
            <button onclick="switchPlanFactTab('dashboard')" 
                    id="tab-dashboard"
                    class="tab-button px-4 py-2 rounded-md text-sm font-medium transition-colors ${currentActiveTab === 'dashboard' ? 'bg-white text-gray-900' : 'text-gray-300 hover:text-white'}">
                –î–∞—à–±–æ—Ä–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            </button>
        </div>
    `;
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
 */
window.switchPlanFactTab = function(tab) {
    currentActiveTab = tab;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.querySelectorAll('.tab-button').forEach(btn => {
        btn.classList.remove('bg-white', 'text-gray-900');
        btn.classList.add('text-gray-300', 'hover:text-white');
    });
    
    const activeTab = document.getElementById(`tab-${tab}`);
    if (activeTab) {
        activeTab.classList.add('bg-white', 'text-gray-900');
        activeTab.classList.remove('text-gray-300', 'hover:text-white');
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏
    switch(tab) {
        case 'overview':
            renderPlansOverview();
            break;
        case 'dashboard':
            renderPlansDashboard();
            break;
    }
};

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ–±–∑–æ—Ä–∞ –ø–ª–∞–Ω–æ–≤
 */
function renderPlansOverview() {
    const contentContainer = document.getElementById('planfact-content');
    if (!contentContainer) return;
    
    const activePlans = plansData.filter(p => p.status === 'active');
    const draftPlans = plansData.filter(p => p.status === 'draft');
    const completedTargets = plansData.reduce((count, plan) => {
        return count + plan.targets.filter(target => target.current >= target.target).length;
    }, 0);
    const totalTargets = plansData.reduce((count, plan) => count + plan.targets.length, 0);
    
    contentContainer.innerHTML = `
        <div class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
                <div class="bg-blue-600 rounded-lg p-4">
                    <div class="text-2xl font-bold text-white">${activePlans.length}</div>
                    <div class="text-sm text-blue-200">–ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–ª–∞–Ω—ñ–≤</div>
                </div>
                <div class="bg-yellow-600 rounded-lg p-4">
                    <div class="text-2xl font-bold text-white">${draftPlans.length}</div>
                    <div class="text-sm text-yellow-200">–ß–µ—Ä–Ω–µ—Ç–æ–∫</div>
                </div>
                <div class="bg-green-600 rounded-lg p-4">
                    <div class="text-2xl font-bold text-white">${completedTargets}</div>
                    <div class="text-sm text-green-200">–í–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ü—ñ–ª–µ–π</div>
                </div>
                <div class="bg-purple-600 rounded-lg p-4">
                    <div class="text-2xl font-bold text-white">${getAvgCompletion()}%</div>
                    <div class="text-sm text-purple-200">–°–µ—Ä–µ–¥–Ω—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è</div>
                </div>
                <div class="bg-orange-600 rounded-lg p-4">
                    <div class="text-2xl font-bold text-white">${formatCurrency(getTotalPlanRevenue())}</div>
                    <div class="text-sm text-orange-200">–ó–∞–≥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω</div>
                </div>
            </div>
            
            <div class="bg-gray-700 rounded-lg overflow-hidden">
                <table class="w-full">
                    <thead class="bg-gray-800">
                        <tr>
                            <th class="px-4 py-3 text-left text-white">–ü–ª–∞–Ω</th>
                            <th class="px-4 py-3 text-left text-white">–ú–µ–Ω–µ–¥–∂–µ—Ä</th>
                            <th class="px-4 py-3 text-center text-white">–ü–µ—Ä—ñ–æ–¥</th>
                            <th class="px-4 py-3 text-center text-white">–¶—ñ–ª–µ–π</th>
                            <th class="px-4 py-3 text-center text-white">–í–∏–∫–æ–Ω–∞–Ω–Ω—è</th>
                            <th class="px-4 py-3 text-center text-white">–°—Ç–∞—Ç—É—Å</th>
                            <th class="px-4 py-3 text-center text-white">–î—ñ—ó</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${plansData.map(plan => {
                            const completion = calculatePlanCompletion(plan);
                            return `
                                <tr class="border-b border-gray-600 hover:bg-gray-600">
                                    <td class="px-4 py-3 text-white">
                                        <div class="font-medium">${plan.planName}</div>
                                        <div class="text-sm text-gray-400">${plan.type === 'revenue' ? '–ì—Ä–æ—à–æ–≤–∏–π' : plan.type === 'quantity' ? '–ö—ñ–ª—å–∫—ñ—Å–Ω–∏–π' : '–ó–º—ñ—à–∞–Ω–∏–π'}</div>
                                    </td>
                                    <td class="px-4 py-3 text-gray-200">
                                        <div>${plan.managerName}</div>
                                        <div class="text-sm text-gray-400">${plan.department}</div>
                                    </td>
                                    <td class="px-4 py-3 text-center text-gray-200">${plan.period}</td>
                                    <td class="px-4 py-3 text-center text-gray-200">${plan.targets.length}</td>
                                    <td class="px-4 py-3 text-center">
                                        <div class="w-full bg-gray-600 rounded-full h-2 mb-1">
                                            <div class="bg-green-500 h-2 rounded-full" style="width: ${completion}%"></div>
                                        </div>
                                        <span class="text-sm text-gray-300">${completion}%</span>
                                    </td>
                                    <td class="px-4 py-3 text-center">
                                        <span class="px-2 py-1 rounded-full text-xs ${
                                            plan.status === 'active' ? 'bg-green-600 text-white' : 
                                            plan.status === 'draft' ? 'bg-yellow-600 text-white' :
                                            'bg-gray-600 text-white'
                                        }">
                                            ${plan.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : plan.status === 'draft' ? '–ß–µ—Ä–Ω–µ—Ç–∫–∞' : '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–π'}
                                        </span>
                                    </td>
                                    <td class="px-4 py-3 text-center">
                                        <button onclick="showPlanDetails('${plan.id}')" 
                                                class="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm mr-1">
                                            –î–µ—Ç–∞–ª—ñ
                                        </button>
                                        <button onclick="editPlan('${plan.id}')" 
                                                class="px-3 py-1 bg-yellow-600 text-white rounded hover:bg-yellow-700 text-sm mr-1">
                                            –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                                        </button>
                                        ${plan.status === 'draft' ? 
                                            `<button onclick="activatePlan('${plan.id}')" 
                                                     class="px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 text-sm">
                                                –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏
                                            </button>` : ''
                                        }
                                    </td>
                                </tr>
                            `;
                        }).join('')}
                    </tbody>
                </table>
            </div>
        </div>
    `;
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–∞—à–±–æ—Ä–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
function renderPlansDashboard() {
    const contentContainer = document.getElementById('planfact-content');
    if (!contentContainer) return;
    
    const currentMonth = new Date().toISOString().slice(0, 7);
    const activePlans = plansData.filter(plan => plan.status === 'active');
    
    contentContainer.innerHTML = `
        <div class="space-y-6">
            <div class="bg-gray-700 rounded-lg p-4">
                <h2 class="text-xl font-bold text-white mb-4">–î–∞—à–±–æ—Ä–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    ${activePlans.map(plan => {
                        const completion = calculatePlanCompletion(plan);
                        return `
                            <div class="bg-gray-800 rounded-lg p-4">
                                <div class="flex justify-between items-start mb-3">
                                    <div>
                                        <h3 class="font-bold text-white">${plan.managerName}</h3>
                                        <div class="text-sm text-gray-400">${plan.planName}</div>
                                        <div class="text-xs text-gray-500">${plan.period}</div>
                                    </div>
                                    <div class="text-right">
                                        <div class="text-lg font-bold text-white">${completion}%</div>
                                        <div class="text-xs text-gray-400">–≤–∏–∫–æ–Ω–∞–Ω–æ</div>
                                    </div>
                                </div>
                                
                                ${plan.targets.map(target => {
                                    const targetCompletion = (target.current / target.target) * 100;
                                    const targetForecast = calculateTargetForecast(target, plan.period);
                                    const isOnTrack = targetForecast >= target.target;
                                    return `
                                        <div class="mb-3 p-3 bg-gray-700 rounded">
                                            <div class="flex justify-between items-center mb-1">
                                                <span class="text-sm text-white">${target.name}</span>
                                                <span class="text-xs px-2 py-1 rounded ${target.type === 'revenue' ? 'bg-green-600' : 'bg-blue-600'} text-white">
                                                    ${target.type === 'revenue' ? 'UAH' : '—à—Ç'}
                                                </span>
                                            </div>
                                            <div class="w-full bg-gray-600 rounded-full h-2 mb-1">
                                                <div class="bg-blue-500 h-2 rounded-full" style="width: ${Math.min(targetCompletion, 100)}%"></div>
                                            </div>
                                            <div class="flex justify-between text-xs text-gray-300 mb-1">
                                                <span>${target.type === 'revenue' ? formatCurrency(target.current) : target.current} / ${target.type === 'revenue' ? formatCurrency(target.target) : target.target}</span>
                                                <span>${targetCompletion.toFixed(1)}%</span>
                                            </div>
                                            <div class="flex justify-between items-center text-xs">
                                                <span class="text-gray-400">–ü—Ä–æ–≥–Ω–æ–∑:</span>
                                                <span class="font-medium ${isOnTrack ? 'text-green-400' : 'text-red-400'}">
                                                    ${target.type === 'revenue' ? formatCurrency(targetForecast) : targetForecast}
                                                    ${isOnTrack ? '‚úì' : '‚ö†Ô∏è'}
                                                </span>
                                            </div>
                                            ${target.products.length > 0 ? `
                                                <div class="mt-1 text-xs text-gray-500">
                                                    –¢–æ–≤–∞—Ä–∏: ${target.products.slice(0, 2).join(', ')}${target.products.length > 2 ? '...' : ''}
                                                </div>
                                            ` : ''}
                                        </div>
                                    `;
                                }).join('')}
                            </div>
                        `;
                    }).join('')}
                </div>
            </div>
            
            <!-- –ì—Ä–∞—Ñ—ñ–∫ –ø—Ä–æ–≥—Ä–µ—Å—É -->
            <div class="bg-gray-700 rounded-lg p-4">
                <h3 class="text-lg font-bold text-white mb-4">–î–∏–Ω–∞–º—ñ–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    ${renderProgressCharts()}
                </div>
            </div>
        </div>
    `;
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
function renderProgressCharts() {
    const activeManagers = [...new Set(plansData.filter(p => p.status === 'active').map(p => p.managerName))];
    
    return activeManagers.map(manager => {
        const managerPlans = plansData.filter(p => p.managerName === manager && p.status === 'active');
        const avgCompletion = managerPlans.reduce((sum, plan) => sum + calculatePlanCompletion(plan), 0) / (managerPlans.length || 1);
        
        return `
            <div class="bg-gray-800 rounded-lg p-4">
                <h4 class="font-bold text-white mb-2">${manager}</h4>
                <div class="space-y-2">
                    ${managerPlans.map(plan => {
                        const completion = calculatePlanCompletion(plan);
                        return `
                            <div>
                                <div class="flex justify-between text-sm text-gray-300 mb-1">
                                    <span>${plan.planName}</span>
                                    <span>${completion}%</span>
                                </div>
                                <div class="w-full bg-gray-600 rounded-full h-1">
                                    <div class="bg-gradient-to-r from-blue-500 to-green-500 h-1 rounded-full" style="width: ${completion}%"></div>
                                </div>
                            </div>
                        `;
                    }).join('')}
                    <div class="mt-3 pt-2 border-t border-gray-600">
                        <div class="flex justify-between text-sm font-medium">
                            <span class="text-white">–°–µ—Ä–µ–¥–Ω—î:</span>
                            <span class="text-white">${Math.round(avgCompletion)}%</span>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }).join('');
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞
 */
window.showCreatePlanModal = function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (!window.hasPermission || !window.hasPermission('planfact_create_plans')) {
        alert('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤');
        return;
    }
    
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60';
    modal.innerHTML = `
        <div class="bg-gray-800 rounded-lg p-6 w-full max-w-3xl max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-2xl font-bold text-white">–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω—É</h2>
                <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-white text-2xl">&times;</button>
            </div>
            
            <form id="create-plan-form" class="space-y-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–ù–∞–∑–≤–∞ –ø–ª–∞–Ω—É</label>
                        <input type="text" id="plan-name" class="w-full bg-gray-700 text-white rounded border border-gray-600 p-2" required>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–ú–µ–Ω–µ–¥–∂–µ—Ä</label>
                        <select id="plan-manager" class="w-full bg-gray-700 text-white rounded border border-gray-600 p-2" required>
                            <option value="">–û–±–µ—Ä—ñ—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞</option>
                            ${managersData.map(mgr => `<option value="${mgr.id}" data-name="${mgr.name}">${mgr.name}</option>`).join('')}
                        </select>
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–ü–µ—Ä—ñ–æ–¥</label>
                        <input type="month" id="plan-period" class="w-full bg-gray-700 text-white rounded border border-gray-600 p-2" required>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–¢–∏–ø –ø–ª–∞–Ω—É</label>
                        <select id="plan-type" class="w-full bg-gray-700 text-white rounded border border-gray-600 p-2" required>
                            <option value="revenue">–ì—Ä–æ—à–æ–≤–∏–π</option>
                            <option value="quantity">–ö—ñ–ª—å–∫—ñ—Å–Ω–∏–π</option>
                            <option value="mixed">–ó–º—ñ—à–∞–Ω–∏–π</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–°—Ç–∞—Ç—É—Å</label>
                        <select id="plan-status" class="w-full bg-gray-700 text-white rounded border border-gray-600 p-2">
                            <option value="draft">–ß–µ—Ä–Ω–µ—Ç–∫–∞</option>
                            <option value="active">–ê–∫—Ç–∏–≤–Ω–∏–π</option>
                        </select>
                    </div>
                </div>
                
                <div>
                    <h3 class="text-lg font-bold text-white mb-2">–¶—ñ–ª—ñ –ø–ª–∞–Ω—É</h3>
                    <div id="plan-targets" class="space-y-3">
                        <div class="target-item bg-gray-700 p-4 rounded border">
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-3 mb-3">
                                <input type="text" placeholder="–ù–∞–∑–≤–∞ —Ü—ñ–ª—ñ" class="target-name bg-gray-600 text-white rounded border border-gray-500 p-2">
                                <select class="target-type bg-gray-600 text-white rounded border border-gray-500 p-2">
                                    <option value="revenue">–í–∏—Ä—É—á–∫–∞ (UAH)</option>
                                    <option value="quantity">–ö—ñ–ª—å–∫—ñ—Å—Ç—å (—à—Ç)</option>
                                </select>
                                <input type="number" placeholder="–¶—ñ–ª—å–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è" class="target-value bg-gray-600 text-white rounded border border-gray-500 p-2">
                            </div>
                            <textarea placeholder="–¢–æ–≤–∞—Ä–∏/–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Ä—è–¥–æ–∫, –∑–∞–ª–∏—à—Ç–µ –ø—É—Å—Ç–∏–º –¥–ª—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤)" 
                                      class="target-products w-full bg-gray-600 text-white rounded border border-gray-500 p-2" 
                                      rows="2"></textarea>
                        </div>
                    </div>
                    <button type="button" onclick="addPlanTarget()" class="mt-2 px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700">
                        + –î–æ–¥–∞—Ç–∏ —Ü—ñ–ª—å
                    </button>
                </div>
                
                <div class="flex justify-end gap-4 mt-6">
                    <button type="button" onclick="this.closest('.fixed').remove()" 
                            class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700">
                        –°–∫–∞—Å—É–≤–∞—Ç–∏
                    </button>
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                        –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞–Ω
                    </button>
                </div>
            </form>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
    document.getElementById('create-plan-form').onsubmit = function(e) {
        e.preventDefault();
        savePlan();
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    document.getElementById('plan-period').value = new Date().toISOString().slice(0, 7);
};

/**
 * –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å –∫ –ø–ª–∞–Ω—É
 */
window.addPlanTarget = function() {
    const targetsContainer = document.getElementById('plan-targets');
    const targetItem = document.createElement('div');
    targetItem.className = 'target-item bg-gray-700 p-4 rounded border';
    targetItem.innerHTML = `
        <div class="grid grid-cols-1 md:grid-cols-3 gap-3 mb-3">
            <input type="text" placeholder="–ù–∞–∑–≤–∞ —Ü—ñ–ª—ñ" class="target-name bg-gray-600 text-white rounded border border-gray-500 p-2">
            <select class="target-type bg-gray-600 text-white rounded border border-gray-500 p-2">
                <option value="revenue">–í–∏—Ä—É—á–∫–∞ (UAH)</option>
                <option value="quantity">–ö—ñ–ª—å–∫—ñ—Å—Ç—å (—à—Ç)</option>
            </select>
            <input type="number" placeholder="–¶—ñ–ª—å–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è" class="target-value bg-gray-600 text-white rounded border border-gray-500 p-2">
        </div>
        <textarea placeholder="–¢–æ–≤–∞—Ä–∏/–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Ä—è–¥–æ–∫, –∑–∞–ª–∏—à—Ç–µ –ø—É—Å—Ç–∏–º –¥–ª—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤)" 
                  class="target-products w-full bg-gray-600 text-white rounded border border-gray-500 p-2 mb-2" 
                  rows="2"></textarea>
        <button type="button" onclick="this.closest('.target-item').remove()" class="px-2 py-1 bg-red-600 text-white rounded hover:bg-red-700 text-sm">
            –í–∏–¥–∞–ª–∏—Ç–∏ —Ü—ñ–ª—å
        </button>
    `;
    targetsContainer.appendChild(targetItem);
};

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω
 */
async function savePlan() {
    try {
        const formData = {
            planName: document.getElementById('plan-name').value,
            managerId: document.getElementById('plan-manager').value,
            managerName: document.querySelector('#plan-manager option:checked')?.getAttribute('data-name') || '',
            period: document.getElementById('plan-period').value,
            type: document.getElementById('plan-type').value,
            status: document.getElementById('plan-status').value
        };
        
        const targets = Array.from(document.querySelectorAll('.target-item')).map((item, index) => ({
            id: `target-${Date.now()}-${index}`,
            name: item.querySelector('.target-name').value,
            type: item.querySelector('.target-type').value,
            target: parseFloat(item.querySelector('.target-value').value) || 0,
            products: item.querySelector('.target-products').value.split('\n').filter(p => p.trim()),
            current: 0,
            deadline: `${formData.period}-31`
        }));
        
        if (!formData.planName || !formData.managerId || targets.length === 0) {
            alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è —Ç–∞ –¥–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ü—ñ–ª—å');
            return;
        }
        
        const newPlan = {
            id: `plan-${Date.now()}`,
            ...formData,
            targets,
            createdAt: new Date().toISOString(),
            createdBy: window.state?.currentUserId || 'demo-user'
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω –≤ –¥–∞–Ω–Ω—ã–µ (–≤ –±—É–¥—É—â–µ–º - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Firebase)
        plansData.push(newPlan);
        
        alert('–ü–ª–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–æ!');
        document.querySelector('.fixed').remove();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (currentActiveTab === 'overview') {
            renderPlansOverview();
        } else {
            renderPlansDashboard();
        }
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—É:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É');
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞
 */
window.showPlanDetails = function(planId) {
    const plan = plansData.find(p => p.id === planId);
    if (!plan) return;
    
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60';
    modal.innerHTML = `
        <div class="bg-gray-800 rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-2xl font-bold text-white">–î–µ—Ç–∞–ª—ñ –ø–ª–∞–Ω—É: ${plan.planName}</h2>
                <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-white text-2xl">&times;</button>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div class="bg-blue-600 rounded-lg p-4">
                    <div class="text-lg font-bold text-white">${plan.managerName}</div>
                    <div class="text-sm text-blue-200">–ú–µ–Ω–µ–¥–∂–µ—Ä</div>
                </div>
                <div class="bg-green-600 rounded-lg p-4">
                    <div class="text-lg font-bold text-white">${plan.period}</div>
                    <div class="text-sm text-green-200">–ü–µ—Ä—ñ–æ–¥</div>
                </div>
                <div class="bg-purple-600 rounded-lg p-4">
                    <div class="text-lg font-bold text-white">${plan.targets.length}</div>
                    <div class="text-sm text-purple-200">–¶—ñ–ª–µ–π</div>
                </div>
                <div class="bg-orange-600 rounded-lg p-4">
                    <div class="text-lg font-bold text-white">${calculatePlanCompletion(plan)}%</div>
                    <div class="text-sm text-orange-200">–í–∏–∫–æ–Ω–∞–Ω–æ</div>
                </div>
            </div>
            
            <div class="space-y-4">
                <h3 class="text-lg font-bold text-white">–¶—ñ–ª—ñ –ø–ª–∞–Ω—É</h3>
                ${plan.targets.map(target => {
                    const completion = (target.current / target.target) * 100;
                    const forecast = calculateTargetForecast(target, plan.period);
                    return `
                        <div class="bg-gray-700 rounded-lg p-4">
                            <div class="flex justify-between items-start mb-3">
                                <div>
                                    <h4 class="font-bold text-white">${target.name}</h4>
                                    <div class="text-sm text-gray-400">${target.type === 'revenue' ? '–ì—Ä–æ—à–æ–≤–∞ —Ü—ñ–ª—å' : '–ö—ñ–ª—å–∫—ñ—Å–Ω–∞ —Ü—ñ–ª—å'}</div>
                                </div>
                                <div class="text-right">
                                    <div class="text-lg font-bold text-white">${completion.toFixed(1)}%</div>
                                    <div class="text-sm text-gray-400">–≤–∏–∫–æ–Ω–∞–Ω–æ</div>
                                </div>
                            </div>
                            
                            <div class="w-full bg-gray-600 rounded-full h-3 mb-3">
                                <div class="bg-gradient-to-r from-blue-500 to-green-500 h-3 rounded-full" style="width: ${Math.min(completion, 100)}%"></div>
                            </div>
                            
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div>
                                    <div class="text-sm text-gray-400">–ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</div>
                                    <div class="text-lg font-bold text-white">
                                        ${target.type === 'revenue' ? formatCurrency(target.current) : target.current}
                                    </div>
                                </div>
                                <div>
                                    <div class="text-sm text-gray-400">–¶—ñ–ª—å–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è</div>
                                    <div class="text-lg font-bold text-white">
                                        ${target.type === 'revenue' ? formatCurrency(target.target) : target.target}
                                    </div>
                                </div>
                                <div>
                                    <div class="text-sm text-gray-400">–ü—Ä–æ–≥–Ω–æ–∑</div>
                                    <div class="text-lg font-bold ${forecast >= target.target ? 'text-green-400' : 'text-red-400'}">
                                        ${target.type === 'revenue' ? formatCurrency(forecast) : forecast}
                                    </div>
                                </div>
                            </div>
                            
                            ${target.products.length > 0 ? `
                                <div class="mt-3 pt-3 border-t border-gray-600">
                                    <div class="text-sm text-gray-400 mb-1">–¢–æ–≤–∞—Ä–∏/–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:</div>
                                    <div class="text-sm text-gray-300">${target.products.join(', ')}</div>
                                </div>
                            ` : ''}
                        </div>
                    `;
                }).join('')}
            </div>
            
            <div class="flex justify-end gap-4 mt-6">
                <button onclick="this.closest('.fixed').remove()" 
                        class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700">
                    –ó–∞–∫—Ä–∏—Ç–∏
                </button>
                <button onclick="editPlan('${plan.id}'); this.closest('.fixed').remove();" 
                        class="px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700">
                    –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
};

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω
 */
window.editPlan = function(planId) {
    alert(`–§—É–Ω–∫—Ü—ñ—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É ${planId} –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö`);
};

/**
 * –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω
 */
window.activatePlan = function(planId) {
    const plan = plansData.find(p => p.id === planId);
    if (plan) {
        plan.status = 'active';
        renderPlansOverview();
        alert('–ü–ª–∞–Ω –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!');
    }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 */
window.refreshPlanFactData = function() {
    loadPlanFactData();
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function calculatePlanCompletion(plan) {
    if (!plan.targets.length) return 0;
    const avgCompletion = plan.targets.reduce((sum, target) => {
        return sum + Math.min((target.current / target.target) * 100, 100);
    }, 0) / plan.targets.length;
    return Math.round(avgCompletion);
}

function calculateTargetForecast(target, period) {
    // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–º–ø–∞
    const now = new Date();
    const [year, month] = period.split('-');
    const daysInMonth = new Date(parseInt(year), parseInt(month), 0).getDate();
    const currentDay = now.getDate();
    
    if (currentDay === 0) return target.current;
    const dailyRate = target.current / currentDay;
    return Math.round(dailyRate * daysInMonth);
}

function getAvgCompletion() {
    if (!plansData.length) return 0;
    const activePlans = plansData.filter(p => p.status === 'active');
    if (!activePlans.length) return 0;
    const totalCompletion = activePlans.reduce((sum, plan) => sum + calculatePlanCompletion(plan), 0);
    return Math.round(totalCompletion / activePlans.length);
}

function getTotalPlanRevenue() {
    return plansData.reduce((sum, plan) => {
        return sum + plan.targets.filter(t => t.type === 'revenue').reduce((s, t) => s + t.target, 0);
    }, 0);
}

function formatCurrency(amount) {
    return new Intl.NumberFormat('uk-UA', {
        style: 'currency',
        currency: 'UAH',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
    }).format(amount);
}