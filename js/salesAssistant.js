// salesAssistant.js
// –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–≤—É—Ö –≤–∫–ª–∞–¥–æ–∫: –ü–æ–º—ñ—á–Ω–∏–∫ –∏ –°–∏–≥–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è

import * as firebase from './firebase.js';
import { initDashboardPage } from './dashboard.js';
import { initFocusPage } from './focus.js';
import { loadClientManagerDirectory } from './main.js';
import { initDepartmentDashboard } from './departmentDashboard.js';
import { initSmartDayModule } from './smartDay.js';
import { initDebtsModule } from './debts.js';
import { initPlanFactModule } from './planFact.js';

export function initSalesAssistantPage(container) {
    container.innerHTML = `
        <div class="flex gap-2 mb-4 flex-wrap">
            <button id="assistantTabBtn" class="btn btn-primary">–ü–æ–º—ñ—á–Ω–∏–∫</button>
            <button id="signalizationTabBtn" class="btn btn-secondary">–°–∏–≥–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è</button>
            <button id="dashboardTabBtn" class="btn btn-secondary">–ì–æ–ª–æ–≤–Ω–∏–π –¥–∞—à–±–æ—Ä–¥</button>
            <button id="departmentDashboardTabBtn" class="btn btn-secondary">–î–∞—à–±–æ—Ä–¥ –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö</button>
            <button id="focusTabBtn" class="btn btn-secondary">–§–æ–∫—É—Å</button>
            <button id="smartDayTabBtn" class="btn btn-secondary">–°—Ç–≤–æ—Ä–∏ –º—ñ–π –¥–µ–Ω—å</button>
            <button id="debtsTabBtn" class="btn btn-secondary">–î–µ–±—ñ—Ç–æ—Ä–∫–∞</button>
            <button id="planFactTabBtn" class="btn btn-secondary">–ü–ª–∞–Ω-–§–∞–∫—Ç</button>
        </div>
        <div id="salesAssistantMain"></div>
        <div id="alerts-root" class="hidden"></div>
        <div id="dashboard-root" class="hidden"></div>
        <div id="department-dashboard-root" class="hidden"></div>
        <div id="focus-root" class="hidden"></div>
        <div id="smartday-root" class="hidden"></div>
        <div id="debts-root" class="hidden"></div>
        <div id="planfact-root" class="hidden"></div>
    `;

    const assistantTabBtn = container.querySelector('#assistantTabBtn');
    const signalizationTabBtn = container.querySelector('#signalizationTabBtn');
    const dashboardTabBtn = container.querySelector('#dashboardTabBtn');
    const departmentDashboardTabBtn = container.querySelector('#departmentDashboardTabBtn');
    const focusTabBtn = container.querySelector('#focusTabBtn');
    const smartDayTabBtn = container.querySelector('#smartDayTabBtn');
    const debtsTabBtn = container.querySelector('#debtsTabBtn');
    const planFactTabBtn = container.querySelector('#planFactTabBtn');
    
    const mainBlock = container.querySelector('#salesAssistantMain');
    const alertsRoot = container.querySelector('#alerts-root');
    const dashboardRoot = container.querySelector('#dashboard-root');
    const departmentDashboardRoot = container.querySelector('#department-dashboard-root');
    const focusRoot = container.querySelector('#focus-root');
    const smartDayRoot = container.querySelector('#smartday-root');
    const debtsRoot = container.querySelector('#debts-root');
    const planFactRoot = container.querySelector('#planfact-root');
    
    let alertsInited = false;
    let dashboardInited = false;
    let departmentDashboardInited = false;
    let focusInited = false;
    let smartDayInited = false;
    let debtsInited = false;
    let planFactInited = false;

    function setActiveTab(activeBtn) {
        const allBtns = [assistantTabBtn, signalizationTabBtn, dashboardTabBtn, departmentDashboardTabBtn, focusTabBtn, smartDayTabBtn, debtsTabBtn, planFactTabBtn];
        allBtns.forEach(btn => {
            btn.classList.remove('btn-primary');
            btn.classList.add('btn-secondary');
        });
        activeBtn.classList.add('btn-primary');
        activeBtn.classList.remove('btn-secondary');

        mainBlock.classList.add('hidden');
        alertsRoot.classList.add('hidden');
        dashboardRoot.classList.add('hidden');
        departmentDashboardRoot.classList.add('hidden');
        focusRoot.classList.add('hidden');
        smartDayRoot.classList.add('hidden');
        debtsRoot.classList.add('hidden');
        planFactRoot.classList.add('hidden');
    }

    function showAssistantTab() {
        setActiveTab(assistantTabBtn);
        mainBlock.classList.remove('hidden');
        renderSalesAssistantMain(mainBlock);
    }
    function showSignalizationTab() {
        setActiveTab(signalizationTabBtn);
        alertsRoot.classList.remove('hidden');
        if (!alertsInited && window.initAlertsModule) {
            window.initAlertsModule(alertsRoot);
            alertsInited = true;
        }
    }
    function showDashboardTab() {
        setActiveTab(dashboardTabBtn);
        dashboardRoot.classList.remove('hidden');
        if (!dashboardInited) {
            initDashboardPage(dashboardRoot);
            dashboardInited = true;
        }
    }
    function showDepartmentDashboardTab() {
        setActiveTab(departmentDashboardTabBtn);
        departmentDashboardRoot.classList.remove('hidden');
        if (!departmentDashboardInited) {
            initDepartmentDashboard(departmentDashboardRoot);
            departmentDashboardInited = true;
        }
    }
    function showFocusTab() {
        setActiveTab(focusTabBtn);
        focusRoot.classList.remove('hidden');
        if (!focusInited) {
            initFocusPage(focusRoot);
            focusInited = true;
        }
    }
    function showSmartDayTab() {
        setActiveTab(smartDayTabBtn);
        smartDayRoot.classList.remove('hidden');
        if (!smartDayInited && window.initSmartDayModule) {
            initSmartDayModule(smartDayRoot);
            smartDayInited = true;
        }
    }
    function showDebtsTab() {
        setActiveTab(debtsTabBtn);
        debtsRoot.classList.remove('hidden');
        if (!debtsInited) {
            initDebtsModule(debtsRoot);
            debtsInited = true;
        }
    }
    function showPlanFactTab() {
        setActiveTab(planFactTabBtn);
        planFactRoot.classList.remove('hidden');
        if (!planFactInited) {
            initPlanFactModule(planFactRoot);
            planFactInited = true;
        }
    }

    assistantTabBtn.onclick = showAssistantTab;
    signalizationTabBtn.onclick = showSignalizationTab;
    dashboardTabBtn.onclick = showDashboardTab;
    departmentDashboardTabBtn.onclick = showDepartmentDashboardTab;
    focusTabBtn.onclick = showFocusTab;
    smartDayTabBtn.onclick = showSmartDayTab;
    debtsTabBtn.onclick = showDebtsTab;
    planFactTabBtn.onclick = showPlanFactTab;
    showAssistantTab(); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

// --- –î–æ–¥–∞—é —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ ---
async function loadEmployees(companyId) {
    const employeesRef = firebase.collection(firebase.db, 'companies', companyId, 'employees');
    const snapshot = await firebase.getDocs(employeesRef);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })).filter(emp => emp.active !== false);
}

function renderSalesAssistantMain(mainBlock) {
    mainBlock.innerHTML = `
        <div class="max-w-7xl mx-auto min-h-screen pb-10">
            <header class="mb-8 flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div>
                    <h1 class="text-3xl md:text-4xl font-bold">–ü–æ–º—ñ—á–Ω–∏–∫ –ø—Ä–æ–¥–∞–∂—É</h1>
                    <p class="mt-2">–ê–Ω–∞–ª—ñ–∑ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –ø—Ä–æ–¥–∞–∂–∞—Ö.</p>
                </div>
            </header>
            <div id="status-container" class="text-center p-6">
                <div id="loader" class="loader mx-auto"></div>
                <p id="status-message" class="text-lg mt-4 font-medium">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...</p>
            </div>
            <div id="analysis-section" class="p-6 mb-8 hidden">
                <h2 class="text-xl font-bold mb-4">–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª, –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–∞ –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É</h2>
                <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                    <div>
                        <label for="department-filter" class="block text-sm font-medium mb-1">–í—ñ–¥–¥—ñ–ª</label>
                        <select id="department-filter" class="dark-input"></select>
                    </div>
                    <div>
                        <label for="manager-filter" class="block text-sm font-medium mb-1">–ú–µ–Ω–µ–¥–∂–µ—Ä</label>
                        <select id="manager-filter" class="dark-input"></select>
                    </div>
                    <div>
                        <label for="client-search" class="block text-sm font-medium mb-1">–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞</label>
                        <input type="text" id="client-search" class="dark-input" placeholder="–ü–æ—á–Ω—ñ—Ç—å –≤–≤–æ–¥–∏—Ç–∏ —ñ–º'—è..." disabled>
                    </div>
                    <div>
                        <label for="client-filter" class="block text-sm font-medium mb-1">–ö–ª—ñ—î–Ω—Ç</label>
                        <select id="client-filter" class="dark-input" disabled></select>
                    </div>
                </div>
            </div>
            <div id="results-section" class="hidden">
                <div id="client-kpi" class="mb-8"></div>
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    <div>
                        <h3 class="text-lg font-bold mb-4">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ —Å—Ñ–µ—Ä—ñ (<span id="client-sphere-name"></span>)</h3>
                        <ul id="segment-recs" class="list-disc list-inside space-y-2"></ul>
                    </div>
                    <div>
                        <h3 class="text-lg font-bold mb-4">üöÄ –•—ñ—Ç–∏ –ø—Ä–æ–¥–∞–∂ –≤ —Ü—ñ–π —Å—Ñ–µ—Ä—ñ –¥–ª—è –í–∞—Å</h3>
                        <ul id="top-sales-recs" class="list-disc list-inside space-y-2"></ul>
                    </div>
                </div>
            </div>
        </div>
    `;

    // --- –î–æ–¥–∞—é –Ω–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ ---
    let masterData = [];
    let clientLinks = {};
    let uniqueClientsByManager = {};
    let employees = [];
    let employeesById = {};
    let managers = [];
    let departments = [];
    let userAccess = {
        userId: null,
        employeeId: null,
        employee: null,
        role: null,
        departmentId: null,
        isAdmin: false
    };
    let allMembers = [];

    const statusContainer = mainBlock.querySelector('#status-container');
    const loader = mainBlock.querySelector('#loader');
    const statusMessage = mainBlock.querySelector('#status-message');
    const analysisSection = mainBlock.querySelector('#analysis-section');
    const departmentFilter = mainBlock.querySelector('#department-filter');
    const managerFilter = mainBlock.querySelector('#manager-filter');
    const clientSearch = mainBlock.querySelector('#client-search');
    const clientFilter = mainBlock.querySelector('#client-filter');
    const resultsSection = mainBlock.querySelector('#results-section');
    const segmentRecsList = mainBlock.querySelector('#segment-recs');
    const topSalesRecsList = mainBlock.querySelector('#top-sales-recs');
    const clientKpiContainer = mainBlock.querySelector('#client-kpi');
    const clientSphereName = mainBlock.querySelector('#client-sphere-name');

    async function loadAndProcessData() {
        try {
            const companyId = window.state?.currentCompanyId;
            if (!companyId) throw new Error('–ö–æ–º–ø–∞–Ω—ñ—è –Ω–µ –≤–∏–±—Ä–∞–Ω–∞!');
            // --- –í–∏—Ç—è–≥—É—î–º–æ userId –∑ window.state –∞–±–æ firebase.auth.currentUser.uid ---
            let userId = window.state?.currentUserId;
            if (!userId && firebase.auth && firebase.auth.currentUser) {
                userId = firebase.auth.currentUser.uid;
            }
            userAccess.userId = userId;
            // --- –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ members (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ) ---
            const membersRef = firebase.collection(firebase.db, 'companies', companyId, 'members');
            const membersSnap = await firebase.getDocs(membersRef);
            allMembers = membersSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            // --- –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É members ---
            const currentMember = allMembers.find(m => m.userId === userId || m.email === window.state?.currentUserEmail);
            if (currentMember && currentMember.employeeId) {
                userAccess.employeeId = currentMember.employeeId;
            }
            // --- –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
            if (currentMember) {
                if (currentMember.role) {
                    userAccess.role = currentMember.role.toLowerCase();
                } else if (currentMember.roleId && window.state?.availableRoles) {
                    const roleObj = window.state.availableRoles.find(r => r.id === currentMember.roleId);
                    userAccess.role = (roleObj?.name || '').toLowerCase();
                } else {
                    userAccess.role = '';
                }
            }
            const [dataRes, dataJulyRes, refRes, employeesList] = await Promise.all([
                fetch('–º–æ–¥—É–ª—å –ø–æ–º—ñ—á–Ω–∏–∫ –ø—Ä–æ–¥–∞–∂—É/data.json'),
                fetch('https://fastapi.lookfort.com/nomenclature.analysis'),
                fetch('https://fastapi.lookfort.com/nomenclature.analysis?mode=company_url'),
                loadEmployees(companyId)
            ]);
            const data = await dataRes.json();
            const dataJuly = await dataJulyRes.json();
            masterData = data.concat(dataJuly);
            const refData = await refRes.json();
            clientLinks = Object.fromEntries(refData.map(item => [item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'], item['–ø–æ—Å–∏–ª–∞–Ω–Ω—è']]));
            employees = employeesList;
            employees.forEach(emp => {
                employeesById[emp.id] = emp;
            });
            managers = employees.filter(emp => !emp.role || emp.role.toLowerCase().includes('–º–µ–Ω–µ–¥–∂'));
            // --- –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –≤—ñ–¥–¥—ñ–ª—ñ–≤ —è–∫ –æ–±'—î–∫—Ç—ñ–≤ {id, name} ---
            const depMap = {};
            employees.forEach(emp => {
                if (emp.department) {
                    if (typeof emp.department === 'object' && emp.department.id && emp.department.name) {
                        depMap[emp.department.id] = emp.department.name;
                    } else if (typeof emp.department === 'string') {
                        if (emp.departmentName) {
                            depMap[emp.department] = emp.departmentName;
                        } else {
                            depMap[emp.department] = emp.department;
                        }
                    }
                }
            });
            departments = Object.entries(depMap).map(([id, name]) => ({ id, name })).sort((a, b) => a.name.localeCompare(b.name));
            // --- –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–æ—Å—Ç—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
            if (userAccess.employeeId && employeesById[userAccess.employeeId]) {
                userAccess.employee = employeesById[userAccess.employeeId];
                // –í–∏–∑–Ω–∞—á–∞—î–º–æ isAdmin (–º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π)
                userAccess.isAdmin = userAccess.role.includes('–∞–¥–º—ñ–Ω') || userAccess.role.includes('owner') || userAccess.role.includes('–≤–ª–∞—Å–Ω–∏–∫');
                // --- –î–æ–¥–∞—é –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è departmentId –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ---
                if (!userAccess.departmentId && userAccess.employee && userAccess.employee.department) {
                    if (typeof userAccess.employee.department === 'object' && userAccess.employee.department.id) {
                        userAccess.departmentId = userAccess.employee.department.id;
                    } else if (typeof userAccess.employee.department === 'string') {
                        userAccess.departmentId = userAccess.employee.department;
                    }
                }
            }
            statusContainer.classList.add('hidden');
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ debts –∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ debts
            const currentPage = document.querySelector('.page.active')?.id;
            const isDebtsContext = currentPage === 'debts-page' || 
                                 document.querySelector('#debts-filters-container') !== null ||
                                 window.location.hash.includes('debts');
            
            console.log('[salesAssistant] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', { currentPage, isDebtsContext });
            
            if (!isDebtsContext) {
                populateDepartmentFilter();
                populateManagerFilter();
            } else {
                console.log('[salesAssistant] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º populateManagerFilter - –æ–±–Ω–∞—Ä—É–∂–µ–Ω debts –∫–æ–Ω—Ç–µ–∫—Å—Ç');
            }
            analysisSection.classList.remove('hidden');

            // --- –î–æ–¥–∞—é –ø—ñ–¥—Ç—Ä–∏–º–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞ ---
            if (window.state && window.state.preselectClientCode) {
                const clientCode = window.state.preselectClientCode;
                const clientSales = masterData.filter(item => item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] == clientCode);
                if (clientSales.length) {
                    const managerName = clientSales[0]['–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä'];
                    const manager = managers.find(m => m.name === managerName);
                    if (manager) {
                        // –í–∏—Å—Ç–∞–≤–ª—è—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
                        departmentFilter.value = manager.department?.id || manager.department || '';
                        departmentFilter.dispatchEvent(new Event('change'));
                        setTimeout(() => {
                            managerFilter.value = manager.id;
                            managerFilter.dispatchEvent(new Event('change'));
                            setTimeout(() => {
                                clientFilter.value = clientCode;
                                clientFilter.dispatchEvent(new Event('change'));
                            }, 200);
                        }, 200);
                    }
                }
                delete window.state.preselectClientCode;
            }
        } catch (error) {
            statusMessage.style.color = 'red';
            statusMessage.textContent = `–ü–æ–º–∏–ª–∫–∞: ${error.message}`;
            loader.classList.add('hidden');
        }
    }

    // --- –ù–û–í–ê —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞ –≤—ñ–¥–¥—ñ–ª—ñ–≤ ---
    function populateDepartmentFilter() {
        departmentFilter.innerHTML = '<option value="">–í—Å—ñ –≤—ñ–¥–¥—ñ–ª–∏</option>';
        let visibleDepartments = departments;
        // --- –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø—É: —è–∫—â–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∞–±–æ –∫–µ—Ä—ñ–≤–Ω–∏–∫, —Ç—ñ–ª—å–∫–∏ —Å–≤—ñ–π –≤—ñ–¥–¥—ñ–ª ---
        if (!userAccess.isAdmin && userAccess.departmentId) {
            if (userAccess.role && (userAccess.role.includes('–º–µ–Ω–µ–¥–∂') || userAccess.role.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫'))) {
                visibleDepartments = departments.filter(dep => dep.id === userAccess.departmentId);
            }
        }
        visibleDepartments.forEach(dep => {
            const option = new Option(dep.name, dep.id);
            departmentFilter.add(option);
        });
        departmentFilter.disabled = false;
        // –Ø–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –æ–¥–∏–Ω –≤—ñ–¥–¥—ñ–ª ‚Äî –≤–∏–±–∏—Ä–∞—î–º–æ –π–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        if (visibleDepartments.length === 1) {
            departmentFilter.value = visibleDepartments[0].id;
        }
    }

    // --- –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ ---
    function populateManagerFilter() {
        const selectedDepartmentId = departmentFilter.value;
        managerFilter.innerHTML = '<option value="">–û–±–µ—Ä—ñ—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞...</option>';
        let filteredManagers = managers;
        // --- –î–æ–¥–∞—é –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ---
        console.log('[populateManagerFilter] userAccess:', userAccess);
        console.log('[populateManagerFilter] managers:', managers);
        // --- –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø—É: —è–∫—â–æ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî —Ç—ñ–ª—å–∫–∏ –≤—ñ–Ω, —è–∫—â–æ –∫–µ—Ä—ñ–≤–Ω–∏–∫ ‚Äî –≤—Å—ñ –∑ –≤—ñ–¥–¥—ñ–ª—É, —è–∫—â–æ –∞–¥–º—ñ–Ω ‚Äî –≤—Å—ñ ---
        if (!userAccess.isAdmin && userAccess.employeeId) {
            if (userAccess.role && userAccess.role.includes('–º–µ–Ω–µ–¥–∂')) {
                // –¢—ñ–ª—å–∫–∏ —Å–∞–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
                filteredManagers = managers.filter(emp => emp.id === userAccess.employeeId);
                console.log('[populateManagerFilter] –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞—á–∏—Ç—å —Ç—ñ–ª—å–∫–∏ —Å–µ–±–µ:', filteredManagers);
            } else if (userAccess.role && userAccess.role.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫')) {
                // –í—Å—ñ –∑ –π–æ–≥–æ –≤—ñ–¥–¥—ñ–ª—É
                filteredManagers = managers.filter(emp => {
                    if (!emp.department) return false;
                    if (typeof emp.department === 'object' && emp.department.id) {
                        return emp.department.id === userAccess.departmentId;
                    } else if (typeof emp.department === 'string') {
                        return emp.department === userAccess.departmentId;
                    }
                    return false;
                });
                console.log('[populateManagerFilter] –ö–µ—Ä—ñ–≤–Ω–∏–∫ –±–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –≤—ñ–¥–¥—ñ–ª—É:', filteredManagers);
            } else {
                // fallback: –≤—Å—ñ
                console.log('[populateManagerFilter] –Ü–Ω—à–∞ —Ä–æ–ª—å, –≤—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏');
            }
        } else if (selectedDepartmentId) {
            filteredManagers = managers.filter(emp => {
                if (!emp.department) return false;
                if (typeof emp.department === 'object' && emp.department.id) {
                    return emp.department.id === selectedDepartmentId;
                } else if (typeof emp.department === 'string') {
                    return emp.department === selectedDepartmentId;
                }
                return false;
            });
            console.log('[populateManagerFilter] –§—ñ–ª—å—Ç—Ä –ø–æ –≤—ñ–¥–¥—ñ–ª—É:', filteredManagers);
        }
        filteredManagers.forEach(emp => {
            const option = new Option(emp.name, emp.id);
            managerFilter.add(option);
        });
        managerFilter.disabled = false;
        clientSearch.disabled = true;
        clientFilter.disabled = true;
        clientFilter.innerHTML = '<option value="">–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞...</option>';
        // –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –≤—Ö–æ–¥–∏—Ç—å —É —Ü–µ–π –≤—ñ–¥–¥—ñ–ª ‚Äî —Å–∫–∏–¥–∞—î–º–æ –≤–∏–±—ñ—Ä
        if (managerFilter.value && !filteredManagers.some(emp => emp.id === managerFilter.value)) {
            managerFilter.value = '';
        }
    }

    // --- –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—É ---
    async function populateClientFilter(selectedManagerId, searchTerm = '') {
        const emp = employeesById[selectedManagerId];
        if (!emp) return;
        // --- –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ ---
        const clientManagerDirectory = await loadClientManagerDirectory();
        // --- –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É —Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É ---
        const clients = Object.entries(clientManagerDirectory)
            .filter(([code, info]) => info.manager && emp.name && info.manager.trim() === emp.name.trim())
            .map(([code, info]) => ({
                name: masterData.find(item => item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] === code)?.['–ö–ª–∏–µ–Ω—Ç'] || code,
                code,
                sphere: masterData.find(item => item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] === code)?.['–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'] || '',
            }));
        uniqueClientsByManager[selectedManagerId] = Array.from(new Map(clients.map(c => [c.code, c])).values()).sort((a, b) => a.name.localeCompare(b.name));
        const filteredClients = uniqueClientsByManager[selectedManagerId].filter(client =>
            client.name.toLowerCase().includes(searchTerm.toLowerCase())
        );
        clientFilter.innerHTML = '<option value="">–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞...</option>';
        filteredClients.forEach(client => {
            const optionText = `${client.name} (${client.sphere || '–°—Ñ–µ—Ä–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞'})`;
            const option = new Option(optionText, client.code);
            clientFilter.add(option);
        });
        clientFilter.disabled = false;
        clientSearch.disabled = false;
    }

    // --- –î–æ–¥–∞—é –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è departmentFilter ---
    departmentFilter.onchange = () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ debts –∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ debts
        const currentPage = document.querySelector('.page.active')?.id;
        const isDebtsContext = currentPage === 'debts-page' || 
                             document.querySelector('#debts-filters-container') !== null ||
                             window.location.hash.includes('debts');
        
        console.log('[salesAssistant] departmentFilter.onchange –ø—Ä–æ–≤–µ—Ä–∫–∞:', { currentPage, isDebtsContext });
        
        if (!isDebtsContext) {
            populateManagerFilter();
        } else {
            console.log('[salesAssistant] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º populateManagerFilter –ø—Ä–∏ —Å–º–µ–Ω–µ –æ—Ç–¥–µ–ª–∞ - debts –∫–æ–Ω—Ç–µ–∫—Å—Ç');
        }
        // –°–∫–∏–¥–∞—î–º–æ –≤–∏–±—ñ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ñ –∫–ª—ñ—î–Ω—Ç–∞
        managerFilter.value = '';
        clientFilter.value = '';
        clientSearch.value = '';
        clientSearch.disabled = true;
        clientFilter.disabled = true;
        resultsSection.classList.add('hidden');
    };

    function displayResults(segmentRecs, topSalesRecs, clientSales) {
        // --- KPI, –ø—Ä–æ–≥–Ω–æ–∑, —Å–µ–≥–º–µ–Ω—Ç, –¥–∏–Ω–∞–º–∏–∫–∞, –≤—Å–µ –∫–Ω–æ–ø–∫–∏, –º–æ–¥–∞–ª–∫–∏ ---
        if (!clientKpiContainer || !segmentRecsList || !topSalesRecsList) return;
        const totalRevenue = clientSales.reduce((sum, s) => {
            const revenue = typeof s['–í—ã—Ä—É—á–∫–∞'] === 'string' ? parseFloat(s['–í—ã—Ä—É—á–∫–∞'].replace(/\s/g, '').replace(',', '.')) : (s['–í—ã—Ä—É—á–∫–∞'] || 0);
            return sum + (revenue || 0);
        }, 0);
        const clientInfo = clientSales[0];
        const clientLink = clientLinks[clientInfo['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥']];
        // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        const productStats = {};
        let allDates = [];
        clientSales.forEach(sale => {
            const product = sale['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'];
            const revenue = typeof sale['–í—ã—Ä—É—á–∫–∞'] === 'string' ? parseFloat(sale['–í—ã—Ä—É—á–∫–∞'].replace(/\s/g, '').replace(',', '.')) : (sale['–í—ã—Ä—É—á–∫–∞'] || 0);
            const date = new Date(sale['–î–∞—Ç–∞']);
            allDates.push(date);
            if (!productStats[product]) productStats[product] = { sum: 0, count: 0, lastDate: date };
            productStats[product].sum += revenue;
            productStats[product].count += 1;
            if (date > productStats[product].lastDate) productStats[product].lastDate = date;
        });
        const productList = Object.entries(productStats)
            .map(([name, stat]) => ({ name, sum: stat.sum, count: stat.count, lastDate: stat.lastDate, share: stat.sum / totalRevenue }))
            .sort((a, b) => b.sum - a.sum);
        const avgCheck = clientSales.length > 0 ? totalRevenue / clientSales.length : 0;
        const maxDate = allDates.length ? new Date(Math.max(...allDates.map(d => d.getTime()))) : new Date();
        const monthAgo = new Date(maxDate); monthAgo.setMonth(monthAgo.getMonth() - 1);
        const stoppedProducts = productList.filter(p => p.lastDate < monthAgo);
        // –ü—Ä–æ–≥–Ω–æ–∑
        let forecastDate = '', forecastSum = avgCheck, avgIntervalDays = null;
        if (allDates.length > 1) {
            const uniqueDays = Array.from(new Set(allDates.map(d => d.toISOString().slice(0, 10)))).map(s => new Date(s)).sort((a, b) => a - b);
            if (uniqueDays.length > 1) {
                let sum = 0;
                for (let i = 1; i < uniqueDays.length; ++i) sum += (uniqueDays[i] - uniqueDays[i - 1]);
                avgIntervalDays = sum / (uniqueDays.length - 1) / (1000 * 60 * 60 * 24);
                const lastPurchase = uniqueDays[uniqueDays.length - 1];
                const nextDate = new Date(lastPurchase.getTime() + avgIntervalDays * 24 * 60 * 60 * 1000);
                forecastDate = nextDate.toLocaleDateString('uk-UA');
            } else {
                const lastPurchase = uniqueDays[0];
                const nextDate = new Date(lastPurchase.getTime() + 30 * 24 * 60 * 60 * 1000);
                forecastDate = nextDate.toLocaleDateString('uk-UA');
                avgIntervalDays = 30;
            }
        } else if (allDates.length === 1) {
            const lastPurchase = allDates[0];
            const nextDate = new Date(lastPurchase.getTime() + 30 * 24 * 60 * 60 * 1000);
            forecastDate = nextDate.toLocaleDateString('uk-UA');
            avgIntervalDays = 30;
        }
        // –°–µ–≥–º–µ–Ω—Ç
        let segment = '–ù–æ–≤–∏–π';
        if (clientSales.length > 10 && totalRevenue > 100000) segment = 'VIP';
        else if (clientSales.length > 5 && totalRevenue > 30000) segment = '–ê–∫—Ç–∏–≤–Ω–∏–π';
        else if (stoppedProducts.length > 0) segment = '–ó–Ω–∏–∂—É—î—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å';
        if (stoppedProducts.length === productList.length && productList.length > 0) segment = '–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –≤—Ç—Ä–∞—á–∞—î—Ç—å—Å—è';
        // KPI-–±–ª–æ–∫, –ø—Ä–æ–≥–Ω–æ–∑, —Å–µ–≥–º–µ–Ω—Ç, –∫–Ω–æ–ø–∫–∏
        const forecastDateObj = forecastDate ? new Date(forecastDate.split('.').reverse().join('-')) : null;
        const isForecastOverdue = forecastDateObj && forecastDateObj < new Date();
        // –ö–∞–ª–µ–Ω–¥–∞—Ä –¥–∏–Ω–∞–º–∏–∫–∏
        let calendarMap = {}, calendarSumMap = {};
        const daysByMonth = {};
        clientSales.forEach(sale => {
            const date = new Date(sale['–î–∞—Ç–∞']);
            const ym = date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0');
            const day = sale['–î–∞—Ç–∞'].slice(0, 10);
            if (!calendarMap[ym]) calendarMap[ym] = 0;
            if (!calendarSumMap[ym]) calendarSumMap[ym] = 0;
            if (!daysByMonth[ym]) daysByMonth[ym] = new Set();
            daysByMonth[ym].add(day);
            const revenue = typeof sale['–í—ã—Ä—É—á–∫–∞'] === 'string' ? parseFloat(sale['–í—ã—Ä—É—á–∫–∞'].replace(/\s/g, '').replace(',', '.')) : (sale['–í—ã—Ä—É—á–∫–∞'] || 0);
            calendarSumMap[ym] += revenue;
        });
        // –ü—ñ—Å–ª—è –∑–±–æ—Ä—É ‚Äî —Ä–∞—Ö—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –¥–Ω—ñ
        Object.keys(daysByMonth).forEach(ym => {
            calendarMap[ym] = daysByMonth[ym].size;
        });
        let monthsSorted = Object.keys(calendarMap).sort();
        let prevCount = null, prevSum = null;
        let calendarTable = `<table class="min-w-full text-sm text-left"><thead><tr><th class="px-2 py-1">–ú—ñ—Å—è—Ü—å</th><th class="px-2 py-1">–ö—ñ–ª—å–∫—ñ—Å—Ç—å</th><th class="px-2 py-1">–î–∏–Ω–∞–º—ñ–∫–∞</th><th class="px-2 py-1">–°—É–º–∞</th><th class="px-2 py-1">–î–∏–Ω–∞–º—ñ–∫–∞</th></tr></thead><tbody>`;
        monthsSorted.forEach(m => {
            let trendCount = '-', trendSum = '-';
            if (prevCount !== null) {
                if (calendarMap[m] > prevCount) trendCount = '<span style="color:green">‚ñ≤</span>';
                else if (calendarMap[m] < prevCount) trendCount = '<span style="color:red">‚ñº</span>';
                else trendCount = '<span style="color:gray">‚óè</span>';
            }
            if (prevSum !== null) {
                if (calendarSumMap[m] > prevSum) trendSum = '<span style="color:green">‚ñ≤</span>';
                else if (calendarSumMap[m] < prevSum) trendSum = '<span style="color:red">‚ñº</span>';
                else trendSum = '<span style="color:gray">‚óè</span>';
            }
            calendarTable += `<tr><td class="px-2 py-1">${m}</td><td class="px-2 py-1">${calendarMap[m]}</td><td class="px-2 py-1">${trendCount}</td><td class="px-2 py-1">${calendarSumMap[m].toFixed(2)}</td><td class="px-2 py-1">${trendSum}</td></tr>`;
            prevCount = calendarMap[m]; prevSum = calendarSumMap[m];
        });
        calendarTable += '</tbody></table>';
        // –ö–Ω–æ–ø–∫–∏ –∏ –º–æ–¥–∞–ª–∫–∏
        let buttonsRow = `<div class="mt-6 flex flex-wrap gap-4 justify-center items-center">`;
        if (clientLink) buttonsRow += `<a href="${clientLink}" target="_blank" class="inline-block px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition">–ü–µ—Ä–µ–π—Ç–∏ –≤ CRM</a>`;
        buttonsRow += `<button id="show-missedModal" class="px-4 py-2 bg-orange-600 text-white rounded hover:bg-orange-700 transition">–£–ø—É—â–µ–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ</button>`;
        buttonsRow += `<button id="show-similarModal" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition">–©–æ –±–µ—Ä—É—Ç—å —Å—Ö–æ–∂—ñ –∫–ª—ñ—î–Ω—Ç–∏</button>`;
        buttonsRow += `<button id="show-togetherModal" class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition">–¢–æ–≤–∞—Ä–∏, —è–∫—ñ –∫—É–ø—É—é—Ç—å —Ä–∞–∑–æ–º</button>`;
        buttonsRow += `<button id="show-calendarModal" class="px-4 py-2 bg-cyan-600 text-white rounded hover:bg-cyan-700 transition">–ö–∞–ª–µ–Ω–¥–∞—Ä –ø–æ–∫—É–ø–æ–∫</button>`;
        // --- –ù–û–í–ê –ö–ù–û–ü–ö–ê ---
        buttonsRow += `<button id="show-groupCoverageModal" class="px-4 py-2 bg-pink-600 text-white rounded hover:bg-pink-700 transition">–ü–æ–∫—Ä–∏—Ç—Ç—è –≥—Ä—É–ø —Ç–æ–≤–∞—Ä—ñ–≤</button>`;
        buttonsRow += `</div>`;
        // --- –ú–æ–¥–∞–ª–∫–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ scoped, –±–µ–∑ window) ---
        // –£–ø—É—â–µ–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ
        const missedModalId = 'missedModal';
        let missedProductsTable = `<div class="overflow-x-auto"><table class="min-w-full text-sm text-left"><thead><tr><th class="px-2 py-1">–¢–æ–≤–∞—Ä</th><th class="px-2 py-1">–û—Å—Ç–∞–Ω–Ω—è –ø–æ–∫—É–ø–∫–∞</th><th class="px-2 py-1">–°—É–º–∞</th></tr></thead><tbody>`;
        missedProductsTable += stoppedProducts.map(p => `<tr><td class="px-2 py-1">${p.name}</td><td class="px-2 py-1">${p.lastDate.toLocaleDateString('uk-UA')}</td><td class="px-2 py-1">${p.sum.toFixed(2)}</td></tr>`).join('') + '</tbody></table></div>';
        let missedModalHtml = `<div id="${missedModalId}" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40 hidden"><div class="bg-gray-900 rounded-lg shadow-lg max-w-xl w-full p-6 relative max-h-[60vh] flex flex-col"><button id="close-${missedModalId}" class="absolute top-2 right-2 text-gray-400 hover:text-gray-200 text-2xl">&times;</button><h3 class="text-lg font-bold mb-4 text-red-400">–¢–æ–≤–∞—Ä–∏, —è–∫—ñ –∫–ª—ñ—î–Ω—Ç –ø–µ—Ä–µ—Å—Ç–∞–≤ –±—Ä–∞—Ç–∏ (–Ω–µ–º–∞—î –ø—Ä–æ–¥–∞–∂—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å)</h3><div class="overflow-y-auto" style="max-height: 40vh;">${missedProductsTable}</div></div></div>`;
        // –°—Ö–æ–∂—ñ –∫–ª—ñ—î–Ω—Ç–∏
        const similarModalId = 'similarModal';
        const clientProductsSet = new Set(clientSales.map(item => item['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞']));
        const clientSphere = clientInfo['–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'];
        const sphereClients = masterData.filter(item => item['–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'] === clientSphere && item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] !== clientInfo['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥']);
        const clientsByCode = {};
        sphereClients.forEach(item => {
            if (!clientsByCode[item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥']]) clientsByCode[item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥']] = new Set();
            clientsByCode[item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥']].add(item['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞']);
        });
        let similarClients = [];
        for (let code in clientsByCode) {
            const theirSet = clientsByCode[code];
            const intersection = new Set([...theirSet].filter(x => clientProductsSet.has(x)));
            if (intersection.size >= Math.max(1, Math.floor(clientProductsSet.size * 0.5))) {
                similarClients.push({ code, products: theirSet });
            }
        }
        let similarProducts = new Set();
        similarClients.forEach(cl => { cl.products.forEach(p => { if (!clientProductsSet.has(p)) similarProducts.add(p); }); });
        const similarProductsArr = [...similarProducts];
        const top10 = similarProductsArr.slice(0, 10);
        const top20 = similarProductsArr.slice(0, 20);
        const top50 = similarProductsArr.slice(0, 50);
        let similarModalHtml = `<div id="${similarModalId}" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40 hidden"><div class="bg-gray-900 rounded-lg shadow-lg max-w-xl w-full p-6 relative max-h-[70vh] flex flex-col"><button id="close-${similarModalId}" class="absolute top-2 right-2 text-gray-400 hover:text-gray-200 text-2xl">&times;</button><h3 class="text-lg font-bold mb-4">–©–æ –±–µ—Ä—É—Ç—å —Å—Ö–æ–∂—ñ –∫–ª—ñ—î–Ω—Ç–∏</h3><div class="mb-2 text-sm text-gray-400">–ü–æ–∫–∞–∑–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏, —è–∫—ñ –∫—É–ø—É—é—Ç—å –∫–ª—ñ—î–Ω—Ç–∏ –∑ —Ç—ñ—î—ó –∂ —Å—Ñ–µ—Ä–∏, —É —è–∫–∏—Ö —Å–ø—ñ–≤–ø–∞–¥–∞—î —Ö–æ—á–∞ –± 50% —Ç–æ–≤–∞—Ä—ñ–≤ –∑ —Ü–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º, –∞ —Ü–µ–π –∫–ª—ñ—î–Ω—Ç —ó—Ö –Ω–µ –∫—É–ø—É–≤–∞–≤.</div><div><button type='button' class='font-bold text-blue-400 underline mb-1' onclick="this.nextElementSibling.classList.toggle('hidden')">–¢–æ–ø-10</button><div class='' style=''><ul class="list-disc list-inside text-gray-200">${top10.length > 0 ? top10.map(p => `<li>${p}</li>`).join('') : '<li>–ù–µ–º–∞—î —Ç–∞–∫–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.</li>'}</ul></div><button type='button' class='font-bold text-blue-400 underline mb-1 mt-2' onclick="this.nextElementSibling.classList.toggle('hidden')">–¢–æ–ø-20</button><div class='hidden'><ul class="list-disc list-inside text-gray-200">${top20.length > 10 ? top20.slice(10).map(p => `<li>${p}</li>`).join('') : '<li>–ù–µ–º–∞—î —Ç–∞–∫–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.</li>'}</ul></div><button type='button' class='font-bold text-blue-400 underline mb-1 mt-2' onclick="this.nextElementSibling.classList.toggle('hidden')">–¢–æ–ø-50</button><div class='hidden'><ul class="list-disc list-inside text-gray-200">${top50.length > 20 ? top50.slice(20).map(p => `<li>${p}</li>`).join('') : '<li>–ù–µ–º–∞—î —Ç–∞–∫–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.</li>'}</ul></div></div></div></div>`;
        // –¢–æ–≤–∞—Ä–∏ —Ä–∞–∑–æ–º
        const togetherModalId = 'togetherModal';
        const salesByClientDate = {};
        masterData.forEach(sale => {
            const key = sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] + '|' + sale['–î–∞—Ç–∞'];
            if (!salesByClientDate[key]) salesByClientDate[key] = [];
            salesByClientDate[key].push(sale['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞']);
        });
        let togetherHtml = '', idx = 0;
        clientProductsSet.forEach(product => {
            const togetherCount = {};
            for (const key in salesByClientDate) {
                if (key.startsWith(clientInfo['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] + '|')) continue;
                const products = salesByClientDate[key];
                if (products.includes(product)) {
                    products.forEach(p => { if (p !== product && !clientProductsSet.has(p)) togetherCount[p] = (togetherCount[p] || 0) + 1; });
                }
            }
            const togetherSorted = Object.entries(togetherCount).sort((a, b) => b[1] - a[1]);
            if (togetherSorted.length > 0) {
                idx++;
                const accId = `acc-together-${idx}`;
                togetherHtml += `<div class='mb-2'><button type='button' class='w-full text-left font-bold text-gray-200 bg-gray-800 rounded px-2 py-1 focus:outline-none' onclick="const el=this.parentNode.querySelector('div'); el.classList.toggle('hidden');">${product}</button><div class='hidden pl-4 pt-1'>${togetherSorted.map(([p, n]) => `${p} <span class='text-xs text-gray-400'>(${n})</span>`).join('<br>')}</div></div>`;
            }
        });
        let togetherExplanation = `<div class='mb-2 text-sm text-gray-400'>–î–ª—è –∫–æ–∂–Ω–æ–≥–æ –≤–∞—à–æ–≥–æ —Ç–æ–≤–∞—Ä—É –ø–æ–∫–∞–∑–∞–Ω—ñ —ñ–Ω—à—ñ —Ç–æ–≤–∞—Ä–∏, —è–∫—ñ –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –∫—É–ø—É—é—Ç—å —Ä–∞–∑–æ–º —ñ–∑ –Ω–∏–º —ñ–Ω—à—ñ –∫–ª—ñ—î–Ω—Ç–∏, –∞–ª–µ –≤–∏ —â–µ –Ω–µ –∫—É–ø—É–≤–∞–ª–∏.</div>`;
        let togetherModalHtml = `<div id="${togetherModalId}" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40 hidden"><div class="bg-gray-900 rounded-lg shadow-lg max-w-xl w-full p-6 relative max-h-[60vh] flex flex-col"><button id="close-${togetherModalId}" class="absolute top-2 right-2 text-gray-400 hover:text-gray-200 text-2xl">&times;</button><h3 class="text-lg font-bold mb-4">–¢–æ–≤–∞—Ä–∏, —è–∫—ñ –∫—É–ø—É—é—Ç—å —Ä–∞–∑–æ–º</h3>${togetherExplanation}<div class="overflow-y-auto" style="max-height: 40vh;">${togetherHtml || '<div>–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.</div>'}</div></div></div>`;
        // –ö–∞–ª–µ–Ω–¥–∞—Ä
        const calendarModalId = 'calendarModal';
        let calendarModalHtml = `<div id="${calendarModalId}" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40 hidden"><div class="bg-gray-900 rounded-lg shadow-lg max-w-md w-full p-6 relative"><button id="close-${calendarModalId}" class="absolute top-2 right-2 text-gray-400 hover:text-gray-200 text-2xl">&times;</button><h3 class="text-lg font-bold mb-4">–ö–∞–ª–µ–Ω–¥–∞—Ä –ø–æ–∫—É–ø–æ–∫</h3><div class="overflow-y-auto" style="max-height: 40vh;">${calendarTable}</div></div></div>`;
        // --- –î–æ–¥–∞—é –º–æ–¥–∞–ª–∫—É –¥–ª—è "–ü–æ–∫—Ä–∏—Ç—Ç—è –≥—Ä—É–ø —Ç–æ–≤–∞—Ä—ñ–≤" ---
        const groupCoverageModalId = 'groupCoverageModal';
        let groupCoverageModalHtml = `<div id="${groupCoverageModalId}" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40 hidden"><div class="bg-gray-900 rounded-lg shadow-lg max-w-2xl w-full p-6 relative max-h-[80vh] flex flex-col"><button id="close-${groupCoverageModalId}" class="absolute top-2 right-2 text-gray-400 hover:text-gray-200 text-2xl">&times;</button><h3 class="text-lg font-bold mb-4">–ü–æ–∫—Ä–∏—Ç—Ç—è –≥—Ä—É–ø —Ç–æ–≤–∞—Ä—ñ–≤ (–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 2)</h3><div id="group-coverage-content" class="text-gray-200">–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–∞—Ö –±—É–¥–µ —Ç—É—Ç...</div></div></div>`;
        // –í—Å—Ç–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª–∫–∏ –≤ –∫–æ–Ω–µ—Ü mainBlock
        let modalsContainer = mainBlock.querySelector('#modals-container');
        if (!modalsContainer) {
            modalsContainer = document.createElement('div');
            modalsContainer.id = 'modals-container';
            mainBlock.appendChild(modalsContainer);
        }
        modalsContainer.innerHTML = missedModalHtml + similarModalHtml + togetherModalHtml + calendarModalHtml + groupCoverageModalHtml;
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–æ–∫
        setTimeout(() => {
            const modals = [missedModalId, similarModalId, togetherModalId, calendarModalId, groupCoverageModalId];
            modals.forEach(id => {
                const modal = mainBlock.querySelector(`#${id}`);
                const showBtn = mainBlock.querySelector(`#show-${id}`);
                const closeBtn = mainBlock.querySelector(`#close-${id}`);
                if (showBtn && modal) showBtn.onclick = () => { 
                    modal.classList.remove('hidden');
                    // --- –î–æ–¥–∞—é –ª–æ–≥—ñ–∫—É –¥–ª—è –Ω–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –º–æ–¥–∞–ª–∫–∏ "–ü–æ–∫—Ä–∏—Ç—Ç—è –≥—Ä—É–ø —Ç–æ–≤–∞—Ä—ñ–≤" ---
                    if (id === groupCoverageModalId) {
                        const contentDiv = modal.querySelector('#group-coverage-content');
                        contentDiv.innerHTML = '<div class="text-gray-400">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏...</div>';
                        (async () => {
                            try {
                                // 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤
                                const resp = await fetch('https://fastapi.lookfort.com/nomenclature.analysis?mode=nomenclature_category');
                                const nomenclatureData = await resp.json();
                                // 2. –ó—ñ–±—Ä–∞—Ç–∏ –≤—Å—ñ "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏" –∫–ª—ñ—î–Ω—Ç–∞
                                const clientNomenclatures = new Set(clientSales.map(s => s['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞']));
                                // 3. –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Å—Ñ–µ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞
                                const clientSphere = clientSales[0]?.['–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'] || clientSales[0]?.['–°—Ñ–µ—Ä–∞'] || '';
                                // 4. –í—Å—ñ "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏" —É —Ü—ñ–π —Å—Ñ–µ—Ä—ñ
                                const sphereNomenclatures = new Set(masterData.filter(s => (s['–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏']||s['–°—Ñ–µ—Ä–∞']) === clientSphere).map(s => s['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞']));
                                // 5. –ú–∞–ø–∞: –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ -> –∫–∞—Ç–µ–≥–æ—Ä—ñ—è 2
                                const nomenToGroup = {};
                                nomenclatureData.forEach(item => {
                                    if (item['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] && item['–ö–∞—Ç–µ–≥–æ—Ä–∏—è 2']) nomenToGroup[item['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞']] = item['–ö–∞—Ç–µ–≥–æ—Ä–∏—è 2'];
                                });
                                // 6. –í—Å—ñ –≥—Ä—É–ø–∏ —É —Å—Ñ–µ—Ä—ñ
                                const allGroups = Array.from(sphereNomenclatures).map(n => nomenToGroup[n]).filter(Boolean);
                                const uniqueAllGroups = Array.from(new Set(allGroups)).sort();
                                // 7. –ì—Ä—É–ø–∏, —è–∫—ñ –∫—É–ø—É—î –∫–ª—ñ—î–Ω—Ç
                                const clientGroups = Array.from(clientNomenclatures).map(n => nomenToGroup[n]).filter(Boolean);
                                const uniqueClientGroups = Array.from(new Set(clientGroups)).sort();
                                // 8. –ì—Ä—É–ø–∏, —è–∫—ñ –Ω–µ –∫—É–ø—É—î
                                const notBoughtGroups = uniqueAllGroups.filter(g => !uniqueClientGroups.includes(g));
                                // 9. % –ø–æ–∫—Ä–∏—Ç—Ç—è
                                const coveragePercent = uniqueAllGroups.length ? Math.round(uniqueClientGroups.length / uniqueAllGroups.length * 100) : 0;
                                // 10. –í–∏–≤—ñ–¥ —É –º–æ–¥–∞–ª–∫—É
                                contentDiv.innerHTML = `
                                    <div class='mb-4'>
                                        <b>–ö–ª—ñ—î–Ω—Ç:</b> ${clientInfo['–ö–ª–∏–µ–Ω—Ç'] || ''}<br>
                                        <b>–°—Ñ–µ—Ä–∞ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ:</b> ${clientSphere}<br>
                                        <b>–í—Å—å–æ–≥–æ –≥—Ä—É–ø —É —Å—Ñ–µ—Ä—ñ:</b> ${uniqueAllGroups.length}<br>
                                        <b>–ì—Ä—É–ø –∫—É–ø—É—î:</b> ${uniqueClientGroups.length}<br>
                                        <b>–ì—Ä—É–ø –Ω–µ –∫—É–ø—É—î:</b> ${notBoughtGroups.length}<br>
                                        <b>–ü–æ–∫—Ä–∏—Ç—Ç—è:</b> <span class='text-pink-400 font-bold'>${coveragePercent}%</span>
                                    </div>
                                    <div class='mb-2'><b>–ì—Ä—É–ø–∏, —è–∫—ñ –∫—É–ø—É—î:</b> <span class='text-green-400'>${uniqueClientGroups.join(', ') || '‚Äî'}</span></div>
                                    <div class='mb-4'><b>–ì—Ä—É–ø–∏, —è–∫—ñ –Ω–µ –∫—É–ø—É—î:</b> <span class='text-red-400'>${notBoughtGroups.join(', ') || '‚Äî'}</span></div>
                                    <button id='show-group-details-btn' class='px-4 py-2 bg-gray-700 text-white rounded hover:bg-gray-600 mb-4'>–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø–æ –≥—Ä—É–ø–∞—Ö</button>
                                `;
                                // --- –î–æ–¥–∞—é –æ–∫—Ä–µ–º—É –º–æ–¥–∞–ª–∫—É –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ ---
                                let groupDetailsModal = document.getElementById('groupDetailsModal');
                                if (!groupDetailsModal) {
                                    groupDetailsModal = document.createElement('div');
                                    groupDetailsModal.id = 'groupDetailsModal';
                                    groupDetailsModal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40 hidden';
                                    groupDetailsModal.innerHTML = `
                                        <div class="bg-gray-900 rounded-lg shadow-lg max-w-3xl w-full p-6 relative max-h-[90vh] flex flex-col">
                                            <button id="close-groupDetailsModal" class="absolute top-2 right-2 text-gray-400 hover:text-gray-200 text-2xl">&times;</button>
                                            <h3 class="text-lg font-bold mb-4">–î–µ—Ç–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –ø–æ –≥—Ä—É–ø–∞—Ö</h3>
                                            <div class='overflow-x-auto' style='max-height:65vh;overflow-y:auto;'>
                                                <table class='min-w-max text-xs text-left border border-gray-700'><thead><tr><th class='px-2 py-1 border-b border-gray-700'>–ì—Ä—É–ø–∞</th><th class='px-2 py-1 border-b border-gray-700'>–ö—É–ø—É—î?</th></tr></thead><tbody>
                                                    ${uniqueAllGroups.map(g => `<tr><td class='px-2 py-1 border-b border-gray-800'>${g}</td><td class='px-2 py-1 border-b border-gray-800'>${uniqueClientGroups.includes(g) ? '<span class="text-green-400">–¢–∞–∫</span>' : '<span class="text-red-400">–ù—ñ</span>'}</td></tr>`).join('')}
                                                </tbody></table>
                                            </div>
                                        </div>
                                    `;
                                    document.body.appendChild(groupDetailsModal);
                                }
                                // --- –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ ---
                                const showDetailsBtn = contentDiv.querySelector('#show-group-details-btn');
                                if (showDetailsBtn) {
                                    showDetailsBtn.onclick = () => {
                                        groupDetailsModal.classList.remove('hidden');
                                    };
                                }
                                // --- –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª–∫–∏ ---
                                const closeDetailsBtn = groupDetailsModal.querySelector('#close-groupDetailsModal');
                                if (closeDetailsBtn) {
                                    closeDetailsBtn.onclick = () => {
                                        groupDetailsModal.classList.add('hidden');
                                    };
                                }
                                groupDetailsModal.onclick = (e) => { if (e.target === groupDetailsModal) groupDetailsModal.classList.add('hidden'); };
                            } catch (e) {
                                contentDiv.innerHTML = `<div class='text-red-400'>–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏: ${e.message}</div>`;
                            }
                        })();
                    }
                };
                if (closeBtn && modal) closeBtn.onclick = () => { modal.classList.add('hidden'); };
                if (modal) modal.onclick = (e) => { if (e.target === modal) modal.classList.add('hidden'); };
            });
        }, 0);
        // KPI-–±–ª–æ–∫
        clientKpiContainer.innerHTML = `
            <div class="bg-gray-800 rounded-lg shadow p-6">
                <h2 class="text-xl font-bold text-white">${clientInfo['–ö–ª–∏–µ–Ω—Ç']} <span class="text-lg font-normal text-gray-400">(${clientInfo['–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'] || clientInfo['–ö–ª–∏–µ–Ω—Ç.–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å'] || ''})</span></h2>
                <div class="mt-4 grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                    <div><p class="text-sm text-gray-400">–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∏—Ä—É—á–∫–∞</p><p class="text-2xl font-bold text-green-400">${totalRevenue.toFixed(2)}</p>
                        <div class="text-xs text-gray-400 mt-1 ${isForecastOverdue ? 'bg-red-900 rounded px-2 py-1' : ''}">–ü—Ä–æ–≥–Ω–æ–∑: –∫–æ–ª–∏ –∫—É–ø–∏—Ç—å <b>${forecastDate}</b>, —Å—É–º–∞ <b>${forecastSum.toFixed(2)}</b> <span class='text-gray-500'>(—Å–µ—Ä–µ–¥–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª: ${avgIntervalDays ? avgIntervalDays.toFixed(1) : '-'} –¥–Ω—ñ–≤)</span></div>
                    </div>
                    <div><p class="text-sm text-gray-400">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫</p><p class="text-2xl font-bold text-white">${new Set(clientSales.map(s => s['–î–∞—Ç–∞'].slice(0, 10))).size}</p></div>
                    <div><p class="text-sm text-gray-400">–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤</p><p class="text-2xl font-bold text-white">${productList.length}</p></div>
                    <div><p class="text-sm text-gray-400">–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫</p><p class="text-2xl font-bold text-blue-400">${avgCheck.toFixed(2)}</p></div>
                </div>
                <div class="mt-4 text-center"><span class="inline-block px-3 py-1 rounded bg-gray-900 text-gray-300 text-sm">–°–µ–≥–º–µ–Ω—Ç: <b>${segment}</b></span></div>
                ${buttonsRow}
                <div class="mt-8 grid grid-cols-1 md:grid-cols-3 gap-8" id="client-charts-block">
                  <div><canvas id="clientRevenueChart" height="120"></canvas><div class="text-center text-xs text-gray-400 mt-2">–î–∏–Ω–∞–º—ñ–∫–∞ –≤–∏—Ä—É—á–∫–∏ –ø–æ –º—ñ—Å—è—Ü—è—Ö</div></div>
                  <div><canvas id="clientAvgCheckChart" height="120"></canvas><div class="text-center text-xs text-gray-400 mt-2">–î–∏–Ω–∞–º—ñ–∫–∞ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–µ–∫–∞</div></div>
                  <div><canvas id="clientCountChart" height="120"></canvas><div class="text-center text-xs text-gray-400 mt-2">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫ –ø–æ –º—ñ—Å—è—Ü—è—Ö</div></div>
                </div>
            </div>
            <!-- –ú–æ–¥–∞–ª–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
        `;
        // --- –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ ---
        (async () => {
          const companyId = window.state?.currentCompanyId;
          const clientCode = clientInfo['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'];
          if (!companyId || !clientCode) return;
          const segmentHistory = await loadClientSegmentHistory(companyId, clientCode);
          const months = Object.keys(segmentHistory).sort();
          if (months.length > 0) {
            // –ú–∞–ø–ø–∏–Ω–≥ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ —á–∏—Å–ª–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            const segmentMap = {
              '–ù–æ–≤–∏–π': 1,
              '–í—Ç—Ä–∞—á–µ–Ω–∏–π –Ω–æ–≤–∏–π': 1,
              '–ó–Ω–∏–∂—É—î—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å': 2,
              '–í—Ç—Ä–∞—á–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π': 2,
              '–í—Ç—Ä–∞—á–µ–Ω–∏–π –ª–æ—è–ª—å–Ω–∏–π': 2,
              '–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –≤—Ç—Ä–∞—á–∞—î—Ç—å—Å—è': 3,
              '–õ–æ—è–ª—å–Ω–∏–π': 3,
              '–í—Ç—Ä–∞—á–µ–Ω–∏–π —á–µ–º–ø—ñ–æ–Ω': 3,
              '–ß–µ–º–ø—ñ–æ–Ω': 4,
              '–ê–∫—Ç–∏–≤–Ω–∏–π': 4,
              'VIP': 5,
              '–í—Ç—Ä–∞—á–µ–Ω–∏–π VIP': 4
            };
            const data = months.map(m => segmentMap[segmentHistory[m].segment] || 0);
            const labels = months;
            // –í—Å—Ç–∞–≤–ª—è–µ–º canvas
            let chartBlock = document.createElement('div');
            chartBlock.className = 'mt-8';
            chartBlock.innerHTML = `<div class='mb-2 text-gray-300 text-sm'>–î–∏–Ω–∞–º—ñ–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ –∫–ª—ñ—î–Ω—Ç–∞</div><canvas id='segmentHistoryChart' height='80'></canvas>`;
            // --- –î–æ–¥–∞—é –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ ---
            const tableBtn = document.createElement('button');
            tableBtn.textContent = '–î–∏–Ω–∞–º—ñ–∫–∞ —Å–µ–≥–º–µ–Ω—Ç—ñ–≤ (—Ç–∞–±–ª–∏—Ü—è)';
            tableBtn.className = 'ml-4 px-4 py-2 bg-gray-700 text-white rounded hover:bg-gray-600 text-sm';
            chartBlock.appendChild(tableBtn);
            // --- –¢–∞–±–ª–∏—Ü—è (—Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞) ---
            const tableBlock = document.createElement('div');
            tableBlock.className = 'mt-4 hidden';
            chartBlock.appendChild(tableBlock);
            tableBtn.onclick = () => {
              if (tableBlock.classList.contains('hidden')) {
                // –ü–æ–±—É–¥–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ
                let html = `<div class='overflow-x-auto'><table class='min-w-max text-xs text-left border border-gray-700'><thead><tr><th class='px-2 py-1 border-b border-gray-700'>–ú—ñ—Å—è—Ü—å</th><th class='px-2 py-1 border-b border-gray-700'>–°—Ñ–µ—Ä–∞</th><th class='px-2 py-1 border-b border-gray-700'>–°–µ–≥–º–µ–Ω—Ç</th><th class='px-2 py-1 border-b border-gray-700'>Recency</th><th class='px-2 py-1 border-b border-gray-700'>Frequency</th><th class='px-2 py-1 border-b border-gray-700'>Monetary</th></tr></thead><tbody>`;
                months.forEach(m => {
                  const seg = segmentHistory[m];
                  html += `<tr><td class='px-2 py-1 border-b border-gray-800'>${m}</td><td class='px-2 py-1 border-b border-gray-800'>${seg.sphere || ''}</td><td class='px-2 py-1 border-b border-gray-800'>${seg.segment}</td><td class='px-2 py-1 border-b border-gray-800'>${seg.rfm?.recencyDays ?? ''}</td><td class='px-2 py-1 border-b border-gray-800'>${seg.rfm?.frequency ?? ''}</td><td class='px-2 py-1 border-b border-gray-800'>${seg.rfm?.monetary ?? ''}</td></tr>`;
                });
                html += '</tbody></table></div>';
                tableBlock.innerHTML = html;
                tableBlock.classList.remove('hidden');
                tableBtn.textContent = '–°—Ö–æ–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é';
              } else {
                tableBlock.classList.add('hidden');
                tableBtn.textContent = '–î–∏–Ω–∞–º—ñ–∫–∞ —Å–µ–≥–º–µ–Ω—Ç—ñ–≤ (—Ç–∞–±–ª–∏—Ü—è)';
              }
            };
            clientKpiContainer.appendChild(chartBlock);
            setTimeout(() => {
              new Chart(document.getElementById('segmentHistoryChart').getContext('2d'), {
                type: 'line',
                data: {
                  labels,
                  datasets: [{
                    label: '–°–µ–≥–º–µ–Ω—Ç',
                    data,
                    borderColor: '#a78bfa',
                    backgroundColor: 'rgba(167,139,250,0.2)',
                    fill: true,
                    tension: 0.2,
                    pointRadius: 4,
                    pointBackgroundColor: '#a78bfa'
                  }]
                },
                options: {
                  responsive: true,
                  plugins: {
                    legend: { display: false },
                    tooltip: {
                      callbacks: {
                        label: ctx => {
                          const val = ctx.raw;
                          return Object.keys(segmentMap).find(k => segmentMap[k] === val) || val;
                        }
                      }
                    }
                  },
                  scales: {
                    y: {
                      min: 1, max: 5, stepSize: 1,
                      ticks: {
                        callback: v => Object.keys(segmentMap).find(k => segmentMap[k] === v) || v,
                        color: '#a1a1aa'
                      }
                    },
                    x: { ticks: { color: '#a1a1aa' } }
                  }
                }
              });
            }, 0);
          }
        })();
        // –†–µ–Ω–¥–µ—Ä–∏–º –≥—Ä–∞—Ñ–∏–∫–∏ Chart.js
        setTimeout(() => {
            // –î–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
            const months = monthsSorted;
            const revenueData = months.map(m => calendarSumMap[m] || 0);
            const countData = months.map(m => calendarMap[m] || 0);
            const avgCheckData = months.map((m, i) => countData[i] ? revenueData[i]/countData[i] : 0);
            // –ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏
            new Chart(document.getElementById('clientRevenueChart').getContext('2d'), {
                type: 'line',
                data: {
                    labels: months,
                    datasets: [{label:'–í–∏—Ä—É—á–∫–∞',data:revenueData,borderColor:'#34d399',backgroundColor:'rgba(52,211,153,0.2)',fill:true}]
                },
                options: {responsive:true, plugins:{legend:{display:false}}, scales:{x:{ticks:{color:'#a1a1aa'}},y:{ticks:{color:'#a1a1aa'}}}}
            });
            // –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
            new Chart(document.getElementById('clientAvgCheckChart').getContext('2d'), {
                type: 'line',
                data: {
                    labels: months,
                    datasets: [{label:'–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫',data:avgCheckData,borderColor:'#60a5fa',backgroundColor:'rgba(96,165,250,0.2)',fill:true}]
                },
                options: {responsive:true, plugins:{legend:{display:false}}, scales:{x:{ticks:{color:'#a1a1aa'}},y:{ticks:{color:'#a1a1aa'}}}}
            });
            // –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫—É–ø–æ–∫
            new Chart(document.getElementById('clientCountChart').getContext('2d'), {
                type: 'bar',
                data: {
                    labels: months,
                    datasets: [{label:'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫',data:countData,backgroundColor:'rgba(251,191,36,0.7)'}]
                },
                options: {responsive:true, plugins:{legend:{display:false}}, scales:{x:{ticks:{color:'#a1a1aa'}},y:{ticks:{color:'#a1a1aa'}}}}
            });
        }, 0);
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Ç–æ–ø—ã
        segmentRecsList.innerHTML = segmentRecs.length > 0 ? segmentRecs.map(item => `<li>${item}</li>`).join('') : '<li>–ù–µ–º–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π.</li>';
        topSalesRecsList.innerHTML = topSalesRecs.length > 0 ? topSalesRecs.map(item => `<li>${item}</li>`).join('') : '<li>–ù–µ–º–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π.</li>';
        // ... (—Å—é–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–¥–∞–ª–æ–∫, –∫–∞–∫ –≤ modules.js, –Ω–æ —á–µ—Ä–µ–∑ mainBlock) ...
    }

    function runAnalysis(selectedClientCode) {
        if (!selectedClientCode) {
            resultsSection.classList.add('hidden');
            return;
        }
        const clientSales = masterData.filter(item => item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] == selectedClientCode);
        if (clientSales.length === 0) {
            alert('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø—Ä–æ–¥–∞–∂—ñ –¥–ª—è —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.');
            return;
        }
        const clientSphere = clientSales[0]['–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'];
        clientSphereName.textContent = clientSphere;
        const clientProducts = new Set(clientSales.map(item => item['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞']));
        const sphereData = masterData.filter(item => item['–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'] === clientSphere);
        const segmentProducts = new Set(sphereData
            .filter(item => item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] != selectedClientCode)
            .map(item => item['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'])
        );
        const segmentRecommendations = [...segmentProducts].filter(product => !clientProducts.has(product));
        const productSalesInSphere = sphereData.reduce((acc, sale) => {
            const product = sale['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'];
            acc[product] = (acc[product] || 0) + 1;
            return acc;
        }, {});
        const topProductsInSphere = Object.entries(productSalesInSphere)
            .sort(([, a], [, b]) => b - a)
            .slice(0, 20)
            .map(([product]) => product);
        const topSalesRecommendations = topProductsInSphere.filter(product => !clientProducts.has(product));
        displayResults(segmentRecommendations, topSalesRecommendations, clientSales);
        resultsSection.classList.remove('hidden');
    }

    managerFilter.onchange = e => {
        const manager = e.target.value;
        if (!manager) {
            clientFilter.innerHTML = '<option value="">–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞...</option>';
            clientFilter.disabled = true;
            clientSearch.disabled = true;
            resultsSection.classList.add('hidden');
            return;
        }
        populateClientFilter(manager, clientSearch.value);
        resultsSection.classList.add('hidden');
    };
    // --- –ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ ---
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    let autocompleteList = document.createElement('div');
    autocompleteList.id = 'client-autocomplete-list';
    autocompleteList.style.position = 'absolute';
    autocompleteList.style.zIndex = '100';
    autocompleteList.style.background = '#1f2937'; // bg-gray-800
    autocompleteList.style.color = '#fff';
    autocompleteList.style.width = '100%';
    autocompleteList.style.maxHeight = '220px';
    autocompleteList.style.overflowY = 'auto';
    autocompleteList.style.borderRadius = '0 0 0.5rem 0.5rem';
    autocompleteList.style.boxShadow = '0 4px 16px rgba(0,0,0,0.2)';
    autocompleteList.style.display = 'none';
    clientSearch.parentNode.style.position = 'relative';
    clientSearch.parentNode.appendChild(autocompleteList);

    let filteredClientsCache = [];
    let autocompleteIndex = -1;

    function showAutocompleteList(clients) {
        autocompleteList.innerHTML = '';
        if (!clients.length) {
            autocompleteList.innerHTML = '<div class="px-4 py-2 text-gray-400">–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</div>';
            autocompleteList.style.display = 'block';
            return;
        }
        clients.forEach((client, idx) => {
            const item = document.createElement('div');
            item.className = 'px-4 py-2 cursor-pointer hover:bg-indigo-700';
            item.textContent = `${client.name} (${client.sphere || '–°—Ñ–µ—Ä–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞'})`;
            item.dataset.code = client.code;
            if (idx === autocompleteIndex) item.classList.add('bg-indigo-800');
            item.onclick = () => {
                clientFilter.value = client.code;
                runAnalysis(client.code);
                autocompleteList.style.display = 'none';
            };
            autocompleteList.appendChild(item);
        });
        autocompleteList.style.display = 'block';
    }

    clientSearch.oninput = e => {
        const manager = managerFilter.value;
        if (!manager) return;
        populateClientFilter(manager, clientSearch.value);
        // –î–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞:
        if (!uniqueClientsByManager[manager]) return;
        filteredClientsCache = uniqueClientsByManager[manager].filter(client =>
            client.name.toLowerCase().includes(clientSearch.value.toLowerCase())
        );
        autocompleteIndex = -1;
        showAutocompleteList(filteredClientsCache);
        // –ê–≤—Ç–æ–≤—ã–±–æ—Ä, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç
        if (filteredClientsCache.length === 1) {
            clientFilter.value = filteredClientsCache[0].code;
            runAnalysis(filteredClientsCache[0].code);
            autocompleteList.style.display = 'none';
        }
    };
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–µ–ª–∫–∞–º–∏ –∏ Enter
    clientSearch.addEventListener('keydown', e => {
        if (autocompleteList.style.display !== 'block' || !filteredClientsCache.length) return;
        if (e.key === 'ArrowDown') {
            e.preventDefault();
            autocompleteIndex = (autocompleteIndex + 1) % filteredClientsCache.length;
            showAutocompleteList(filteredClientsCache);
        } else if (e.key === 'ArrowUp') {
            e.preventDefault();
            autocompleteIndex = (autocompleteIndex - 1 + filteredClientsCache.length) % filteredClientsCache.length;
            showAutocompleteList(filteredClientsCache);
        } else if (e.key === 'Enter') {
            if (autocompleteIndex >= 0 && autocompleteIndex < filteredClientsCache.length) {
                clientFilter.value = filteredClientsCache[autocompleteIndex].code;
                runAnalysis(filteredClientsCache[autocompleteIndex].code);
                autocompleteList.style.display = 'none';
            }
        } else if (e.key === 'Escape') {
            autocompleteList.style.display = 'none';
        }
    });
    // –°–∫—Ä—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
    clientSearch.addEventListener('blur', () => {
        setTimeout(() => autocompleteList.style.display = 'none', 150);
    });
    clientFilter.onchange = e => {
        const clientCode = e.target.value;
        runAnalysis(clientCode);
    };

    loadAndProcessData();
}

// === RFM-–∞–Ω–∞–ª–∏–∑ –∏ —Ä–∞—Å—á–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤ ===
// --- –û–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü—ñ—ó (—è–∫ —É Node.js-—Å–∫—Ä–∏–ø—Ç—ñ) ---
function calculateRfmSegments(masterData) {
  // 1. –ì—Ä—É–ø—É—î–º–æ –≤—Å—ñ –ø—Ä–æ–¥–∞–∂—ñ –ø–æ –∫–ª—ñ—î–Ω—Ç—É —Ç–∞ —Å—Ñ–µ—Ä—ñ
  const byClientSphere = {};
  masterData.forEach(sale => {
    const code = sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'];
    const sphere = sale['–°—Ñ–µ—Ä–∞ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ'] || sale['–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'] || '–Ü–Ω—à–µ';
    const date = new Date(sale['–î–∞—Ç–∞']);
    if (!byClientSphere[code]) byClientSphere[code] = {};
    if (!byClientSphere[code][sphere]) byClientSphere[code][sphere] = [];
    byClientSphere[code][sphere].push({ ...sale, _date: date });
  });

  // 2. –î–ª—è –∫–æ–∂–Ω–æ—ó —Å—Ñ–µ—Ä–∏ ‚Äî –∑–±–∏—Ä–∞—î–º–æ –º–∞—Å–∏–≤ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ ‚â•2 –ø–æ–∫—É–ø–∫–∞–º–∏ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ç–æ–ø—ñ–≤
  const sphereStats = {};
  Object.entries(byClientSphere).forEach(([code, spheres]) => {
    Object.entries(spheres).forEach(([sphere, sales]) => {
      if (!sphereStats[sphere]) sphereStats[sphere] = [];
      if (sales.length >= 2) {
        const totalSum = sales.reduce((sum, s) => sum + (typeof s['–í—ã—Ä—É—á–∫–∞'] === 'string' ? parseFloat(s['–í—ã—Ä—É—á–∫–∞'].replace(/\s/g, '').replace(',', '.')) : (s['–í—ã—Ä—É—á–∫–∞'] || 0)), 0);
        sphereStats[sphere].push({ code, frequency: sales.length, monetary: totalSum });
      }
    });
  });
  // 3. –î–ª—è –∫–æ–∂–Ω–æ—ó —Å—Ñ–µ—Ä–∏ ‚Äî –≤–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ä–æ–≥–∏ —Ç–æ–ø-10% (VIP), 10-30% (–ß–µ–º–ø—ñ–æ–Ω)
  const sphereThresholds = {};
  Object.entries(sphereStats).forEach(([sphere, arr]) => {
    if (!arr.length) return;
    // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ frequency —Ç–∞ monetary
    const byF = [...arr].sort((a, b) => b.frequency - a.frequency);
    const byM = [...arr].sort((a, b) => b.monetary - a.monetary);
    const n = arr.length;
    const vipCount = Math.max(1, Math.floor(n * 0.1));
    const champCount = Math.max(1, Math.floor(n * 0.2));
    sphereThresholds[sphere] = {
      vipF: byF[vipCount - 1]?.frequency || 0,
      vipM: byM[vipCount - 1]?.monetary || 0,
      champF: byF[vipCount + champCount - 1]?.frequency || 0,
      champM: byM[vipCount + champCount - 1]?.monetary || 0,
    };
  });

  // 4. –§–æ—Ä–º—É—î–º–æ —Å–µ–≥–º–µ–Ω—Ç–∏ –ø–æ –º—ñ—Å—è—Ü—è—Ö (—ñ—Å—Ç–æ—Ä—ñ—è)
  const segments = {};
  Object.entries(byClientSphere).forEach(([code, spheres]) => {
    segments[code] = {};
    Object.entries(spheres).forEach(([sphere, sales]) => {
      // –ì—Ä—É–ø—É—î–º–æ –ø—Ä–æ–¥–∞–∂—ñ –ø–æ –º—ñ—Å—è—Ü—è—Ö
      const byMonth = {};
      sales.forEach(sale => {
        const ym = sale._date.getFullYear() + '-' + String(sale._date.getMonth() + 1).padStart(2, '0');
        if (!byMonth[ym]) byMonth[ym] = [];
        byMonth[ym].push(sale);
      });
      // –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è ‚Äî –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Å–µ–≥–º–µ–Ω—Ç
      Object.entries(byMonth).forEach(([ym, monthSales]) => {
        // –í—Å—ñ –ø—Ä–æ–¥–∞–∂—ñ –∫–ª—ñ—î–Ω—Ç–∞ —É —Ü—ñ–π —Å—Ñ–µ—Ä—ñ –î–û —ñ –≤–∫–ª—é—á–Ω–æ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è
        const now = new Date(ym + '-15');
        const allSales = sales.filter(s => s._date <= now);
        const lastSale = allSales.reduce((max, s) => (!max || s._date > max._date) ? s : max, null);
        const firstSale = allSales.reduce((min, s) => (!min || s._date < min._date) ? s : min, null);
        const recencyDays = lastSale ? Math.floor((now - lastSale._date) / (1000*60*60*24)) : null;
        const frequency = allSales.length;
        const monetary = allSales.reduce((sum, s) => sum + (typeof s['–í—ã—Ä—É—á–∫–∞'] === 'string' ? parseFloat(s['–í—ã—Ä—É—á–∫–∞'].replace(/\s/g, '').replace(',', '.')) : (s['–í—ã—Ä—É—á–∫–∞'] || 0)), 0);
        let segment = '–ù–æ–≤–∏–π';
        // 1. –ù–æ–≤–∏–π/–í—Ç—Ä–∞—á–µ–Ω–∏–π –Ω–æ–≤–∏–π
        if (frequency === 1) {
          const daysSince = lastSale ? Math.floor((now - lastSale._date) / (1000*60*60*24)) : null;
          if (daysSince !== null && daysSince < 31) segment = '–ù–æ–≤–∏–π';
          else segment = '–í—Ç—Ä–∞—á–µ–Ω–∏–π –Ω–æ–≤–∏–π';
        } else if (frequency >= 2) {
          // 2. VIP/–ß–µ–º–ø—ñ–æ–Ω/–õ–æ—è–ª—å–Ω–∏–π/–í—Ç—Ä–∞—á–µ–Ω–∏–π ...
          const th = sphereThresholds[sphere] || {};
          const isVip = (frequency >= (th.vipF || Infinity)) || (monetary >= (th.vipM || Infinity));
          const isChamp = !isVip && ((frequency >= (th.champF || Infinity)) || (monetary >= (th.champM || Infinity)));
          const isLost = recencyDays !== null && recencyDays >= 61; // 2 –º—ñ—Å—è—Ü—ñ
          if (isVip) segment = isLost ? '–í—Ç—Ä–∞—á–µ–Ω–∏–π VIP' : 'VIP';
          else if (isChamp) segment = isLost ? '–í—Ç—Ä–∞—á–µ–Ω–∏–π —á–µ–º–ø—ñ–æ–Ω' : '–ß–µ–º–ø—ñ–æ–Ω';
          else segment = isLost ? '–í—Ç—Ä–∞—á–µ–Ω–∏–π –ª–æ—è–ª—å–Ω–∏–π' : '–õ–æ—è–ª—å–Ω–∏–π';
        }
        segments[code][ym] = { segment, rfm: { recencyDays, frequency, monetary }, sphere };
      });
    });
  });
  return segments;
}
// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ Firestore ===
async function saveSegmentsToFirestore(segments, companyId) {
  if (!window.state || !window.state.currentCompanyId) {
    alert('–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞!');
    return;
  }
  const perms = window.state.currentUserPermissions || {};
  if (!perms.sales_manage && !perms.isOwner) {
    alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤!');
    return;
  }
  try {
    for (const [clientCode, months] of Object.entries(segments)) {
      await firebase.setDoc(
        firebase.doc(firebase.db, 'companies', companyId, 'clientSegments', clientCode),
        { months },
        { merge: true }
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤:', error);
    alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤: ' + (error.message || error));
    throw error;
  }
}

// === –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏–∑ Firestore ===
async function loadClientSegmentHistory(companyId, clientCode) {
  try {
    const docRef = firebase.doc(firebase.db, 'companies', companyId, 'clientSegments', clientCode);
    const docSnap = await firebase.getDoc(docRef);
    if (docSnap.exists()) {
      return docSnap.data().months || {};
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞:', e);
  }
  return {};
} 

// –î–æ–¥–∞—é –≥–ª–æ–±–∞–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–ª—è alerts.js
if (typeof window !== 'undefined') {
  window.initSalesAssistantPage = initSalesAssistantPage;

  // --- –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–∫—É —Å–µ–≥–º–µ–Ω—Ç—ñ–≤ ---
  document.addEventListener('DOMContentLoaded', () => {
    const btn = document.getElementById('recalculateSegmentBtn');
    const container = document.getElementById('recalculateSegmentContainer');
    const loader = document.getElementById('recalculateSegmentLoader');
    if (!btn || !loader || !container) return;

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤/–≤–ª–∞—Å–Ω–∏–∫—ñ–≤
    // –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è state
    setTimeout(() => {
        const perms = window.state?.currentUserPermissions || {};
        if (perms.isOwner || perms.sales_manage) {
            container.classList.remove('hidden');
        }
    }, 2000); // –ó–∞—Ç—Ä–∏–º–∫–∞, —â–æ–± –¥–æ—á–µ–∫–∞—Ç–∏—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∞–≤

    let isLoading = false;
    btn.onclick = async () => {
      if (isLoading) return;
      isLoading = true;
      loader.classList.remove('hidden');
      btn.disabled = true;

      try {
        const [dataRes, dataJulyRes] = await Promise.all([
          fetch('–º–æ–¥—É–ª—å –ø–æ–º—ñ—á–Ω–∏–∫ –ø—Ä–æ–¥–∞–∂—É/data.json'),
          fetch('https://fastapi.lookfort.com/nomenclature.analysis')
        ]);
        const data = await dataRes.json();
        const dataJuly = await dataJulyRes.json();
        const masterData = data.concat(dataJuly);
        const segments = calculateRfmSegments(masterData);
        const companyId = window.state?.currentCompanyId;

        if (companyId) {
          await saveSegmentsToFirestore(segments, companyId);
          loader.classList.add('hidden'); // –•–æ–≤–∞—î–º–æ –ª–æ–∞–¥–µ—Ä
          btn.textContent = '–ì–æ—Ç–æ–≤–æ!'; // –¢—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç
        }
        
      } catch (e) {
        loader.classList.add('hidden'); // –•–æ–≤–∞—î–º–æ –ª–æ–∞–¥–µ—Ä
        btn.textContent = '–ü–æ–º–∏–ª–∫–∞!'; // –¢—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç
        alert('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–∫—É: ' + (e.message || e));
      } finally {
        setTimeout(() => {
          btn.disabled = false;
          btn.textContent = '–ü–µ—Ä–µ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å–µ–≥–º–µ–Ω—Ç–∏'; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–µ–∫—Å—Ç
          btn.appendChild(loader); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ª–æ–∞–¥–µ—Ä
          isLoading = false;
        }, 2000);
      }
    };
  });
} 