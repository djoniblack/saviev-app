// managerCalendar-new.js - –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥—É–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
import * as firebase from './firebase.js';

// === –ù–ê–°–¢–†–û–ô–ö–ò –û–¢–õ–ê–î–ö–ò ===
const DEBUG_MODE = true; // –í–†–ï–ú–ï–ù–ù–û –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –í–ö–õ–Æ–ß–ê–ï–ú –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
const LOG_LEVEL = 'verbose'; // –í–†–ï–ú–ï–ù–ù–û –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –í–ö–õ–Æ–ß–ê–ï–ú –ü–û–î–†–û–ë–ù–´–ï –õ–û–ì–ò

const logger = {
    verbose: (...args) => console.log('[CALENDAR]', ...args), // –£–±–∏—Ä–∞–µ–º —É—Å–ª–æ–≤–∏—è
    info: (...args) => console.log('[CALENDAR]', ...args), // –£–±–∏—Ä–∞–µ–º —É—Å–ª–æ–≤–∏—è
    warn: (...args) => console.warn('[CALENDAR]', ...args), // –£–±–∏—Ä–∞–µ–º —É—Å–ª–æ–≤–∏—è
    error: (...args) => console.error('[CALENDAR]', ...args),
    isDebugMode: () => true // –í—Å–µ–≥–¥–∞ true –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
};

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—Å–µ DOM-–æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥—É–ª—è
 */
class ManagerCalendar {
    constructor() {
        // === –°–û–°–¢–û–Ø–ù–ò–ï –ú–û–î–£–õ–Ø ===
        this.isInitialized = false;
        this.isFrozen = false; // –ù–æ–≤—ã–π —Ä–µ–∂–∏–º "–∑–∞–º–æ—Ä–æ–∑–∫–∏"
        this.container = null;
        this.elements = {}; // –ö—ç—à DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        
        // === –î–ê–ù–ù–´–ï ===
        this.calendarData = [];
        this.managersData = [];
        this.departmentsData = [];
        this.clientLinks = {}; // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ CRM —Å—Å—ã–ª–æ–∫ {–∫–æ–¥_–∫–ª–∏–µ–Ω—Ç–∞: —Å—Å—ã–ª–∫–∞}
        this.clientLinksByName = {}; // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ CRM —Å—Å—ã–ª–æ–∫ {–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞: —Å—Å—ã–ª–∫–∞}
        this.currentMonth = new Date().getMonth();
        this.currentYear = new Date().getFullYear();
        this.selectedDepartment = '';
        this.selectedManager = '';
        
        // === –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï ===
        this.autoUpdateInterval = null;
        this.lastUpdateTime = null;
        this.isAutoUpdateEnabled = true;
        this.isUpdateInProgress = false;
        this.AUTO_UPDATE_INTERVAL = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç
        
        // === –ö–≠–®–ò ===
        this.renderCache = new Map();
        this.eventListeners = new Map();
        
        // === –û–¢–ß–ï–¢–´ ===
        this.reportsInitialized = false;
    }
    
    /**
     * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è
     */
    async init(container) {
        logger.info('üìÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞...');
        
        // –ï—Å–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –±—ã–ª –∑–∞–º–æ—Ä–æ–∂–µ–Ω, –ø—Ä–æ—Å—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        if (this.isFrozen && this.isInitialized) {
            logger.info('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–∑ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
            this.isFrozen = false;
            this.container = container;
            this._createHTMLStructure();
            this._cacheElements();
            this._initEventListeners();
            this._renderCalendar(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (this.isAutoUpdateEnabled) {
                this._startAutoUpdate();
            }
            logger.info('‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –∫—ç—à–∞');
        return;
    }
    
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if (this.isInitialized) {
            logger.warn('‚ö†Ô∏è –ú–æ–¥—É–ª—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        
        if (!container) {
            logger.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
            return;
        }
        
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            this.container = container;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if (!this._checkPermissions()) {
                this._renderAccessDenied();
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–¥–∏–Ω —Ä–∞–∑
            this._createHTMLStructure();
            
            // –ö—ç—à–∏—Ä—É–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
            this._cacheElements();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this._initEventListeners();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await this._loadData();
            
            // –†–µ–Ω–¥–µ—Ä–∏–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this._renderCalendar();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if (this.isAutoUpdateEnabled) {
                this._startAutoUpdate();
            }
            
            this.isInitialized = true;
            logger.info('‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error);
            this._renderError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
        }
    }
    
    /**
     * "–ú—è–≥–∫–∞—è" –æ—á–∏—Å—Ç–∫–∞ - –∑–∞–º–æ—Ä–æ–∑–∫–∞ –º–æ–¥—É–ª—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
     */
    freeze() {
        logger.info('‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)...');
        
        if (!this.isInitialized) {
            logger.warn('‚ö†Ô∏è –ú–æ–¥—É–ª—å –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        
        try {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            this._stopAutoUpdate();
            
            // –û—á–∏—â–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π (–Ω–æ –Ω–µ –¥–∞–Ω–Ω—ã–µ!)
            this._removeAllEventListeners();
            
            // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            if (this.container) {
                this.container.innerHTML = '';
                this.container = null;
            }
            
            // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã DOM (–¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è!)
            this.elements = {};
            
            this.isFrozen = true;
            logger.info('‚ùÑÔ∏è –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω (–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)');
        
    } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error);
    }
}

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
     */
    _switchTab(tabName) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤–∫–ª–∞–¥–æ–∫
        const allTabs = this.container.querySelectorAll('.calendar-tab');
        allTabs.forEach(tab => {
            tab.classList.remove('text-white', 'border-blue-500', 'bg-blue-600', 'bg-opacity-20');
            tab.classList.add('text-gray-300', 'border-transparent');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        if (tabName === 'calendar') {
            this.elements.calendarTab.classList.remove('text-gray-300', 'border-transparent');
            this.elements.calendarTab.classList.add('text-white', 'border-blue-500', 'bg-blue-600', 'bg-opacity-20');
            
            this.elements.content.classList.remove('hidden');
            this.elements.reportsContent.classList.add('hidden');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            const filtersContainer = this.container.querySelector('.calendar-filters');
            if (filtersContainer) {
                filtersContainer.classList.remove('hidden');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ
            if (!this.reportsInitialized) {
                this._initReports();
            }
        } else if (tabName === 'reports') {
            this.elements.reportsTab.classList.remove('text-gray-300', 'border-transparent');
            this.elements.reportsTab.classList.add('text-white', 'border-blue-500', 'bg-blue-600', 'bg-opacity-20');
            
            this.elements.content.classList.add('hidden');
            this.elements.reportsContent.classList.remove('hidden');
            
            // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            const filtersContainer = this.container.querySelector('.calendar-filters');
            if (filtersContainer) {
                filtersContainer.classList.add('hidden');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ
            if (!this.reportsInitialized) {
                this._initReports();
            }
        }
        
        logger.info(`üìä –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tabName}`);
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
     */
    async _initReports() {
        try {
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –æ—Ç—á–µ—Ç–æ–≤
            const { initCalendarReportsModule } = await import('./calendarReports.js');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
            await initCalendarReportsModule(this.elements.reportsContent);
            
            this.reportsInitialized = true;
            logger.info('‚úÖ –ú–æ–¥—É–ª—å –æ—Ç—á–µ—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤:', error);
        }
    }
    
    /**
     * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–æ–¥—É–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –æ—á–∏—Å—Ç–∫–µ)
     */
    cleanup() {
        logger.info('üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞...');
        
        if (!this.isInitialized && !this.isFrozen) {
            logger.warn('‚ö†Ô∏è –ú–æ–¥—É–ª—å –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        
        try {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            this._stopAutoUpdate();
            
            // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
            this._removeAllEventListeners();
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à–∏
            this.renderCache.clear();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            this.calendarData = [];
            this.managersData = [];
            this.departmentsData = [];
            this.selectedDepartment = '';
            this.selectedManager = '';
            this.lastUpdateTime = null;
            this.isUpdateInProgress = false;
            
            // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            if (this.container) {
                this.container.innerHTML = '';
                this.container = null;
            }
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            this.elements = {};
            
            this.isInitialized = false;
            this.isFrozen = false;
            logger.info('‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω');
        
    } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error);
    }
}

/**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
     */
    _checkPermissions() {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∞ –∏–∑ PERMISSIONS_GROUPS
            return window.hasPermission?.('manager_calendar_view_page') ?? true;
    } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤:', error);
            return true; // Fallback
    }
}

/**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥—É–ª—è –æ–¥–∏–Ω —Ä–∞–∑
     */
    _createHTMLStructure() {
        this.container.innerHTML = `
            <div class="manager-calendar-module bg-gray-800 rounded-xl shadow-lg p-6">
                <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ -->
                <div class="calendar-header mb-6">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-2xl font-bold text-white">–ö–∞–ª–µ–Ω–¥–∞—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞</h2>
                        <div class="calendar-controls flex items-center gap-4">
                            <div id="autoUpdateStatus" class="text-sm text-gray-400">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
                            <button id="autoUpdateToggle" class="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm">
                                –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                            </button>
                        </div>
                    </div>
                    
                    <!-- –í–∫–ª–∞–¥–∫–∏ -->
                    <div class="calendar-tabs flex border-b border-gray-600">
                        <button id="calendarTab" class="calendar-tab px-4 py-2 text-white border-b-2 border-blue-500 bg-blue-600 bg-opacity-20">
                            üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä
                        </button>
                        <button id="reportsTab" class="calendar-tab px-4 py-2 text-gray-300 hover:text-white border-b-2 border-transparent hover:border-gray-500">
                            üìä –û—Ç—á–µ—Ç—ã
                        </button>
                    </div>
                </div>
            
                <!-- –§–∏–ª—å—Ç—Ä—ã -->
                <div class="calendar-filters bg-gray-700 rounded-lg p-4 mb-6">
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div>
                            <label class="block text-sm font-medium text-gray-300 mb-1">–í—ñ–¥–¥—ñ–ª</label>
                            <select id="departmentFilter" class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded text-white">
                            <option value="">–í—Å—ñ –≤—ñ–¥–¥—ñ–ª–∏</option>
                        </select>
                    </div>
                    <div>
                            <label class="block text-sm font-medium text-gray-300 mb-1">–ú–µ–Ω–µ–¥–∂–µ—Ä</label>
                            <select id="managerFilter" class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded text-white">
                            <option value="">–í—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏</option>
                        </select>
                    </div>
                    <div>
                            <label class="block text-sm font-medium text-gray-300 mb-1">–ú—ñ—Å—è—Ü—å</label>
                            <div class="flex items-center gap-2">
                                <button id="prevMonth" class="px-2 py-1 bg-gray-600 text-white rounded hover:bg-gray-500">‚Äπ</button>
                                <span id="currentMonth" class="px-2 text-white min-w-[120px] text-center"></span>
                                <button id="nextMonth" class="px-2 py-1 bg-gray-600 text-white rounded hover:bg-gray-500">‚Ä∫</button>
                            </div>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-1">–î—ñ—ó</label>
                            <button id="refreshData" class="px-3 py-2 bg-green-600 text-white rounded hover:bg-green-700">
                                –û–Ω–æ–≤–∏—Ç–∏
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑) -->
                <div id="calendarAnalytics" class="calendar-analytics mb-6">
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h3 class="text-lg font-semibold text-white mb-4">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–¥–∞–Ω—å</h3>
                        <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                            <div class="bg-blue-100 p-3 rounded-lg text-center">
                                <div id="totalTasks" class="text-2xl font-bold text-blue-600">0</div>
                                <div class="text-sm text-gray-600">–í—Å—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω—å</div>
                            </div>
                            <div class="bg-green-100 p-3 rounded-lg text-center">
                                <div id="newTasks" class="text-2xl font-bold text-green-600">0</div>
                                <div class="text-sm text-gray-600">–ù–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å</div>
                            </div>
                            <div class="bg-yellow-100 p-3 rounded-lg text-center">
                                <div id="rescheduledTasks" class="text-2xl font-bold text-yellow-600">0</div>
                                <div class="text-sm text-gray-600">–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏—Ö</div>
                            </div>
                            <div class="bg-purple-100 p-3 rounded-lg text-center">
                                <div id="completedTasks" class="text-2xl font-bold text-purple-600">0</div>
                                <div class="text-sm text-gray-600">–ó–∞–∫—Ä–∏—Ç–∏—Ö</div>
                            </div>
                            </div>
                        </div>
                </div>
                
                <!-- –ö–∞–ª–µ–Ω–¥–∞—Ä—å -->
                <div id="calendarContent" class="calendar-content bg-gray-700 rounded-lg p-4">
                    <div class="text-center py-8">
                        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mb-4"></div>
                        <p class="text-gray-200">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è...</p>
                </div>
            </div>
            
                <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ -->
                <div id="reportsContent" class="reports-content hidden">
                    <!-- –û—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </div>
                
                <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (—á–∞—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥—É–ª—è) -->
                <div id="calendarModal" class="calendar-modal fixed inset-0 z-50 hidden bg-black bg-opacity-50 flex items-center justify-center">
                    <div class="modal-content bg-gray-800 rounded-xl shadow-2xl p-6 w-full max-w-2xl mx-4 relative">
                        <button id="modalClose" class="absolute top-4 right-4 text-gray-400 hover:text-white text-2xl">&times;</button>
                        <div id="modalHeader" class="mb-4">
                            <h3 class="text-xl font-bold text-white">–î–µ—Ç–∞–ª—ñ –∑–∞–≤–¥–∞–Ω–Ω—è</h3>
                        </div>
                        <div id="modalBody" class="text-gray-200">
                            <!-- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ -->
                    </div>
                        </div>
                        </div>
                    </div>
        `;
    }
    
    /**
     * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
     */
    _cacheElements() {
        this.elements = {
            // –í–∫–ª–∞–¥–∫–∏
            calendarTab: this.container.querySelector('#calendarTab'),
            reportsTab: this.container.querySelector('#reportsTab'),
            reportsContent: this.container.querySelector('#reportsContent'),
            
            autoUpdateStatus: this.container.querySelector('#autoUpdateStatus'),
            autoUpdateToggle: this.container.querySelector('#autoUpdateToggle'),
            departmentFilter: this.container.querySelector('#departmentFilter'),
            managerFilter: this.container.querySelector('#managerFilter'),
            currentMonth: this.container.querySelector('#currentMonth'),
            prevMonth: this.container.querySelector('#prevMonth'),
            nextMonth: this.container.querySelector('#nextMonth'),
            refreshData: this.container.querySelector('#refreshData'),
            content: this.container.querySelector('#calendarContent'),
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            totalTasks: this.container.querySelector('#totalTasks'),
            newTasks: this.container.querySelector('#newTasks'),
            rescheduledTasks: this.container.querySelector('#rescheduledTasks'),
            completedTasks: this.container.querySelector('#completedTasks'),
            
            // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            modal: this.container.querySelector('#calendarModal'),
            modalClose: this.container.querySelector('#modalClose'),
            modalHeader: this.container.querySelector('#modalHeader'),
            modalBody: this.container.querySelector('#modalBody')
        };
        
        logger.verbose('üìù DOM —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    _initEventListeners() {
        // –í–∫–ª–∞–¥–∫–∏
        this._addEventListener('calendarTab', 'click', () => this._switchTab('calendar'));
        this._addEventListener('reportsTab', 'click', () => this._switchTab('reports'));
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        this._addEventListener('autoUpdateToggle', 'click', () => this._toggleAutoUpdate());
        
        // –§–∏–ª—å—Ç—Ä—ã
        this._addEventListener('departmentFilter', 'change', (e) => {
            const oldValue = this.selectedDepartment;
            this.selectedDepartment = e.target.value;
            
            if (logger.isDebugMode()) {
                console.log('üè¢ –§–∏–ª—å—Ç—Ä –æ—Ç–¥–µ–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω:', {
                    '—Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ': oldValue,
                    '–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ': this.selectedDepartment,
                    '—ç–ª–µ–º–µ–Ω—Ç UI': e.target.value
                });
            }
            
            this._renderCalendar();
        });
        
        this._addEventListener('managerFilter', 'change', (e) => {
            const oldValue = this.selectedManager;
            this.selectedManager = e.target.value;
            
            if (logger.isDebugMode()) {
                console.log('üë§ –§–∏–ª—å—Ç—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑–º–µ–Ω–µ–Ω:', {
                    '—Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ': oldValue,
                    '–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ': this.selectedManager,
                    '—ç–ª–µ–º–µ–Ω—Ç UI': e.target.value
                });
            }
            
            this._renderCalendar();
        });
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        this._addEventListener('prevMonth', 'click', () => this._changeMonth(-1));
        this._addEventListener('nextMonth', 'click', () => this._changeMonth(1));
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        this._addEventListener('refreshData', 'click', () => this._refreshData());
        
        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this._addEventListener('modalClose', 'click', () => this._hideModal());
        
        this.elements.modal.addEventListener('click', (e) => {
            if (e.target === this.elements.modal) this._hideModal();
        });
        
        logger.verbose('üéß –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º
     */
    _addEventListener(elementId, event, handler, options) {
        const element = this.elements[elementId];
        if (!element) return;
        
        const key = `${elementId}-${event}`;
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.eventListeners.has(key)) {
            const oldHandler = this.eventListeners.get(key);
            element.removeEventListener(event, oldHandler, options);
        }
        
        element.addEventListener(event, handler, options);
        this.eventListeners.set(key, handler);
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    _removeAllEventListeners() {
        this.eventListeners.forEach((handler, key) => {
            const [elementId, event] = key.split('-');
            const element = this.elements[elementId];
            if (element) {
                element.removeEventListener(event, handler);
            }
        });
        this.eventListeners.clear();
        logger.info('üßπ –í—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –æ—á–∏—â–µ–Ω—ã');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ textContent, –Ω–µ innerHTML)
     */
    _updateStatistics(stats) {
        if (this.elements.totalTasks) {
            this.elements.totalTasks.textContent = stats.totalTasks || 0;
        }
        if (this.elements.newTasks) {
            this.elements.newTasks.textContent = stats.newTasks || 0;
        }
        if (this.elements.rescheduledTasks) {
            this.elements.rescheduledTasks.textContent = stats.rescheduledTasks || 0;
        }
        if (this.elements.completedTasks) {
            this.elements.completedTasks.textContent = stats.completedTasks || 0;
        }
        
        logger.verbose('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ textContent)
     */
    _updateAutoUpdateStatus(message, className = 'text-gray-400') {
        if (this.elements.autoUpdateStatus) {
            this.elements.autoUpdateStatus.textContent = message;
            this.elements.autoUpdateStatus.className = `text-sm ${className}`;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
     */
    _showModal(title, content) {
        if (this.elements.modal) {
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (content.includes('<div class="bg-white')) {
                this.elements.modal.innerHTML = content;
            } else {
                // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                this.elements.modalHeader.innerHTML = title ? `<h3 class="text-xl font-bold text-white">${title}</h3>` : '';
                this.elements.modalBody.innerHTML = content;
            }
            this.elements.modal.classList.remove('hidden');
    }
}

/**
     * –°–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    _hideModal() {
        if (this.elements.modal) {
            this.elements.modal.classList.add('hidden');
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async _loadData() {
        console.log('üìä === –ù–ê–ß–ê–õ–û _loadData ===');
        logger.info('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è...');
        
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (this.elements.calendarContent) {
                this.elements.calendarContent.innerHTML = '<div class="text-center py-8">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...</div>';
            }
            
            console.log('üìä –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...');
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [employeesData, tasksData] = await Promise.all([
                this._loadEmployeesAndDepartments(),
                this._loadCalendarData() // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            ]);
            console.log('üìä –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–æ–Ω —Å–∞–º —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ this.clientLinks)
            console.log('üîó –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ CRM —Å—Å—ã–ª–æ–∫...');
            await this._loadClientLinks();
            console.log('üîó –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ CRM —Å—Å—ã–ª–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∞
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∞...');
            this.managersData = employeesData.managers || [];
            this.departmentsData = employeesData.departments || [];
            this.calendarData = tasksData || [];
            
            console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${this.managersData.length} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, ${this.departmentsData.length} –æ—Ç–¥–µ–ª–æ–≤, ${this.calendarData.length} –∑–∞–¥–∞—á`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            console.log('üîß –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã...');
            this._updateFilters();
            console.log('üîß –§–∏–ª—å—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            
            logger.info('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', {
                '–º–µ–Ω–µ–¥–∂–µ—Ä—ã': this.managersData.length,
                '–æ—Ç–¥–µ–ª—ã': this.departmentsData.length,
                '–∑–∞–¥–∞—á–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è': this.calendarData.length,
                'CRM —Å—Å—ã–ª–∫–∏ (–∫–æ–¥—ã)': Object.keys(this.clientLinks).length,
                'CRM —Å—Å—ã–ª–∫–∏ (–∏–º–µ–Ω–∞)': Object.keys(this.clientLinksByName).length
            });
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (logger.isDebugMode()) {
                console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–•:');
                console.log('üìä –ú–µ–Ω–µ–¥–∂–µ—Ä—ã:', this.managersData);
                console.log('üè¢ –û—Ç–¥–µ–ª—ã:', this.departmentsData);
                console.log('üìÖ –ó–∞–¥–∞—á–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–ø–µ—Ä–≤—ã–µ 3):', this.calendarData.slice(0, 3));
                console.log('üîó CRM —Å—Å—ã–ª–∫–∏ –ø–æ –∫–æ–¥–∞–º (–ø–µ—Ä–≤—ã–µ 3):', Object.entries(this.clientLinks).slice(0, 3));
                console.log('üîó CRM —Å—Å—ã–ª–∫–∏ –ø–æ –∏–º–µ–Ω–∞–º (–ø–µ—Ä–≤—ã–µ 3):', Object.entries(this.clientLinksByName).slice(0, 3));
            }
            
    } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this._renderError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
    }
}

/**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–∑ API –∏ Firebase
     */
    async _loadCalendarData() {
        try {
            logger.info('üìÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è...');
            
            // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –æ—Ç–¥–µ–ª—ã
            const { managers, departments } = await this._loadEmployeesAndDepartments();
            this.managersData = managers;
            this.departmentsData = departments;
            
            const existingTasks = await this._loadTasksFromFirebase();
            logger.info('üì• –Ü—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ –∑ Firebase:', existingTasks.length);
            
            const response = await fetch('https://fastapi.lookfort.com/nomenclature.analysis?mode=dela');
            if (!response.ok) {
                logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ API:', response.status);
                logger.info('üì• –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞–Ω—ñ –∑ Firebase —è–∫ fallback:', existingTasks.length);
                return existingTasks;
            }
            
            const apiData = await response.json();
            logger.info('üìÖ –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω–∏—Ö –∑ API:', apiData.length);
            
            const { newTasks, rescheduledTasks, unchangedTasks, completedTasks } = this._findChangedTasks(apiData, existingTasks);
            logger.info(`üìä –ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω: ${newTasks.length} –Ω–æ–≤–∏—Ö, ${rescheduledTasks.length} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏—Ö, ${completedTasks.length} –∑–∞–∫—Ä—ã—Ç—ã—Ö`);
            
            if (newTasks.length > 0 || rescheduledTasks.length > 0 || completedTasks.length > 0) {
                logger.info('üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –≤ Firebase...');
                await this._saveOnlyChanges(newTasks, rescheduledTasks, completedTasks);
                const updatedData = await this._loadTasksFromFirebase();
                logger.info('üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∑ Firebase:', updatedData.length);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Å—ã–ª–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
                this._updateFilters();
                await this._loadClientLinks();
                
                return updatedData;
            } else {
                logger.info('üîÑ –ó–º—ñ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Å—ã–ª–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
                this._updateFilters();
                await this._loadClientLinks();
                
                return existingTasks;
            }
        } catch (error) {
            logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error);
            return await this._loadTasksFromFirebase();
        }
    }

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –æ—Ç–¥–µ–ª–æ–≤
 */
    async _loadEmployeesAndDepartments() {
    try {
        const companyId = window.state?.currentCompanyId;
        if (!companyId) {
                logger.error('‚ùå ID –∫–æ–º–ø–∞–Ω—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return { managers: [], departments: [] };
        }
        
            logger.info('üë• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ —Ç–∞ –≤—ñ–¥–¥—ñ–ª—ñ–≤...');
            logger.info('üè¢ Company ID:', companyId);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ window.state –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        const allEmployees = window.state?.allEmployees || [];
        const departments = window.state?.departments || [];
        
            logger.info('üë• –í—Å—ñ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏:', allEmployees.length);
            logger.info('üè¢ –í—Å—ñ –≤—ñ–¥–¥—ñ–ª–∏:', departments.length);

            // –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        const managers = allEmployees.filter(emp => {
            if (emp.role === 'manager') return true;
            if (emp.position) {
                const position = emp.position.toLowerCase();
                return position.includes('–º–µ–Ω–µ–¥–∂–µ—Ä') || 
                       position.includes('manager') || 
                       position.includes('sales') ||
                       position.includes('–ø—Ä–æ–¥–∞–∂');
            }
            return false;
        });
        
            logger.info('üë§ –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏:', managers.length);

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        if (managers.length === 0) {
                logger.warn('üîç –ú–µ–Ω–µ–¥–∂–µ—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—Å—ñ—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤');
                
                if (allEmployees.length === 0) {
                    logger.warn('‚ö†Ô∏è –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ, –¥–æ–¥–∞—î–º–æ –¥–µ–º–æ-–¥–∞–Ω—ñ');
                    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
                    const demoManagers = [
                        { id: 'demo-mgr-1', name: '–î–µ–º–æ –ú–µ–Ω–µ–¥–∂–µ—Ä', position: '–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–¥–∞–∂—ñ–≤', department: '–í—ñ–¥–¥—ñ–ª –ø—Ä–æ–¥–∞–∂—ñ–≤' },
                        { id: 'demo-mgr-2', name: '–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ', position: '–º–µ–Ω–µ–¥–∂–µ—Ä', department: '–í—ñ–¥–¥—ñ–ª —Ä–æ–∑–≤–∏—Ç–∫—É' },
                        { id: 'demo-mgr-3', name: '–ú–∞—Ä—ñ—è –ö–æ–≤–∞–ª–µ–Ω–∫–æ', position: '—Å—Ç–∞—Ä—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä', department: '–í—ñ–¥–¥—ñ–ª –ø—Ä–æ–¥–∞–∂—ñ–≤' }
                    ];
                    
                    const demoDepartments = [
                        { id: 'demo-dept-1', name: '–í—ñ–¥–¥—ñ–ª –ø—Ä–æ–¥–∞–∂—ñ–≤' },
                        { id: 'demo-dept-2', name: '–í—ñ–¥–¥—ñ–ª —Ä–æ–∑–≤–∏—Ç–∫—É' }
                    ];
                    
                    logger.info(`üé≠ –î–æ–¥–∞–Ω–æ ${demoManagers.length} –¥–µ–º–æ-–º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ —Ç–∞ ${demoDepartments.length} –¥–µ–º–æ-–≤—ñ–¥–¥—ñ–ª—ñ–≤`);
                    
                    return {
                        managers: demoManagers,
                        departments: demoDepartments
                    };
                }
                
            return {
                managers: allEmployees,
                departments: departments
            };
        }
        
            return {
                managers: managers,
                departments: departments
            };
        
    } catch (error) {
            logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤:', error);
        return { managers: [], departments: [] };
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ Firebase
 */
    async _loadTasksFromFirebase() {
    try {
        const companyId = window.state?.currentCompanyId;
        if (!companyId) {
                logger.error('‚ùå ID –∫–æ–º–ø–∞–Ω—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return [];
        }

            logger.info('üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∑ Firebase...');

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ –∫–æ–º–ø–∞–Ω–∏–∏
        const tasksRef = firebase.collection(firebase.db, 'companies', companyId, 'managerCalendarTasks');
        const tasksSnapshot = await firebase.getDocs(tasksRef);

        const tasks = [];
        tasksSnapshot.forEach(doc => {
            const data = doc.data();
            tasks.push({
                taskId: data.taskId, // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                ID: data.taskId,
                –î–∞—Ç–∞: data.originalDate, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º originalDate
                '–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è': data.modifiedDate || data.originalDate,
                –î–µ–ª–æ: data.taskDescription,
                –ú–µ–Ω–µ–¥–∂–µ—Ä: data.managerName,
                '–ö–ª–∏–µ–Ω—Ç.–ù–∞–∑–≤–∞–Ω–∏–µ': data.clientName,
                '–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥': data.clientCode,
                '–ö–ª–∏–µ–Ω—Ç.–°—Å—ã–ª–∫–∞': data.clientLink || '',
                departmentName: data.departmentName,
                status: data.status,
                originalDate: data.originalDate // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            });
        });

            logger.info(`üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${tasks.length} –∑–∞–≤–¥–∞–Ω—å –∑ Firebase`);
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Firebase, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if (tasks.length === 0) {
                logger.warn('‚ö†Ô∏è Firebase –ø–æ—Ä–æ–∂–Ω—ñ–π, –¥–æ–¥–∞—î–º–æ –¥–µ–º–æ-–¥–∞–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è');
                const currentDate = new Date();
                const demoTasks = [
                    {
                        taskId: 'demo-1',
                        ID: 'demo-1',
                        –î–∞—Ç–∞: new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate()).toISOString(),
                        '–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è': new Date().toISOString(),
                        –î–µ–ª–æ: '–î–µ–º–æ: –î–∑–≤—ñ–Ω–æ–∫ –∫–ª—ñ—î–Ω—Ç—É',
                        –ú–µ–Ω–µ–¥–∂–µ—Ä: '–î–µ–º–æ –ú–µ–Ω–µ–¥–∂–µ—Ä',
                        '–ö–ª–∏–µ–Ω—Ç.–ù–∞–∑–≤–∞–Ω–∏–µ': '–î–µ–º–æ –ö–ª—ñ—î–Ω—Ç –¢–û–í',
                        '–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥': 'DEMO-001',
                        '–ö–ª–∏–µ–Ω—Ç.–°—Å—ã–ª–∫–∞': 'https://bitrix.lookfort.com/crm/company/details/demo/',
                        departmentName: '–í—ñ–¥–¥—ñ–ª –ø—Ä–æ–¥–∞–∂—ñ–≤',
                        status: 'new',
                        scheduledDate: new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate()).toISOString()
                    },
                    {
                        taskId: 'demo-2',
                        ID: 'demo-2',
                        –î–∞—Ç–∞: new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 1).toISOString(),
                        '–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è': new Date().toISOString(),
                        –î–µ–ª–æ: '–î–µ–º–æ: –ó—É—Å—Ç—Ä—ñ—á –∑ –∫–ª—ñ—î–Ω—Ç–æ–º',
                        –ú–µ–Ω–µ–¥–∂–µ—Ä: '–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ',
                        '–ö–ª–∏–µ–Ω—Ç.–ù–∞–∑–≤–∞–Ω–∏–µ': '–ê–¢ "–ü—Ä–æ–≥—Ä–µ—Å"',
                        '–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥': 'DEMO-002',
                        '–ö–ª–∏–µ–Ω—Ç.–°—Å—ã–ª–∫–∞': '',
                        departmentName: '–í—ñ–¥–¥—ñ–ª —Ä–æ–∑–≤–∏—Ç–∫—É',
                        status: 'rescheduled',
                        scheduledDate: new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 1).toISOString()
                    },
                    {
                        taskId: 'demo-3',
                        ID: 'demo-3',
                        –î–∞—Ç–∞: new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 2).toISOString(),
                        '–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è': new Date().toISOString(),
                        –î–µ–ª–æ: '–î–µ–º–æ: –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó',
                        –ú–µ–Ω–µ–¥–∂–µ—Ä: '–ú–∞—Ä—ñ—è –ö–æ–≤–∞–ª–µ–Ω–∫–æ',
                        '–ö–ª–∏–µ–Ω—Ç.–ù–∞–∑–≤–∞–Ω–∏–µ': '–§–û–ü –î–µ–º—á–µ–Ω–∫–æ –ê.–í.',
                        '–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥': 'DEMO-003',
                        '–ö–ª–∏–µ–Ω—Ç.–°—Å—ã–ª–∫–∞': 'https://bitrix.lookfort.com/crm/company/details/demo3/',
                        departmentName: '–í—ñ–¥–¥—ñ–ª –ø—Ä–æ–¥–∞–∂—ñ–≤',
                        status: 'completed',
                        scheduledDate: new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 2).toISOString()
                    }
                ];
                
                logger.info(`üé≠ –î–æ–¥–∞–Ω–æ ${demoTasks.length} –¥–µ–º–æ-–∑–∞–≤–¥–∞–Ω—å`);
                return demoTasks;
        }
        
        return tasks;
                
    } catch (error) {
            logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∑ Firebase:', error);
        return [];
    }
}

/**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
     * @param {boolean} includeMonthFilter - –≤–∫–ª—é—á–∞—Ç—å –ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
     */
    _filterData(includeMonthFilter = false) {
        let filtered = this.calendarData;
        
        logger.info('üîç –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö...');
        logger.info('üìä –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ:', filtered.length);
        logger.info('üéõÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤:', {
            '–≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–¥–µ–ª': this.selectedDepartment,
            '–≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä': this.selectedManager,
            '–≤–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –º–µ—Å—è—Ü–∞': includeMonthFilter,
            '—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü': this.currentMonth,
            '—Ç–µ–∫—É—â–∏–π –≥–æ–¥': this.currentYear
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const currentUserPermissions = window.state?.currentUserPermissions || {};
        const currentUserId = window.state?.currentUserId;
        const currentEmployee = window.state?.allEmployees?.find(emp => emp.id === currentUserId);
        
        logger.info('üë§ –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:', currentEmployee?.name);
        logger.info('üîê –ü—Ä–∞–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', {
            'manager_calendar_view_all_tasks': currentUserPermissions['manager_calendar_view_all_tasks'],
            'manager_calendar_view_own_tasks': currentUserPermissions['manager_calendar_view_own_tasks'],
            'manager_calendar_view_department_tasks': currentUserPermissions['manager_calendar_view_department_tasks']
        });
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∞–≤–∞–º –¥–æ—Å—Ç—É–ø–∞
        const hasSpecificPermissions = currentUserPermissions['manager_calendar_view_own_tasks'] || 
                                     currentUserPermissions['manager_calendar_view_department_tasks'];
        
        if (hasSpecificPermissions && !currentUserPermissions['manager_calendar_view_all_tasks']) {
            if (currentUserPermissions['manager_calendar_view_own_tasks']) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏
                filtered = filtered.filter(item => 
                    item.–ú–µ–Ω–µ–¥–∂–µ—Ä === currentEmployee?.name
                );
                logger.info('üë§ –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ –≤–ª–∞—Å–Ω–∏–º –∑–∞–≤–¥–∞–Ω–Ω—è–º:', filtered.length);
            } else if (currentUserPermissions['manager_calendar_view_department_tasks']) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ —Å–≤–æ–µ–≥–æ –æ—Ç–¥–µ–ª–∞
                const userDepartment = currentEmployee?.department;
                if (userDepartment) {
                    filtered = filtered.filter(item => item.departmentName === userDepartment);
                }
                logger.info('üè¢ –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ –≤—ñ–¥–¥—ñ–ª—É:', filtered.length);
            }
    } else {
            logger.info('üåê –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è (—î –ø—Ä–∞–≤–∞ view_all_tasks –∞–±–æ –Ω–µ–º–∞—î –æ–±–º–µ–∂–µ–Ω—å)');
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–¥–µ–ª—É
        if (this.selectedDepartment) {
            const departmentName = this.departmentsData.find(d => d.id === this.selectedDepartment)?.name;
            if (departmentName) {
                filtered = filtered.filter(item => item.departmentName === departmentName);
                logger.info('üè¢ –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ –≤–∏–±—Ä–∞–Ω–æ–º—É –≤—ñ–¥–¥—ñ–ª—É:', filtered.length);
            }
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        if (this.selectedManager) {
            const managerName = this.managersData.find(m => m.id === this.selectedManager)?.name;
            if (managerName) {
                filtered = filtered.filter(item => item.–ú–µ–Ω–µ–¥–∂–µ—Ä === managerName);
                logger.info('üë§ –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É:', filtered.length);
            }
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—è—Ü—É (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
        if (includeMonthFilter) {
            filtered = filtered.filter(item => {
                if (!item.–î–∞—Ç–∞) return false;
                const taskDate = new Date(item.–î–∞—Ç–∞);
                return taskDate.getMonth() === this.currentMonth && taskDate.getFullYear() === this.currentYear;
            });
            logger.info('üìÖ –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ –ø–æ—Ç–æ—á–Ω–æ–º—É –º—ñ—Å—è—Ü—é:', filtered.length);
        }
        
        logger.info('üìä –§—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', filtered.length);
        return filtered;
    }
    
    /**
     * –ü–æ–∏—Å–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–µ–∂–¥—É API –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –≤ Firebase
     */
    _findChangedTasks(apiData, existingTasks) {
        const newTasks = [];
        const rescheduledTasks = [];
        const unchangedTasks = [];
        const completedTasks = []; // –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á
        
        logger.verbose(`üîç –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: ${apiData.length} API –∑–∞–≤–¥–∞–Ω—å –∑ ${existingTasks.length} Firebase –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏`);
        
        // –°–æ–∑–¥–∞–µ–º Set ID –∑–∞–¥–∞—á –∏–∑ API –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        const apiTaskIds = new Set(apiData.map(task => task.ID));
        
        for (const apiTask of apiData) {
            // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É –ø–æ ID
            const existingTask = existingTasks.find(task => task.taskId === apiTask.ID);
            
            if (!existingTask) {
                // –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞
                newTasks.push(apiTask);
            } else {
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å originalDate
                const isDateChanged = !this._compareDates(existingTask.originalDate, apiTask.–î–∞—Ç–∞);
                
                if (isDateChanged) {
                    // –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
                    rescheduledTasks.push({
                        old: existingTask,
                        new: apiTask
                    });
                    
                    logger.info(`üîÑ –ü–ï–†–ï–ù–ï–°–ï–ù–ê: ID=${apiTask.ID}, –°—Ç–∞—Ä–∞—è –¥–∞—Ç–∞=${existingTask.originalDate}, –ù–æ–≤–∞—è –¥–∞—Ç–∞=${apiTask.–î–∞—Ç–∞}`);
                } else {
                    // –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    unchangedTasks.push(apiTask);
                }
            }
        }
        
        // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ (–µ—Å—Ç—å –≤ Firebase, –Ω–æ –Ω–µ—Ç –≤ API)
        for (const existingTask of existingTasks) {
            if (!apiTaskIds.has(existingTask.taskId)) {
                completedTasks.push(existingTask);
            }
        }
        
        logger.info(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É: ${newTasks.length} –Ω–æ–≤–∏—Ö, ${rescheduledTasks.length} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏—Ö, ${unchangedTasks.length} –±–µ–∑ –∑–º—ñ–Ω, ${completedTasks.length} –∑–∞–∫—Ä—ã—Ç—ã—Ö`);
        
        return { newTasks, rescheduledTasks, unchangedTasks, completedTasks };
    }

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Firebase
 */
    async _saveOnlyChanges(newTasks, rescheduledTasks, completedTasks) {
        try {
            const companyId = window.state?.currentCompanyId;
            if (!companyId) {
                logger.error('‚ùå ID –∫–æ–º–ø–∞–Ω—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                return;
            }
            
            let savedCount = 0;
            const totalChanges = newTasks.length + rescheduledTasks.length + completedTasks.length;
            
            if (totalChanges === 0) {
                logger.info('üìù –ó–º—ñ–Ω –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                return;
            }
            
            logger.info(`üìù –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ${totalChanges} –∑–º—ñ–Ω...`);
            logger.info(`üÜï –ù–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å: ${newTasks.length}`);
            logger.info(`üîÑ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å: ${rescheduledTasks.length}`);
            logger.info(`‚úÖ –ó–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–≤–¥–∞–Ω—å: ${completedTasks.length}`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            for (const task of newTasks) {
                try {
                    const success = await this._saveTaskToFirebase(task);
                    if (success) {
                        savedCount++;
                    }
                } catch (error) {
                    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ:', task.ID, error);
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–£–î–ê–õ–Ø–ï–ú —Å—Ç–∞—Ä—É—é –∏ –°–û–ó–î–ê–ï–ú –Ω–æ–≤—É—é)
            for (const { old: oldTask, new: newTask } of rescheduledTasks) {
                try {
                    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
                    const oldTaskRef = firebase.doc(firebase.db, 'companies', companyId, 'managerCalendarTasks', oldTask.taskId);
                    await firebase.deleteDoc(oldTaskRef);
                    logger.info(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞: ID=${oldTask.taskId}, –î–∞—Ç–∞=${oldTask.originalDate}`);
                    
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    const success = await this._saveTaskToFirebase(newTask);
                    if (success) {
                        savedCount++;
                        logger.info(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: ID=${newTask.ID}, –î–∞—Ç–∞=${newTask.–î–∞—Ç–∞}`);
                    }
                } catch (error) {
                    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ—ó –∑–∞–¥–∞—á—ñ:', newTask.ID, error);
                }
            }
            
            // –î–û–ë–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏
            for (const completedTask of completedTasks) {
                try {
                    const taskRef = firebase.doc(firebase.db, 'companies', companyId, 'managerCalendarTasks', completedTask.taskId);
                    await firebase.updateDoc(taskRef, {
                        status: 'completed',
                        lastUpdated: firebase.serverTimestamp()
                    });
                    savedCount++;
                } catch (error) {
                    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏:', completedTask.taskId, error);
                }
            }
            
            logger.info(`‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ ${savedCount}/${totalChanges} –∑–º—ñ–Ω`);
            
        } catch (error) {
            logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω:', error);
        }
    }

/**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Firebase
     */
    async _saveTaskToFirebase(taskData) {
        try {
            const companyId = window.state?.currentCompanyId;
            if (!companyId) {
                logger.error('‚ùå ID –∫–æ–º–ø–∞–Ω—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            const userPermissions = window.state?.currentUserPermissions || {};
            const hasPermission = userPermissions['manager_calendar_manage_tasks'] || 
                                userPermissions['manager_calendar_view_page'] ||
                                window.state?.currentUserRole === 'owner';
            
            if (!hasPermission) {
                logger.error('‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å');
                return false;
            }
            
            const taskId = taskData.ID;
            const taskRef = firebase.doc(firebase.db, 'companies', companyId, 'managerCalendarTasks', taskId);
            const existingTask = await firebase.getDoc(taskRef);
            
            const managerInfo = this._findManagerDepartment(taskData.–ú–µ–Ω–µ–¥–∂–µ—Ä);
            
            const taskDoc = {
                taskId: taskId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–∫ taskId –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                managerId: managerInfo?.managerId || null,
                managerName: taskData.–ú–µ–Ω–µ–¥–∂–µ—Ä,
                departmentId: managerInfo?.departmentId || null,
                departmentName: managerInfo?.departmentName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–¥–µ–ª',
                clientName: taskData['–ö–ª–∏–µ–Ω—Ç.–ù–∞–∑–≤–∞–Ω–∏–µ'],
                clientCode: taskData['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'],
                clientLink: taskData['–ö–ª–∏–µ–Ω—Ç.–°—Å—ã–ª–∫–∞'],
                taskDescription: taskData.–î–µ–ª–æ,
                originalDate: taskData.–î–∞—Ç–∞, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ originalDate
                modifiedDate: taskData['–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è'],
                status: this._determineTaskStatus(existingTask, taskData),
                lastUpdated: firebase.serverTimestamp(),
                companyId: companyId
            };
            
            await firebase.setDoc(taskRef, taskDoc);
            return true;
            
        } catch (error) {
            logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ –≤ Firebase:', error);
            return false;
        }
    }

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
 */
    _renderCalendar() {
        this._updateAutoUpdateStatus('–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...', 'text-blue-600');
        logger.info('üìÖ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...');
        
        try {
            // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∑–¥–µ—Å—å - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö!
            // this._updateFilters(); ‚Üê –£–ë–†–ê–ù–û
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –º–µ—Å—è—Ü–∞)
            const filteredData = this._filterData(false);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å —Ñ–∏–ª—å—Ç—Ä–æ–º –º–µ—Å—è—Ü–∞)
            const statisticsData = this._filterData(true);
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (logger.isDebugMode()) {
                console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–ù–ù–´–•:');
                console.log('üì¶ –í—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:', this.calendarData.length);
                console.log('üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è):', filteredData.length);
                console.log('üìà –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ + –º–µ—Å—è—Ü):', statisticsData.length);
                console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:', {
                    '–Ω–æ–≤—ã–µ': statisticsData.filter(task => task.status === 'new' || !task.status).length,
                    '–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–µ': statisticsData.filter(task => task.status === 'rescheduled').length,
                    '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ': statisticsData.filter(task => task.status === 'completed').length
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ –º–µ—Å—è—Ü—É
            this._updateStatistics({
                totalTasks: statisticsData.length, // ‚Üê –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                newTasks: statisticsData.filter(task => task.status === 'new' || !task.status).length,
                rescheduledTasks: statisticsData.filter(task => task.status === 'rescheduled').length,
                completedTasks: statisticsData.filter(task => task.status === 'completed').length
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
            this._updateCurrentMonthDisplay();
            
            // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é —Å–µ—Ç–∫—É
            this._renderCalendarGrid(filteredData);
            
            this._updateAutoUpdateStatus('–ö–∞–ª–µ–Ω–¥–∞—Ä –≥–æ—Ç–æ–≤–∏–π', 'text-green-600');
            logger.info('‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä –≤—ñ–¥—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ');
            
        } catch (error) {
            logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error);
            this._updateAutoUpdateStatus('–ü–æ–º–∏–ª–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É', 'text-red-600');
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞
     */
    _getMonthName(monthIndex) {
        const monthNames = ['–°—ñ—á–µ–Ω—å', '–õ—é—Ç–∏–π', '–ë–µ—Ä–µ–∑–µ–Ω—å', '–ö–≤—ñ—Ç–µ–Ω—å', '–¢—Ä–∞–≤–µ–Ω—å', '–ß–µ—Ä–≤–µ–Ω—å',
                          '–õ–∏–ø–µ–Ω—å', '–°–µ—Ä–ø–µ–Ω—å', '–í–µ—Ä–µ—Å–µ–Ω—å', '–ñ–æ–≤—Ç–µ–Ω—å', '–õ–∏—Å—Ç–æ–ø–∞–¥', '–ì—Ä—É–¥–µ–Ω—å'];
        return monthNames[monthIndex];
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
     */
    _getStatusColor(status) {
        switch (status) {
            case 'completed': 
            case '–≤–∏–∫–æ–Ω–∞–Ω–∏–π': 
                return 'bg-green-500 text-white';
            case 'new': 
            case '–Ω–æ–≤–∏–π': 
                return 'bg-blue-500 text-white';
            case 'rescheduled': 
            case '–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏–π': 
                return 'bg-yellow-500 text-black';
            case 'cancelled': 
            case '—Å–∫–∞—Å–æ–≤–∞–Ω–∏–π': 
                return 'bg-red-500 text-white';
            default: 
                return 'bg-gray-500 text-white';
        }
    }
    
    _startAutoUpdate() {
        if (!this.autoUpdateInterval) {
            this.autoUpdateInterval = setInterval(() => {
                this._checkForUpdates();
            }, this.AUTO_UPDATE_INTERVAL);
            this._updateAutoUpdateStatus('–ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ', 'text-green-600');
        }
    }
    
    _stopAutoUpdate() {
        if (this.autoUpdateInterval) {
            clearInterval(this.autoUpdateInterval);
            this.autoUpdateInterval = null;
            this._updateAutoUpdateStatus('–ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ', 'text-red-600');
        }
    }
    
    _toggleAutoUpdate() {
        if (this.autoUpdateInterval) {
            this._stopAutoUpdate();
        } else {
            this._startAutoUpdate();
        }
    }
    
    _changeMonth(direction) {
        const oldMonth = this.currentMonth;
        const oldYear = this.currentYear;
        
        this.currentMonth += direction;
        if (this.currentMonth > 11) {
            this.currentMonth = 0;
            this.currentYear++;
        } else if (this.currentMonth < 0) {
            this.currentMonth = 11;
            this.currentYear--;
        }
        
        if (logger.isDebugMode()) {
            const monthNames = ['–°—ñ—á–µ–Ω—å', '–õ—é—Ç–∏–π', '–ë–µ—Ä–µ–∑–µ–Ω—å', '–ö–≤—ñ—Ç–µ–Ω—å', '–¢—Ä–∞–≤–µ–Ω—å', '–ß–µ—Ä–≤–µ–Ω—å',
                              '–õ–∏–ø–µ–Ω—å', '–°–µ—Ä–ø–µ–Ω—å', '–í–µ—Ä–µ—Å–µ–Ω—å', '–ñ–æ–≤—Ç–µ–Ω—å', '–õ–∏—Å—Ç–æ–ø–∞–¥', '–ì—Ä—É–¥–µ–Ω—å'];
            console.log('üìÖ –ó–º—ñ–Ω–∞ –º—ñ—Å—è—Ü—è:', {
                '–æ—Ç': `${monthNames[oldMonth]} ${oldYear}`,
                '–∫': `${monthNames[this.currentMonth]} ${this.currentYear}`,
                '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': direction > 0 ? '–≤–ø–µ—Ä–µ–¥' : '–Ω–∞–∑–∞–¥'
            });
        }
        
        this._updateCurrentMonthDisplay();
        this._renderCalendar(); // ‚Üê –≠—Ç–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞
    }
    
    _updateCurrentMonthDisplay() {
        if (this.elements.currentMonth) {
            const monthNames = ['–°—ñ—á–µ–Ω—å', '–õ—é—Ç–∏–π', '–ë–µ—Ä–µ–∑–µ–Ω—å', '–ö–≤—ñ—Ç–µ–Ω—å', '–¢—Ä–∞–≤–µ–Ω—å', '–ß–µ—Ä–≤–µ–Ω—å',
                              '–õ–∏–ø–µ–Ω—å', '–°–µ—Ä–ø–µ–Ω—å', '–í–µ—Ä–µ—Å–µ–Ω—å', '–ñ–æ–≤—Ç–µ–Ω—å', '–õ–∏—Å—Ç–æ–ø–∞–¥', '–ì—Ä—É–¥–µ–Ω—å'];
            this.elements.currentMonth.textContent = `${monthNames[this.currentMonth]} ${this.currentYear}`;
        }
    }
    
    _refreshData() {
        this._loadData().then(() => this._renderCalendar());
    }
    
    _checkForUpdates() {
        if (this.isUpdateInProgress) {
            logger.verbose('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }
        
        logger.verbose('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è...');
        this.isUpdateInProgress = true;
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        this._loadData()
            .then(() => {
                this._renderCalendar();
                this.lastUpdateTime = Date.now();
                this._updateAutoUpdateStatus('–ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–µ', 'text-green-600');
            })
            .catch(error => {
                logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
                this._updateAutoUpdateStatus('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è', 'text-red-600');
            })
            .finally(() => {
                this.isUpdateInProgress = false;
            });
    }
    
    _renderAccessDenied() {
        this.container.innerHTML = `
            <div class="bg-red-900/20 border border-red-500 rounded-xl p-8 text-center">
                <h2 class="text-2xl font-bold text-white mb-4">–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ</h2>
                <p class="text-red-200">–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.</p>
            </div>
        `;
    }
    
    _renderError(message) {
        this.container.innerHTML = `
            <div class="bg-red-900/20 border border-red-500 rounded-xl p-8 text-center">
                <h2 class="text-2xl font-bold text-white mb-4">–ü–æ–º–∏–ª–∫–∞</h2>
                <p class="text-red-200">${message}</p>
                <button onclick="location.reload()" class="mt-4 px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700">
                    –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑
                </button>
            </div>
        `;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    _updateFilters() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤
        if (this.elements.departmentFilter) {
            const currentDepartment = this.selectedDepartment; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
            this.elements.departmentFilter.innerHTML = '<option value="">–í—Å—ñ –≤—ñ–¥–¥—ñ–ª–∏</option>';
            this.departmentsData.forEach(dept => {
        const option = document.createElement('option');
                option.value = dept.id || dept.name; // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                option.textContent = dept.name || dept;
                this.elements.departmentFilter.appendChild(option);
            });
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if (currentDepartment) {
                this.elements.departmentFilter.value = currentDepartment;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        if (this.elements.managerFilter) {
            const currentManager = this.selectedManager; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
            this.elements.managerFilter.innerHTML = '<option value="">–í—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏</option>';
            this.managersData.forEach(manager => {
            const option = document.createElement('option');
                option.value = manager.id || manager.name; // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                option.textContent = manager.name || manager;
                this.elements.managerFilter.appendChild(option);
            });
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if (currentManager) {
                this.elements.managerFilter.value = currentManager;
            }
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (logger.isDebugMode()) {
            console.log('üîÑ –§–∏–ª—å—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
                '–æ—Ç–¥–µ–ª—ã': this.departmentsData.length,
                '–º–µ–Ω–µ–¥–∂–µ—Ä—ã': this.managersData.length,
                '–≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–¥–µ–ª': this.selectedDepartment,
                '–≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä': this.selectedManager
            });
        }
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å)
     */
    _renderCalendarGrid(data) {
        if (!this.elements.content) return;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é —Å–µ—Ç–∫—É –¥–Ω–µ–π
        const days = this._generateCalendarDays();
        
        this.elements.content.innerHTML = `
        <div class="bg-white rounded-lg shadow overflow-hidden">
            <!-- –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ -->
            <div class="grid grid-cols-7 bg-gray-50 border-b">
                <div class="p-3 text-center text-sm font-medium text-gray-500">–ù–µ–¥</div>
                <div class="p-3 text-center text-sm font-medium text-gray-500">–ü–æ–Ω</div>
                <div class="p-3 text-center text-sm font-medium text-gray-500">–í—ñ–≤</div>
                <div class="p-3 text-center text-sm font-medium text-gray-500">–°–µ—Ä</div>
                <div class="p-3 text-center text-sm font-medium text-gray-500">–ß–µ—Ç</div>
                <div class="p-3 text-center text-sm font-medium text-gray-500">–ü'—è—Ç</div>
                <div class="p-3 text-center text-sm font-medium text-gray-500">–°—É–±</div>
            </div>
            
                <!-- –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ -->
            <div class="grid grid-cols-7">
                    ${days.map(day => this._renderCalendarDay(day, data)).join('')}
            </div>
        </div>
    `;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–Ω–µ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è (42 –¥–Ω—è - 6 –Ω–µ–¥–µ–ª—å)
     */
    _generateCalendarDays() {
        const firstDay = new Date(this.currentYear, this.currentMonth, 1);
        const lastDay = new Date(this.currentYear, this.currentMonth + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());
    
    const days = [];
    const currentDate = new Date(startDate);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–æ–≤–Ω–æ 6 –Ω–µ–¥–µ–ª—å (42 –¥–Ω—è) –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏
    for (let i = 0; i < 42; i++) {
        days.push(new Date(currentDate));
        currentDate.setDate(currentDate.getDate() + 1);
    }
    
        logger.verbose('üìÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –¥–Ω—ñ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', days.length);
    return days;
}

/**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –¥–Ω—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
 */
    _renderCalendarDay(date, filteredData) {
        const isCurrentMonth = date.getMonth() === this.currentMonth;
        const isToday = date.toDateString() === new Date().toDateString();
        
        const dayData = filteredData.filter(item => {
            const itemDate = new Date(item.–î–∞—Ç–∞);
            return itemDate.toDateString() === date.toDateString();
        });
        
        const taskCount = dayData.length;
        const uniqueManagers = new Set(dayData.map(item => item.–ú–µ–Ω–µ–¥–∂–µ—Ä)).size;
        const uniqueClients = new Set(dayData.map(item => item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'])).size;
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á
        const newTasksCount = dayData.filter(item => item.status === 'new').length;
        const rescheduledTasksCount = dayData.filter(item => item.status === 'rescheduled').length;
        const completedTasksCount = dayData.filter(item => item.status === 'completed').length;
        const activeTasksCount = dayData.filter(item => !item.status || item.status === 'active').length;
        
        let backgroundColor = 'bg-white';
        let textColor = 'text-gray-900';
        let statusIndicator = '';
        
        if (taskCount > 0) {
            if (taskCount >= 10) {
                backgroundColor = 'bg-red-100';
                textColor = 'text-red-800';
            } else if (taskCount >= 5) {
                backgroundColor = 'bg-yellow-100';
                textColor = 'text-yellow-800';
            } else {
                backgroundColor = 'bg-green-100';
                textColor = 'text-green-800';
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞
            if (newTasksCount > 0) {
                statusIndicator += `<div class="inline-block w-2 h-2 bg-green-500 rounded-full mr-1" title="–ù–æ–≤—ñ: ${newTasksCount}"></div>`;
            }
            if (rescheduledTasksCount > 0) {
                statusIndicator += `<div class="inline-block w-2 h-2 bg-yellow-500 rounded-full mr-1" title="–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω—ñ: ${rescheduledTasksCount}"></div>`;
            }
            if (completedTasksCount > 0) {
                statusIndicator += `<div class="inline-block w-2 h-2 bg-red-500 rounded-full mr-1" title="–ó–∞–∫—Ä–∏—Ç—ñ: ${completedTasksCount}"></div>`;
            }
        }
        
        if (!isCurrentMonth) {
            backgroundColor = 'bg-gray-50';
            textColor = 'text-gray-400';
        }
        
        if (isToday) {
            backgroundColor = 'bg-blue-100';
            textColor = 'text-blue-800';
        }
        
        return `
            <div class="${backgroundColor} p-2 min-h-[100px] cursor-pointer hover:bg-gray-50 transition-colors border-r border-b border-gray-200"
                 onclick="window.managerCalendarInstance?._showDayDetails('${date.toISOString()}', ${taskCount})">
                <div class="text-sm ${textColor} font-medium mb-1">
                    ${date.getDate()}
                </div>
                ${taskCount > 0 ? `
                    <div class="text-xs ${textColor}">
                        <div class="font-medium">${taskCount} —Å–ø—Ä–∞–≤</div>
                        ${newTasksCount > 0 ? `<div class="text-green-600">üÜï ${newTasksCount} –Ω–æ–≤–∏—Ö</div>` : ''}
                        ${rescheduledTasksCount > 0 ? `<div class="text-yellow-600">üîÑ ${rescheduledTasksCount} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏—Ö</div>` : ''}
                        ${completedTasksCount > 0 ? `<div class="text-red-600">‚úÖ ${completedTasksCount} –∑–∞–∫—Ä–∏—Ç–∏—Ö</div>` : ''}
                        <div class="text-xs opacity-75">${uniqueManagers} –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤</div>
                        <div class="text-xs opacity-75">${uniqueClients} –∫–ª—ñ—î–Ω—Ç—ñ–≤</div>
                        ${statusIndicator ? `<div class="mt-1">${statusIndicator}</div>` : ''}
                    </div>
                ` : ''}
            </div>
        `;
    }

/**
     * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–Ω—è (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
 */
    _showDayDetails(dateString, taskCount) {
    if (taskCount === 0) return;
    
        logger.info('üìÖ –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–ª—è:', dateString, '–∑–∞–≤–¥–∞–Ω—å:', taskCount);
    
    const date = new Date(dateString);
        const dayData = this._filterData().filter(item => {
            const itemDate = new Date(item.–î–∞—Ç–∞);
        return itemDate.toDateString() === date.toDateString();
    });
    
        logger.info('üìä –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –¥–Ω—è:', dayData.length);
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–¥–∞—á
    const groupedByStatus = {
        new: [],
        rescheduled: [],
        completed: [],
        active: []
    };
    
    dayData.forEach(item => {
        const status = item.status || 'active';
        if (groupedByStatus[status]) {
            groupedByStatus[status].push(item);
        } else {
            groupedByStatus.active.push(item);
        }
    });
    
    let contentHTML = '';
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    if (groupedByStatus.new.length > 0) {
        contentHTML += `
            <div class="mb-6">
                <details class="group" open>
                    <summary class="text-lg font-bold text-green-700 mb-3 flex items-center cursor-pointer hover:text-green-600">
                        <span class="mr-2">üÜï</span> –ù–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è (${groupedByStatus.new.length})
                        <svg class="w-5 h-5 ml-auto transform group-open:rotate-180 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                    </summary>
                        ${this._renderTasksByManager(groupedByStatus.new)}
                </details>
            </div>
        `;
    }
    
    // –ó–∞—Ç–µ–º –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    if (groupedByStatus.rescheduled.length > 0) {
        contentHTML += `
            <div class="mb-6">
                <details class="group" open>
                    <summary class="text-lg font-bold text-yellow-700 mb-3 flex items-center cursor-pointer hover:text-yellow-600">
                        <span class="mr-2">üîÑ</span> –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è (${groupedByStatus.rescheduled.length})
                        <svg class="w-5 h-5 ml-auto transform group-open:rotate-180 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                    </summary>
                        ${this._renderTasksByManager(groupedByStatus.rescheduled)}
                </details>
            </div>
        `;
    }
    
    // –ó–∞—Ç–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏
    if (groupedByStatus.completed.length > 0) {
        contentHTML += `
            <div class="mb-6">
                <details class="group" open>
                    <summary class="text-lg font-bold text-red-700 mb-3 flex items-center cursor-pointer hover:text-red-600">
                        <span class="mr-2">‚úÖ</span> –ó–∞–∫—Ä–∏—Ç—ñ –∑–∞–≤–¥–∞–Ω–Ω—è (${groupedByStatus.completed.length})
                        <svg class="w-5 h-5 ml-auto transform group-open:rotate-180 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                    </summary>
                        ${this._renderTasksByManager(groupedByStatus.completed)}
                </details>
            </div>
        `;
    }
    
    // –ò –Ω–∞–∫–æ–Ω–µ—Ü –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    if (groupedByStatus.active.length > 0) {
        contentHTML += `
            <div class="mb-6">
                    <details class="group" ${groupedByStatus.new.length === 0 && groupedByStatus.rescheduled.length === 0 && groupedByStatus.completed.length === 0 ? 'open' : ''}>
                    <summary class="text-lg font-bold text-blue-700 mb-3 flex items-center cursor-pointer hover:text-blue-600">
                        <span class="mr-2">üìã</span> –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è (${groupedByStatus.active.length})
                        <svg class="w-5 h-5 ml-auto transform group-open:rotate-180 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                    </summary>
                        ${this._renderTasksByManager(groupedByStatus.active)}
                </details>
            </div>
        `;
    }
    
        const modalContent = `
            <div class="bg-white rounded-lg max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
                <div class="p-6 border-b">
                    <div class="flex justify-between items-center">
                        <h2 class="text-xl font-bold text-gray-800">
                            üìÖ ${date.toLocaleDateString('uk-UA', { 
                                weekday: 'long', 
                                year: 'numeric', 
                                month: 'long', 
                                day: 'numeric' 
                            })}
                        </h2>
                        <button onclick="window.managerCalendarInstance?._hideModal()" 
                                class="text-gray-400 hover:text-gray-600 text-2xl">&times;</button>
            </div>
                    <p class="text-gray-600 mt-1">–í—Å—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω—å: ${dayData.length}</p>
                </div>
                
                <div class="p-6">
                    ${contentHTML}
                </div>
        </div>
    `;
    
        this._showModal('', modalContent);
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
 */
    _renderTasksByManager(tasks) {
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    const groupedByManager = {};
    tasks.forEach(item => {
            const manager = item.–ú–µ–Ω–µ–¥–∂–µ—Ä;
        if (!groupedByManager[manager]) {
            groupedByManager[manager] = [];
        }
        groupedByManager[manager].push(item);
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    Object.keys(groupedByManager).forEach(manager => {
        groupedByManager[manager].sort((a, b) => {
                const timeA = new Date(a.–î–∞—Ç–∞).getTime();
                const timeB = new Date(b.–î–∞—Ç–∞).getTime();
            return timeA - timeB;
        });
    });
    
    let managerHTML = '';
    
    Object.keys(groupedByManager).forEach(manager => {
        const managerTasks = groupedByManager[manager];
        const uniqueClients = new Set(managerTasks.map(task => task['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'])).size;
        
        managerHTML += `
            <div class="mb-4 border-l-4 border-gray-300 pl-4">
                <details class="group">
                    <summary class="font-semibold text-gray-800 mb-2 flex items-center cursor-pointer hover:text-gray-600">
                        <span class="mr-2">üë§</span> ${manager} (${managerTasks.length} –∑–∞–≤–¥–∞–Ω—å, ${uniqueClients} –∫–ª—ñ—î–Ω—Ç—ñ–≤)
                        <svg class="w-4 h-4 ml-auto transform group-open:rotate-180 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                    </summary>
                    <div class="space-y-2 ml-4">
        `;
        
        managerTasks.forEach(task => {
            const taskTime = new Date(task.–î–∞—Ç–∞).toLocaleTimeString('uk-UA', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            let statusClass = 'border-l-4 border-gray-300';
            let statusText = '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞';
            
            if (task.status === 'new') {
                statusClass = 'border-l-4 border-green-500';
                statusText = 'üÜï –ù–æ–≤–∞';
            } else if (task.status === 'rescheduled') {
                statusClass = 'border-l-4 border-yellow-500';
                statusText = 'üîÑ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞';
            } else if (task.status === 'completed') {
                statusClass = 'border-l-4 border-red-500';
                statusText = '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞';
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ CRM –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
            const clientCode = task['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'];
            const clientName = task['–ö–ª–∏–µ–Ω—Ç.–ù–∞–∑–≤–∞–Ω–∏–µ'];
            const crmLink = this._getClientCrmLink(clientCode, clientName);
            
            const crmButton = crmLink ? 
                `<a href="${crmLink}" target="_blank" 
                     class="inline-flex items-center px-3 py-1 bg-blue-500 text-white text-sm rounded-lg hover:bg-blue-600 transition-colors ml-2">
                     <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z"/>
                    <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z"/>
                </svg>
                     –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ CRM
            </a>` : 
                 `<span class="inline-flex items-center px-3 py-1 bg-gray-300 text-gray-600 text-sm rounded-lg ml-2">
                     <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                         <path d="M18.364 5.636l-3.536 3.536m0 0L11.292 5.636m3.536 3.536L9.172 14.828"/>
                     </svg>
                     CRM –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
                </span>`;
            
            managerHTML += `
                <div class="${statusClass} pl-3 py-2 bg-white rounded-lg shadow-sm">
                    <div class="flex items-start justify-between">
                        <div class="flex-1">
                            <div class="flex items-center mb-1">
                                <span class="text-sm font-medium text-gray-900">${taskTime}</span>
                                <span class="ml-2 text-xs px-2 py-1 rounded-full ${statusText.includes('–ù–æ–≤–∞') ? 'bg-green-100 text-green-800' : statusText.includes('–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞') ? 'bg-yellow-100 text-yellow-800' : statusText.includes('–ó–∞–≤–µ—Ä—à–µ–Ω–∞') ? 'bg-red-100 text-red-800' : 'bg-gray-100 text-gray-800'}">${statusText}</span>
                                <span class="ml-2 text-xs text-gray-500">ID: ${task.ID}</span>
                            </div>
                            <div class="text-sm font-medium text-gray-800 mb-1">${task.–î–µ–ª–æ}</div>
                            <div class="text-sm text-gray-600">${task['–ö–ª–∏–µ–Ω—Ç.–ù–∞–∑–≤–∞–Ω–∏–µ']} (${task['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥']})</div>
                        </div>
                        <div class="ml-4">
                            ${crmButton}
                        </div>
                    </div>
                </div>
            `;
        });
        
        managerHTML += `
                    </div>
                </details>
            </div>
        `;
    });
    
    return managerHTML;
}

/**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è CRM —Å—Å—ã–ª–æ–∫
     */
    async _loadClientLinks() {
        logger.info('üîó –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤...');
        
        try {
            const response = await fetch('https://fastapi.lookfort.com/nomenclature.analysis?mode=company_url');
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            logger.info('üîó –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω:', Array.isArray(data) ? `${data.length} –∑–∞–ø–∏—Å–µ–π` : typeof data);
            
            if (Array.isArray(data) && data.length > 0) {
                // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–∏—Å–∫–∞ - –∏ –ø–æ –∫–æ–¥—É, –∏ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
                this.clientLinks = {};
                this.clientLinksByName = {};
                
                data.forEach(item => {
                    const clientCode = item['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'];
                    const clientName = item['–ö–ª–∏–µ–Ω—Ç.–ù–∞–∑–≤–∞–Ω–∏–µ'];
                    const clientLink = item['–ø–æ—Å–∏–ª–∞–Ω–Ω—è'];
                    
                    if (clientLink) {
                        // –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É –∫–ª–∏–µ–Ω—Ç–∞
                        if (clientCode) {
                            this.clientLinks[clientCode] = clientLink;
                        }
                        
                        // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
                        if (clientName) {
                            this.clientLinksByName[clientName] = clientLink;
                        }
                    }
                });
                
                logger.info(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ CRM —Å—Å—ã–ª–æ–∫: ${Object.keys(this.clientLinks).length} –ø–æ –∫–æ–¥–∞–º, ${Object.keys(this.clientLinksByName).length} –ø–æ –∏–º–µ–Ω–∞–º`);
                
                if (logger.isDebugMode()) {
                    console.log('üîó –ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫ –ø–æ –∫–æ–¥–∞–º:', Object.entries(this.clientLinks).slice(0, 3));
                    console.log('üîó –ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫ –ø–æ –∏–º–µ–Ω–∞–º:', Object.entries(this.clientLinksByName).slice(0, 3));
                }
        } else {
                logger.warn('‚ö†Ô∏è –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
                this.clientLinks = {};
                this.clientLinksByName = {};
            }
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
            this.clientLinks = {};
            this.clientLinksByName = {};
        }
    }

/**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ CRM —Å—Å—ã–ª–∫–∏ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –∫–æ–¥—É –∫–ª–∏–µ–Ω—Ç–∞
     */
    _getClientCrmLink(clientCode, clientName) {
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
        if (clientName && this.clientLinksByName[clientName]) {
            return this.clientLinksByName[clientName];
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∏–º–µ–Ω–∏, –∏—â–µ–º –ø–æ –∫–æ–¥—É
        if (clientCode && this.clientLinks[clientCode]) {
            return this.clientLinks[clientCode];
        }
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        return null;
    }
    
    /**
     * –ü–æ–∏—Å–∫ –æ—Ç–¥–µ–ª–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
     */
    _findManagerDepartment(managerName) {
        if (!managerName) return null;
        
        // –ò—â–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
        const manager = this.managersData.find(mgr => 
            mgr.name === managerName || mgr.id === managerName
        );
        
        if (manager) {
            // –ò—â–µ–º –æ—Ç–¥–µ–ª –ø–æ ID –æ—Ç–¥–µ–ª–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            let departmentName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–¥–µ–ª';
            let departmentId = null;
            
            if (manager.department) {
                // –ï—Å–ª–∏ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –µ—Å—Ç—å ID –æ—Ç–¥–µ–ª–∞, –∏—â–µ–º –æ—Ç–¥–µ–ª –ø–æ —ç—Ç–æ–º—É ID
                const department = this.departmentsData.find(dept => 
                    dept.id === manager.department || dept.name === manager.department
                );
                
                if (department) {
                    departmentName = department.name;
                    departmentId = department.id;
                }
            }
            
            return {
                managerId: manager.id,
                managerName: manager.name,
                departmentName: departmentName,
                departmentId: departmentId
            };
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        return {
            managerId: null,
            managerName: managerName,
            departmentName: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–¥–µ–ª',
            departmentId: null
        };
    }
    
    /**
     * –ü–æ–∏—Å–∫ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
     */
    _findManagerIdByName(managerName) {
        if (!managerName) return null;
        
        const manager = this.managersData.find(mgr => 
            mgr.name === managerName || mgr.id === managerName
        );
        
        return manager ? manager.id : null;
    }
    
    /**
     * –ü–æ–∏—Å–∫ ID –æ—Ç–¥–µ–ª–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     */
    _findDepartmentIdByName(departmentName) {
        if (!departmentName) return null;
        
        const department = this.departmentsData.find(dept => 
            dept.name === departmentName || dept.id === departmentName
        );
        
        return department ? department.id : null;
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
     */
    _determineTaskStatus(existingTask, newTaskData) {
        if (!existingTask.exists()) {
            return 'new';
        }
        
        const existingData = existingTask.data();
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å originalDate, –∞ –Ω–µ —Å scheduledDate
        const isDateChanged = !this._compareDates(existingData.originalDate, newTaskData.–î–∞—Ç–∞);
        
        if (isDateChanged) {
            return 'rescheduled';
        }
        
        return existingData.status || 'active';
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏)
     */
    _normalizeDate(dateString) {
        if (!dateString) return null;
        
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ (—Å T –∏ Z), –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (dateString.includes('T') && dateString.includes('Z')) {
            return new Date(dateString);
        }
        
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD HH:mm:ss" (–±–µ–∑ T –∏ Z)
        if (dateString.includes(' ') && !dateString.includes('T')) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            const [datePart, timePart] = dateString.split(' ');
            const [year, month, day] = datePart.split('-');
            const [hour, minute, second] = timePart.split(':');
            
            // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            return new Date(parseInt(year), parseInt(month) - 1, parseInt(day), 
                          parseInt(hour), parseInt(minute), parseInt(second));
        }
        
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        return new Date(dateString);
    }
    
    /**
     * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –¥–∞—Ç—ã —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
     */
    _compareDates(date1, date2, toleranceMinutes = 1) {
        if (!date1 || !date2) return false;
        
        const normalized1 = this._normalizeDate(date1);
        const normalized2 = this._normalizeDate(date2);
        
        if (!normalized1 || !normalized2) return false;
        
        const diffMs = Math.abs(normalized1.getTime() - normalized2.getTime());
        const diffMinutes = diffMs / (1000 * 60);
        
        return diffMinutes <= toleranceMinutes;
    }
}

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ===

// –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è
let managerCalendarInstance = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */
window.initManagerCalendarModule = async function(container) {
    logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
    
    // –ï—Å–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä —É–∂–µ –µ—Å—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    if (managerCalendarInstance) {
        if (managerCalendarInstance.isFrozen) {
            logger.info('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–∑ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
            await managerCalendarInstance.init(container); // –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        } else if (!managerCalendarInstance.isInitialized) {
            logger.info('üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞');
            await managerCalendarInstance.init(container);
    } else {
            logger.info('‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
    } else {
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        logger.info('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
        managerCalendarInstance = new ManagerCalendar();
        window.managerCalendarInstance = managerCalendarInstance;
        await managerCalendarInstance.init(container);
    }
};

/**
 * –û—á–∏—Å—Ç–∫–∞ –º–æ–¥—É–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–º–æ—Ä–æ–∑–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
 */
window.cleanupManagerCalendarModule = function() {
    logger.info('‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∫–∞ –º–æ–¥—É–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)');
    
    if (managerCalendarInstance) {
        managerCalendarInstance.freeze(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–º–æ—Ä–æ–∑–∫—É –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    }
};

/**
 * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–æ–¥—É–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
 */
window.destroyManagerCalendarModule = function() {
    logger.info('üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–æ–¥—É–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
    
    if (managerCalendarInstance) {
        managerCalendarInstance.cleanup();
        managerCalendarInstance = null;
        window.managerCalendarInstance = null;
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ ES –º–æ–¥—É–ª—å
export { ManagerCalendar };
export const initManagerCalendarModule = window.initManagerCalendarModule;
export const cleanupManagerCalendarModule = window.cleanupManagerCalendarModule;