// massAssignment.js - –ü—ñ–¥–º–æ–¥—É–ª—å –º–∞—Å–æ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤
import * as firebase from '../firebase.js';
import { getState, updateState } from './state.js';

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –º–∞—Å–æ–≤–∏—Ö –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å
 */
function loadMassAssignmentHistory() {
    console.log('üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –º–∞—Å–æ–≤–∏—Ö –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å...');
    
    const historyContainer = document.getElementById('massAssignmentHistory');
    if (!historyContainer) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —ñ—Å—Ç–æ—Ä—ñ—ó –º–∞—Å–æ–≤–∏—Ö –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é
    const filteredHistory = getFilteredMassAssignmentHistory();
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫
    historyContainer.innerHTML = renderMassAssignmentHistory(filteredHistory);
    
    console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${filteredHistory.length} –∑–∞–ø–∏—Å—ñ–≤ —ñ—Å—Ç–æ—Ä—ñ—ó`);
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó –º–∞—Å–æ–≤–∏—Ö –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å
 */
function getFilteredMassAssignmentHistory() {
    const allHistory = getState().planFactData?.massAssignmentHistory || [];
    const monthFilter = document.getElementById('massAssignmentMonth')?.value;
    const departmentFilter = document.getElementById('massAssignmentDepartment')?.value;
    const statusFilter = document.getElementById('massAssignmentStatus')?.value;
    
    return allHistory.filter(record => {
        if (monthFilter && record.month !== monthFilter) {
            return false;
        }
        if (departmentFilter && record.departmentId !== departmentFilter) {
            return false;
        }
        if (statusFilter && record.status !== statusFilter) {
            return false;
        }
        return true;
    });
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —ñ—Å—Ç–æ—Ä—ñ—ó –º–∞—Å–æ–≤–∏—Ö –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å
 */
function renderMassAssignmentHistory(history = null) {
    // –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è, –ø–æ–ª—É—á–∞–µ–º –µ—ë –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (!history) {
        history = getFilteredMassAssignmentHistory();
    }
    
    if (history.length === 0) {
        return `
            <div class="text-center py-8 text-gray-400">
                <p>–ù–µ–º–∞—î —ñ—Å—Ç–æ—Ä—ñ—ó –º–∞—Å–æ–≤–∏—Ö –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å</p>
                <p class="text-sm mt-2">–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à–µ –º–∞—Å–æ–≤–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É "–ú–∞—Å–æ–≤–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è"</p>
            </div>
        `;
    }
    
    return `
        <div class="space-y-4">
            ${history.map(record => `
                <div class="bg-gray-800 rounded-lg p-4 border border-gray-600">
                    <div class="flex justify-between items-start mb-3">
                        <div>
                            <h4 class="text-lg font-bold text-white">–ú–∞—Å–æ–≤–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è ${formatMonthKey(record.month)}</h4>
                            <p class="text-sm text-gray-400">${getDepartmentName(record.departmentId)} ‚Ä¢ ${record.employeesCount} —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤</p>
                            <p class="text-xs text-gray-500">–°—Ç–≤–æ—Ä–µ–Ω–æ: ${new Date(record.createdAt).toLocaleDateString()}</p>
                        </div>
                        <div class="text-right">
                            <span class="px-2 py-1 rounded-full text-xs ${getMassAssignmentStatusClass(record.status)}">
                                ${getMassAssignmentStatusText(record.status)}
                            </span>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-3">
                        <div>
                            <div class="text-sm text-gray-400">–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂—ñ–≤</div>
                            <div class="text-white font-medium">${formatCurrency(record.totalRevenue)}</div>
                        </div>
                        <div>
                            <div class="text-sm text-gray-400">–°—Ç–≤–æ—Ä–µ–Ω–æ –ø–ª–∞–Ω—ñ–≤</div>
                            <div class="text-white font-medium">${record.plansCount}</div>
                        </div>
                        <div>
                            <div class="text-sm text-gray-400">–§–æ–∫—É—Å–Ω–∏—Ö –∑–∞–¥–∞—á</div>
                            <div class="text-white font-medium">${record.focusTasksCount}</div>
                        </div>
                    </div>
                    
                    <div class="flex gap-2">
                        <button onclick="showMassAssignmentDetails('${record.id}')" 
                                class="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm">
                            –î–µ—Ç–∞–ª—ñ
                        </button>
                        ${record.status === 'completed' ? 
                            `<button onclick="viewMassAssignmentResults('${record.id}')" 
                                     class="px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 text-sm">
                                –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
                            </button>` : ''
                        }
                        <button onclick="deleteMassAssignment('${record.id}')" 
                                class="px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700 text-sm">
                            –í–∏–¥–∞–ª–∏—Ç–∏
                        </button>
                    </div>
                </div>
            `).join('')}
        </div>
    `;
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª–∞—Å—É —Å—Ç–∞—Ç—É—Å—É –º–∞—Å–æ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
 */
function getMassAssignmentStatusClass(status) {
    switch (status) {
        case 'completed':
            return 'bg-green-600 text-white';
        case 'in_progress':
            return 'bg-yellow-600 text-white';
        case 'failed':
            return 'bg-red-600 text-white';
        default:
            return 'bg-gray-600 text-white';
    }
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Å—Ç–∞—Ç—É—Å—É –º–∞—Å–æ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
 */
function getMassAssignmentStatusText(status) {
    switch (status) {
        case 'completed':
            return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
        case 'in_progress':
            return '–í –ø—Ä–æ—Ü–µ—Å—ñ';
        case 'failed':
            return '–ü–æ–º–∏–ª–∫–∞';
        default:
            return '–ù–µ–≤—ñ–¥–æ–º–∏–π';
    }
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
 */
export function renderMassAssignmentTab(container = null) {
    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—â–µ–º –µ–≥–æ
    if (!container) {
        container = document.getElementById('plan-fact-content');
    }
    
    if (!container) return;
    
    container.innerHTML = `
        <div class="space-y-6">
            <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
            <div class="flex justify-between items-center">
                <h2 class="text-xl font-bold text-white">–ú–∞—Å–æ–≤–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤</h2>
                <button onclick="showMassAssignmentModal()" 
                        class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                    üéØ –ú–∞—Å–æ–≤–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
                </button>
            </div>
            
            <!-- –§—ñ–ª—å—Ç—Ä–∏ -->
            <div class="bg-gray-700 rounded-lg p-4">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–ú—ñ—Å—è—Ü—å</label>
                        <input type="month" id="massAssignmentMonth" class="w-full bg-gray-600 border border-gray-500 rounded text-white p-2" 
                               value="${new Date().toISOString().slice(0, 7)}" onchange="loadMassAssignmentHistory()">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–í—ñ–¥–¥—ñ–ª</label>
                        <select id="massAssignmentDepartment" class="w-full bg-gray-600 border border-gray-500 rounded text-white p-2" onchange="loadMassAssignmentHistory()">
                            <option value="">–í—Å—ñ –≤—ñ–¥–¥—ñ–ª–∏</option>
                            ${getState().planFactData?.departments?.map(dept => 
                                `<option value="${dept.id}">${dept.name}</option>`
                            ).join('') || ''}
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–°—Ç–∞—Ç—É—Å</label>
                        <select id="massAssignmentStatus" class="w-full bg-gray-600 border border-gray-500 rounded text-white p-2" onchange="loadMassAssignmentHistory()">
                            <option value="">–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏</option>
                            <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω—ñ</option>
                            <option value="in_progress">–í –ø—Ä–æ—Ü–µ—Å—ñ</option>
                            <option value="failed">–ü–æ–º–∏–ª–∫–∏</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <!-- –Ü—Å—Ç–æ—Ä—ñ—è –º–∞—Å–æ–≤–∏—Ö –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å -->
            <div class="bg-gray-700 rounded-lg overflow-hidden">
                <div class="px-4 py-3 border-b border-gray-600">
                    <h3 class="text-lg font-bold text-white">–Ü—Å—Ç–æ—Ä—ñ—è –º–∞—Å–æ–≤–∏—Ö –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å</h3>
                </div>
                <div id="massAssignmentHistory" class="p-4">
                    ${renderMassAssignmentHistory()}
                </div>
            </div>
        </div>
    `;
    
    loadMassAssignmentHistory();
}

/**
 * –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –º–∞—Å–æ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
 */
window.previewMassAssignment = function() {
    const selectedEmployees = getSelectedEmployees();
    const revenue = parseFloat(document.getElementById('mass-revenue')?.value) || 0;
    const month = document.getElementById('mass-month')?.value;
    const focusTasks = getMassFocusTasks();
    
    if (selectedEmployees.length === 0) {
        alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞');
        return;
    }
    
    if (!revenue) {
        alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–ª–∞–Ω –ø—Ä–æ–¥–∞–∂—ñ–≤');
        return;
    }
    
    if (!month) {
        alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å');
        return;
    }
    
    showMassAssignmentPreview(selectedEmployees, revenue, month, focusTasks);
};

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
 */
function getSelectedEmployees() {
    const checkboxes = document.querySelectorAll('.mass-employee-checkbox:checked');
    return Array.from(checkboxes).map(cb => {
        const employeeId = cb.value;
        const employee = getState().planFactData?.employees?.find(emp => emp.id === employeeId);
        return employee;
    }).filter(Boolean);
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ–∫—É—Å–Ω–∏—Ö –∑–∞–¥–∞—á –¥–ª—è –º–∞—Å–æ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
 */
function getMassFocusTasks() {
    const tasks = Array.from(document.querySelectorAll('.mass-focus-task')).map(task => {
        const typeSelect = task.querySelector('.mass-focus-type');
        const selectedOption = typeSelect.options[typeSelect.selectedIndex];
        const target = parseFloat(task.querySelector('.mass-focus-target').value) || 0;
        
        if (!typeSelect.value || target <= 0) return null;
        
        return {
            typeId: typeSelect.value,
            typeName: selectedOption?.textContent || '',
            type: selectedOption?.dataset.type || 'quantity',
            plan: target
        };
    }).filter(Boolean);
    
    return tasks;
}

/**
 * –ü–æ–∫–∞–∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –º–∞—Å–æ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
 */
function showMassAssignmentPreview(employees, revenue, month, focusTasks) {
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60';
    modal.innerHTML = `
        <div class="bg-gray-800 rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-2xl font-bold text-white">–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –º–∞—Å–æ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è</h2>
                <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-white text-2xl">&times;</button>
            </div>
            
            <div class="space-y-4">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div class="bg-blue-600 rounded-lg p-4">
                        <h4 class="text-sm font-medium text-blue-100 mb-1">–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤</h4>
                        <p class="text-2xl font-bold text-white">${employees.length}</p>
                    </div>
                    <div class="bg-green-600 rounded-lg p-4">
                        <h4 class="text-sm font-medium text-green-100 mb-1">–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂—ñ–≤</h4>
                        <p class="text-2xl font-bold text-white">${formatCurrency(revenue)}</p>
                    </div>
                    <div class="bg-purple-600 rounded-lg p-4">
                        <h4 class="text-sm font-medium text-purple-100 mb-1">–§–æ–∫—É—Å–Ω–∏—Ö –∑–∞–¥–∞—á</h4>
                        <p class="text-2xl font-bold text-white">${focusTasks.length}</p>
                    </div>
                </div>
                
                <div class="bg-gray-700 rounded-lg p-4">
                    <h3 class="text-lg font-bold text-white mb-3">–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-2">
                        ${employees.map(emp => `
                            <div class="bg-gray-600 rounded p-2">
                                <span class="text-white">${emp.name}</span>
                            </div>
                        `).join('')}
                    </div>
                </div>
                
                ${focusTasks.length > 0 ? `
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h3 class="text-lg font-bold text-white mb-3">–§–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ</h3>
                        <div class="space-y-2">
                            ${focusTasks.map(task => `
                                <div class="bg-gray-600 rounded p-2">
                                    <span class="text-white">${task.typeName}</span>
                                    <span class="text-gray-400 ml-2">${task.plan} ${task.type === 'revenue' ? '–≥—Ä–Ω' : '—à—Ç'}</span>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                ` : ''}
            </div>
            
            <div class="flex justify-end gap-4 mt-6">
                <button onclick="this.closest('.fixed').remove()" 
                        class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700">
                    –°–∫–∞—Å—É–≤–∞—Ç–∏
                </button>
                <button onclick="executeMassAssignment()" 
                        class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">
                    –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞–Ω–∏
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
};

/**
 * –í–∏–∫–æ–Ω–∞–Ω–Ω—è –º–∞—Å–æ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
 */
window.executeMassAssignment = function() {
    const selectedEmployees = getSelectedEmployees();
    const revenue = parseFloat(document.getElementById('mass-revenue')?.value) || 0;
    const month = document.getElementById('mass-month')?.value;
    const focusTasks = getMassFocusTasks();
    
    if (selectedEmployees.length === 0) {
        alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞');
        return;
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–ª–∞–Ω–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞
    const createdPlans = [];
    
    selectedEmployees.forEach(employee => {
        const plan = {
            id: `plan-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            name: `–ü–ª–∞–Ω ${employee.name} - ${formatMonthKey(month)}`,
            managerId: employee.id,
            managerName: employee.name,
            departmentId: employee.department,
            departmentName: getState().planFactData?.departments?.find(d => d.id === employee.department)?.name || '',
            monthKey: month.replace('-', ''),
            status: 'draft',
            salesPlan: {
                revenue: {
                    plan: revenue,
                    fact: 0,
                    forecast: 0
                }
            },
            focusTasks: focusTasks.map(task => ({
                id: `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                typeId: task.typeId,
                typeName: task.typeName,
                type: task.type,
                plan: task.plan,
                fact: 0
            })),
            createdAt: new Date().toISOString(),
            createdBy: getState().state?.currentUserId || 'demo-user',
            massAssignment: true
        };
        
        createdPlans.push(plan);
        
        // –î–æ–¥–∞—î–º–æ –¥–æ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        if (!getState().planFactData.plans) {
            getState().planFactData.plans = [];
        }
        getState().planFactData.plans.push(plan);
    });
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Firebase
    saveMassAssignmentToFirebase(createdPlans);
    
    alert(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ ${createdPlans.length} –ø–ª–∞–Ω—ñ–≤ —É—Å–ø—ñ—à–Ω–æ!`);
    document.querySelector('.fixed').remove();
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    renderMassAssignmentTab();
};

/**
 * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–∞—Å–æ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤ Firebase
 */
async function saveMassAssignmentToFirebase(plans) {
    try {
        const companyId = getState().state?.currentCompanyId;
        if (!companyId) {
            console.warn('‚ö†Ô∏è ID –∫–æ–º–ø–∞–Ω—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return;
        }
        
        const batch = firebase.writeBatch(firebase.db);
        
        plans.forEach(plan => {
            const planRef = firebase.doc(firebase.db, 'companies', companyId, 'plans', plan.id);
            batch.set(planRef, plan);
        });
        
        await batch.commit();
        console.log('‚úÖ –ú–∞—Å–æ–≤–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Firebase');
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–∞—Å–æ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:', error);
    }
}

// === –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ===

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∏
 */
function formatCurrency(amount) {
    return new Intl.NumberFormat('uk-UA', {
        style: 'currency',
        currency: 'UAH',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
    }).format(amount || 0);
}

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –º—ñ—Å—è—Ü—è
 */
function formatMonthKey(monthKey) {
    const year = monthKey.substring(0, 4);
    const month = monthKey.substring(4, 6);
    const date = new Date(parseInt(year), parseInt(month) - 1);
    return date.toLocaleDateString('uk-UA', { month: 'long', year: 'numeric' });
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º–∞—Å–æ–≤–∏—Ö –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å
 */
function getMassAssignmentsCount() {
    return getState().planFactData?.plans?.filter(p => p.massAssignment).length || 0;
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å
 */
function getActiveAssignmentsCount() {
    return getState().planFactData?.plans?.filter(p => p.massAssignment && p.status === 'active').length || 0;
}

/**
 * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –º–∞—Å–æ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
 */
window.showMassAssignmentModal = function() {
    const modalHTML = `
        <div id="massAssignmentModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
            <div class="bg-gray-800 rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
                <div class="p-6">
                    <div class="flex items-center justify-between mb-6">
                        <h3 class="text-xl font-semibold text-white">–ú–∞—Å–æ–≤–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤</h3>
                        <button onclick="closeModal('massAssignmentModal')" class="text-gray-400 hover:text-white">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>

                <div class="space-y-4">
                    <p class="text-gray-300">
                        –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–∑–≤–æ–ª—è—î —à–≤–∏–¥–∫–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞–Ω–∏ –¥–ª—è –≥—Ä—É–ø–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å–Ω—É—é—á–∏—Ö —à–∞–±–ª–æ–Ω—ñ–≤.
                    </p>
                    
                    <div class="bg-blue-900 border border-blue-700 rounded-lg p-4">
                        <h4 class="text-blue-300 font-medium mb-2">–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:</h4>
                        <ol class="text-blue-200 text-sm space-y-1">
                            <li>1. –û–±–µ—Ä—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π —à–∞–±–ª–æ–Ω –ø–ª–∞–Ω—É –¥–ª—è –≤—ñ–¥–¥—ñ–ª—É</li>
                            <li>2. –í–∏–±–µ—Ä—ñ—Ç—å —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –∑—ñ —Å–ø–∏—Å–∫—É</li>
                            <li>3. –°—Ñ–æ—Ä–º—É–π—Ç–µ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑ –±–∞–∑–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏</li>
                            <li>4. –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ –ø–ª–∞–Ω–∏ —Ç–∞ —Ñ–æ–∫—É—Å–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞</li>
                            <li>5. –ó–±–µ—Ä–µ–∂—ñ—Ç—å —Ç–∞ –∞–∫—Ç–∏–≤—É–π—Ç–µ –ø–ª–∞–Ω–∏</li>
                            <li>6. –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏–º—É—Ç—å—Å—è –≤ –¥–∞—à–±–æ—Ä–¥—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è</li>
                        </ol>
                    </div>
                    
                    <div class="flex gap-4">
                        <button onclick="closeModal('massAssignmentModal')" 
                                class="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                            –ü–æ—á–∞—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
                        </button>
                        <button onclick="closeModal('massAssignmentModal')" 
                                class="px-6 py-2 bg-gray-600 text-white rounded hover:bg-gray-700">
                            –ó–∞–∫—Ä–∏—Ç–∏
                        </button>
                    </div>
                </div>
                </div>
            </div>
        </div>
    `;
    
    // –î–æ–¥–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    document.getElementById('massAssignmentModal').classList.remove('hidden');
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —à–∞–±–ª–æ–Ω–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
 */
window.updateTemplateDetails = function() {
    const templateId = document.getElementById('mass-template').value;
    const templateInfo = document.getElementById('template-info');
    const templateDetails = document.getElementById('template-details');
    const departmentSelect = document.getElementById('mass-department');
    
    if (!templateId) {
        templateInfo.classList.add('hidden');
        departmentSelect.disabled = true;
        departmentSelect.innerHTML = '<option value="">–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω</option>';
        document.getElementById('mass-employees').innerHTML = '<p class="text-gray-400 text-sm">–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω –ø–ª–∞–Ω—É</p>';
        return;
    }
    
    const template = getState().planFactData?.planTemplates?.find(t => t.id === templateId);
    if (!template) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —à–∞–±–ª–æ–Ω–∞
    templateDetails.innerHTML = `
        <div class="grid grid-cols-2 gap-4">
            <div>
                <strong>–í—ñ–¥–¥—ñ–ª:</strong> ${getDepartmentName(template.department)}
            </div>
            <div>
                <strong>–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂—ñ–≤:</strong> ${formatCurrency(template.salesPlan)} –≥—Ä–Ω
            </div>
            <div>
                <strong>–ú—ñ—Å—è—Ü—å:</strong> ${formatMonthKey(template.monthKey || template.month)}
            </div>
            <div>
                <strong>–§–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ:</strong> ${template.focusTasks?.length || 0}
            </div>
        </div>
        ${template.focusTasks && template.focusTasks.length > 0 ? `
            <div class="mt-3">
                <strong>–§–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ:</strong>
                <div class="flex flex-wrap gap-1 mt-1">
                    ${template.focusTasks.map(taskId => {
                        const focusType = getFocusTypeById(taskId);
                        return `<span class="px-2 py-1 bg-blue-600 text-white rounded text-xs">${focusType ? focusType.name : taskId}</span>`;
                    }).join('')}
                </div>
            </div>
        ` : ''}
    `;
    templateInfo.classList.remove('hidden');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–¥–µ–ª
    departmentSelect.disabled = false;
    departmentSelect.innerHTML = `
        <option value="${template.department}" selected>${getDepartmentName(template.department)}</option>
    `;
    departmentSelect.value = template.department;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    updateMassEmployees();
};

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
 */
window.generateEmployeePlanning = function() {
    const templateId = document.getElementById('mass-template').value;
    const month = document.getElementById('mass-month').value;
    
    if (!templateId || !month) {
        showToast('‚ùå –û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω —Ç–∞ –º—ñ—Å—è—Ü—å', 'error');
        return;
    }
    
    const selectedEmployees = Array.from(document.querySelectorAll('#mass-employees input[type="checkbox"]:checked'))
        .map(cb => cb.value);
        
    if (selectedEmployees.length === 0) {
        showToast('‚ùå –û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞', 'error');
        return;
    }
    
    const template = getState().planFactData?.planTemplates?.find(t => t.id === templateId);
    if (!template) return;
    
    const employeePlanning = document.getElementById('employee-planning');
    const employeePlans = document.getElementById('employee-plans');
    
    let planningHTML = '';
    
    selectedEmployees.forEach(employeeId => {
        const employee = getState().planFactData?.employees?.find(e => e.id === employeeId);
        if (!employee) return;
        
        planningHTML += `
            <div class="bg-gray-800 rounded-lg p-4 border border-gray-600" data-employee="${employeeId}">
                <h5 class="text-lg font-medium text-white mb-3">${employee.name}</h5>
                
                <!-- –ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂—ñ–≤ -->
                <div class="grid grid-cols-2 gap-4 mb-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂—ñ–≤ (–≥—Ä–Ω)</label>
                        <input type="number" 
                               id="plan-revenue-${employeeId}" 
                               class="w-full bg-gray-700 border border-gray-600 rounded text-white p-2" 
                               value="${template.salesPlan}" 
                               min="0">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–°—Ç–∞—Ç—É—Å</label>
                        <select id="plan-status-${employeeId}" class="w-full bg-gray-700 border border-gray-600 rounded text-white p-2">
                            <option value="draft">–ß–µ—Ä–Ω–µ—Ç–∫–∞</option>
                            <option value="active">–ê–∫—Ç–∏–≤–Ω–∏–π</option>
                        </select>
                    </div>
                </div>
                
                <!-- –§–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ -->
                ${template.focusTasks && template.focusTasks.length > 0 ? `
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–§–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ</label>
                        <div class="space-y-2">
                            ${template.focusTasks.map(taskId => {
                                const focusType = getFocusTypeById(taskId);
                                if (!focusType) return '';
                                
                                return `
                                    <div class="flex items-center gap-3 p-2 bg-gray-700 rounded">
                                        <span class="text-white text-sm flex-1">${focusType.name}</span>
                                        <span class="text-gray-400 text-xs">${focusType.type === 'revenue' ? '–≥—Ä–Ω' : '—à—Ç'}</span>
                                        <input type="number" 
                                               id="focus-${taskId}-${employeeId}" 
                                               class="w-24 bg-gray-600 border border-gray-500 rounded text-white p-1 text-sm" 
                                               placeholder="–ü–ª–∞–Ω" 
                                               min="0">
                                    </div>
                                `;
                            }).join('')}
                        </div>
                    </div>
                ` : ''}
            </div>
        `;
    });
    
    employeePlans.innerHTML = planningHTML;
    employeePlanning.classList.remove('hidden');
    document.getElementById('save-plans-btn').classList.remove('hidden');
    
    showToast('‚úÖ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ', 'success');
};

/**
 * –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
 */
window.resetMassAssignment = function() {
    document.getElementById('mass-assignment-form').reset();
    document.getElementById('template-info').classList.add('hidden');
    document.getElementById('employee-planning').classList.add('hidden');
    document.getElementById('save-plans-btn').classList.add('hidden');
    document.getElementById('mass-department').disabled = true;
    document.getElementById('mass-employees').innerHTML = '<p class="text-gray-400 text-sm">–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω –ø–ª–∞–Ω—É</p>';
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
 */
window.updateMassEmployees = function() {
    const departmentId = document.getElementById('mass-department').value;
    const container = document.getElementById('mass-employees');
    
    if (!departmentId) {
        container.innerHTML = '<p class="text-gray-400 text-sm">–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª</p>';
        return;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫–∞–∫ –≤ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    const employees = getState().planFactData?.employees || [];
    const departmentEmployees = employees.filter(emp => {
        return emp.departmentId === departmentId ||
               emp.department === departmentId ||
               (emp.department && emp.department.id === departmentId);
    });
    
    if (departmentEmployees.length === 0) {
        container.innerHTML = '<p class="text-gray-400 text-sm">–£ —Ü—å–æ–º—É –≤—ñ–¥–¥—ñ–ª—ñ –Ω–µ–º–∞—î —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤</p>';
        return;
    }
    
    const employeesHTML = departmentEmployees.map(emp => `
        <label class="flex items-center space-x-2 p-2 hover:bg-gray-600 rounded cursor-pointer">
            <input type="checkbox" value="${emp.id}" class="text-blue-600">
            <span class="text-white">${emp.name}</span>
        </label>
    `).join('');
    
    container.innerHTML = `
        <div class="mb-2">
            <label class="flex items-center space-x-2 p-2 bg-blue-900 rounded cursor-pointer">
                <input type="checkbox" id="select-all-employees" onchange="toggleAllEmployees()">
                <span class="text-blue-200 font-medium">–û–±—Ä–∞—Ç–∏ –≤—Å—ñ—Ö (${departmentEmployees.length})</span>
            </label>
        </div>
        ${employeesHTML}
    `;
    
    console.log(`üë• –ó–Ω–∞–π–¥–µ–Ω–æ ${departmentEmployees.length} —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –¥–ª—è –≤—ñ–¥–¥—ñ–ª—É ${departmentId}`);
};

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
 */
window.toggleAllEmployees = function() {
    const selectAll = document.getElementById('select-all-employees');
    const checkboxes = document.querySelectorAll('#mass-employees input[type="checkbox"]:not(#select-all-employees)');
    
    checkboxes.forEach(cb => {
        cb.checked = selectAll.checked;
    });
};

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–∞
 */
function getDepartmentName(departmentId) {
    if (!departmentId) return '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
    
    const department = getState().planFactData?.departments?.find(dept => dept.id === departmentId);
    return department ? department.name : departmentId;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–æ–∫—É—Å–∞
 */
function getFocusTypeById(focusTypeId) {
    if (!focusTypeId) return null;
    
    return getState().planFactData?.focusTypes?.find(type => type.id === focusTypeId) || null;
}





/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
 */
function initializeMassAssignmentEventListeners() {
    const form = document.getElementById('mass-assignment-form');
    if (form) {
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            await saveMassAssignmentPlans();
        });
    }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
 */
async function saveMassAssignmentPlans() {
    try {
        const templateId = document.getElementById('mass-template').value;
        const month = document.getElementById('mass-month').value;
        
        if (!templateId || !month) {
            showToast('‚ùå –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è', 'error');
            return;
        }
        
        const template = getState().planFactData?.planTemplates?.find(t => t.id === templateId);
        if (!template) {
            showToast('‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error');
            return;
        }
        
        const employeePlans = [];
        const employeeCards = document.querySelectorAll('#employee-plans [data-employee]');
        
        employeeCards.forEach(card => {
            const employeeId = card.dataset.employee;
            const employee = getState().planFactData?.employees?.find(e => e.id === employeeId);
            if (!employee) return;
            
            const revenue = parseFloat(document.getElementById(`plan-revenue-${employeeId}`).value) || 0;
            const status = document.getElementById(`plan-status-${employeeId}`).value || 'draft';
            
            // –°–æ–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏
            const focusTasks = [];
            if (template.focusTasks) {
                template.focusTasks.forEach(taskId => {
                    const planInput = document.getElementById(`focus-${taskId}-${employeeId}`);
                    if (planInput && planInput.value) {
                        const focusType = getFocusTypeById(taskId);
                        focusTasks.push({
                            focusTypeId: taskId,
                            focusTypeName: focusType?.name || taskId,
                            focusType: focusType?.type || 'quantity',
                            plan: parseFloat(planInput.value),
                            fact: 0,
                            unit: focusType?.unit || '—à—Ç'
                        });
                    }
                });
            }
            
            const plan = {
                id: `plan-${employeeId}-${Date.now()}`,
                employeeId: employeeId,
                employeeName: employee.name,
                departmentId: template.department,
                departmentName: getDepartmentName(template.department),
                templateId: templateId,
                templateName: template.name,
                monthKey: month.replace('-', ''),
                month: month,
                status: status,
                salesPlan: {
                    revenue: {
                        plan: revenue,
                        fact: 0
                    }
                },
                focusTasks: focusTasks,
                createdAt: new Date().toISOString(),
                createdBy: getState().state?.currentUser?.uid || 'demo-user',
                companyId: getState().state?.currentCompanyId || null
            };
            
            employeePlans.push(plan);
        });
        
        if (employeePlans.length === 0) {
            showToast('‚ùå –ù–µ–º–∞—î –ø–ª–∞–Ω—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è', 'error');
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≤ Firebase
        if (!getState().planFactData.plans) {
            getState().planFactData.plans = [];
        }
        
        const companyId = getState().state?.currentCompanyId;
        const savedPlans = [];
        
        for (const plan of employeePlans) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–ª–∞–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
            const existingIndex = getState().planFactData.plans.findIndex(p => 
                p.employeeId === plan.employeeId && p.monthKey === plan.monthKey
            );
            
            if (existingIndex !== -1) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞–Ω
                getState().planFactData.plans[existingIndex] = plan;
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
                getState().planFactData.plans.push(plan);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase –µ—Å–ª–∏ –µ—Å—Ç—å companyId
            if (companyId) {
                try {
                    const plansRef = firebase.collection(firebase.db, 'companies', companyId, 'plans');
                    const docRef = await firebase.addDoc(plansRef, plan);
                    plan.id = docRef.id; // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firebase
                    savedPlans.push(plan);
                    console.log('‚úÖ –ü–ª–∞–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Firebase –¥–ª—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞:', plan.employeeName);
                } catch (firebaseError) {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—É –≤ Firebase:', firebaseError);
                    savedPlans.push(plan); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                }
            } else {
                savedPlans.push(plan);
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
        try {
            localStorage.setItem('planFactData', JSON.stringify({
                planTemplates: getState().planFactData.planTemplates,
                focusTypes: getState().planFactData.focusTypes,
                plans: getState().planFactData.plans,
                goals: getState().planFactData.goals
            }));
            console.log('‚úÖ –ü–ª–∞–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ localStorage');
        } catch (storageError) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤ –≤ localStorage:', storageError);
        }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Å—Å–æ–≤—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
        const assignmentRecord = {
            id: 'assignment-' + Date.now(),
            templateId: templateId,
            templateName: template.name,
            month: month,
            monthKey: month.replace('-', ''),
            departmentId: template.department,
            departmentName: getDepartmentName(template.department),
            employeesCount: savedPlans.length,
            employeeIds: savedPlans.map(p => p.employeeId),
            employeeNames: savedPlans.map(p => p.employeeName),
            totalRevenuePlan: savedPlans.reduce((sum, p) => sum + (p.salesPlan?.revenue?.plan || 0), 0),
            createdAt: new Date().toISOString(),
            createdBy: getState().state?.currentUser?.uid || 'demo-user'
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
        if (!getState().planFactData.massAssignmentHistory) {
            getState().planFactData.massAssignmentHistory = [];
        }
        getState().planFactData.massAssignmentHistory.unshift(assignmentRecord); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 50 –∑–∞–ø–∏—Å–µ–π
        if (getState().planFactData.massAssignmentHistory.length > 50) {
            getState().planFactData.massAssignmentHistory = getState().planFactData.massAssignmentHistory.slice(0, 50);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ localStorage
        try {
            localStorage.setItem('planFactData', JSON.stringify({
                planTemplates: getState().planFactData.planTemplates,
                focusTypes: getState().planFactData.focusTypes,
                plans: getState().planFactData.plans,
                goals: getState().planFactData.goals,
                massAssignmentHistory: getState().planFactData.massAssignmentHistory
            }));
        } catch (storageError) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –≤ localStorage:', storageError);
        }
        
        showToast(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ ${savedPlans.length} –ø–ª–∞–Ω—ñ–≤ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É!`, 'success');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        resetMassAssignment();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        setTimeout(() => {
            renderMassAssignmentTab();
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–∞—à–±–æ—Ä–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (window.switchPlanFactTab) {
                window.switchPlanFactTab('dashboard');
            }
        }, 1000);
        
        console.log('‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–ª–∞–Ω—ñ–≤:', employeePlans.length);
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤:', error);
        showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤', 'error');
    }
} 

/**
 * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
 */
window.showAssignmentDetails = function(assignmentId) {
    const assignment = getState().planFactData?.massAssignmentHistory?.find(a => a.id === assignmentId);
    if (!assignment) {
        showToast('‚ùå –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error');
        return;
    }
    
    const modalHTML = `
        <div id="assignmentDetailsModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
            <div class="bg-gray-800 rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
                <div class="p-6">
                    <div class="flex items-center justify-between mb-6">
                        <h3 class="text-xl font-semibold text-white">–î–µ—Ç–∞–ª—ñ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è</h3>
                        <button onclick="closeModal('assignmentDetailsModal')" class="text-gray-400 hover:text-white">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                    
                    <div class="space-y-6">
                        <!-- –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-bold text-white mb-3">–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h4>
                            <div class="grid grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-300">–®–∞–±–ª–æ–Ω:</label>
                                    <p class="text-white">${assignment.templateName}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-300">–í—ñ–¥–¥—ñ–ª:</label>
                                    <p class="text-white">${assignment.departmentName}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-300">–ú—ñ—Å—è—Ü—å:</label>
                                    <p class="text-white">${formatMonthKey(assignment.monthKey)}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-300">–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:</label>
                                    <p class="text-white">${new Date(assignment.createdAt).toLocaleDateString('uk-UA')} ${new Date(assignment.createdAt).toLocaleTimeString('uk-UA')}</p>
                                </div>
                            </div>
                        </div>
                        
                        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-bold text-white mb-3">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
                            <div class="grid grid-cols-3 gap-4">
                                <div class="text-center">
                                    <div class="text-2xl font-bold text-blue-400">${assignment.employeesCount}</div>
                                    <div class="text-sm text-gray-400">–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤</div>
                                </div>
                                <div class="text-center">
                                    <div class="text-2xl font-bold text-green-400">${formatCurrency(assignment.totalRevenuePlan)}</div>
                                    <div class="text-sm text-gray-400">–ó–∞–≥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω</div>
                                </div>
                                <div class="text-center">
                                    <div class="text-2xl font-bold text-purple-400">${formatCurrency(assignment.totalRevenuePlan / assignment.employeesCount)}</div>
                                    <div class="text-sm text-gray-400">–°–µ—Ä–µ–¥–Ω—ñ–π –ø–ª–∞–Ω</div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- –°–ø–∏—Å–æ–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ -->
                        <div class="bg-gray-700 rounded-lg p-4">
                            <h4 class="text-lg font-bold text-white mb-3">–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ (${assignment.employeesCount})</h4>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-2">
                                ${assignment.employeeNames.map((name, index) => `
                                    <div class="flex items-center justify-between p-2 bg-gray-600 rounded">
                                        <span class="text-white">${name}</span>
                                        <button onclick="viewEmployeePlan('${assignment.employeeIds[index]}', '${assignment.monthKey}')" 
                                                class="px-2 py-1 bg-blue-600 text-white rounded text-xs hover:bg-blue-700">
                                            –ü–ª–∞–Ω
                                        </button>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex justify-end mt-6">
                        <button onclick="closeModal('assignmentDetailsModal')" 
                                class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700">
                            –ó–∞–∫—Ä–∏—Ç–∏
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    document.getElementById('assignmentDetailsModal').classList.remove('hidden');
};

/**
 * –ü–µ—Ä–µ–≥–ª—è–¥ –ø–ª–∞–Ω—ñ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—è
 */
window.viewAssignmentPlans = function(assignmentId) {
    const assignment = getState().planFactData?.massAssignmentHistory?.find(a => a.id === assignmentId);
    if (!assignment) {
        showToast('‚ùå –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error');
        return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    const assignmentPlans = getState().planFactData?.plans?.filter(plan => 
        assignment.employeeIds.includes(plan.employeeId) && 
        plan.monthKey === assignment.monthKey
    ) || [];
    
    if (assignmentPlans.length === 0) {
        showToast('‚ùå –ü–ª–∞–Ω–∏ –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error');
        return;
    }
    
    const modalHTML = `
        <div id="assignmentPlansModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
            <div class="bg-gray-800 rounded-lg shadow-xl w-full max-w-6xl max-h-[90vh] overflow-y-auto">
                <div class="p-6">
                    <div class="flex items-center justify-between mb-6">
                        <h3 class="text-xl font-semibold text-white">–ü–ª–∞–Ω–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—è: ${assignment.templateName}</h3>
                        <button onclick="closeModal('assignmentPlansModal')" class="text-gray-400 hover:text-white">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                    
                    <div class="overflow-x-auto">
                        <table class="w-full">
                            <thead class="bg-gray-700">
                                <tr>
                                    <th class="px-4 py-3 text-left text-white">–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫</th>
                                    <th class="px-4 py-3 text-center text-white">–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂—ñ–≤</th>
                                    <th class="px-4 py-3 text-center text-white">–§–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ</th>
                                    <th class="px-4 py-3 text-center text-white">–°—Ç–∞—Ç—É—Å</th>
                                    <th class="px-4 py-3 text-center text-white">–î—ñ—ó</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${assignmentPlans.map(plan => `
                                    <tr class="border-b border-gray-600">
                                        <td class="px-4 py-3">
                                            <div class="text-white font-medium">${plan.employeeName}</div>
                                            <div class="text-sm text-gray-400">${plan.departmentName}</div>
                                        </td>
                                        <td class="px-4 py-3 text-center">
                                            <div class="text-white font-medium">${formatCurrency(plan.salesPlan?.revenue?.plan || 0)}</div>
                                            <div class="text-sm text-gray-400">–§–∞–∫—Ç: ${formatCurrency(plan.salesPlan?.revenue?.fact || 0)}</div>
                                        </td>
                                        <td class="px-4 py-3 text-center">
                                            <div class="text-white">${plan.focusTasks?.length || 0}</div>
                                            <div class="text-sm text-gray-400">
                                                ${plan.focusTasks?.filter(task => task.fact >= task.plan).length || 0} –≤–∏–∫–æ–Ω–∞–Ω–æ
                                            </div>
                                        </td>
                                        <td class="px-4 py-3 text-center">
                                            <span class="px-2 py-1 rounded-full text-xs ${
                                                plan.status === 'active' ? 'bg-green-600 text-white' : 
                                                plan.status === 'draft' ? 'bg-yellow-600 text-white' : 'bg-gray-600 text-white'
                                            }">
                                                ${plan.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : plan.status === 'draft' ? '–ß–µ—Ä–Ω–µ—Ç–∫–∞' : '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–π'}
                                            </span>
                                        </td>
                                        <td class="px-4 py-3 text-center">
                                            <button onclick="viewEmployeePlan('${plan.employeeId}', '${plan.monthKey}')" 
                                                    class="px-2 py-1 bg-blue-600 text-white rounded text-xs hover:bg-blue-700">
                                                –î–µ—Ç–∞–ª—ñ
                                            </button>
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                    
                    <div class="flex justify-between mt-6">
                        <div class="text-gray-400 text-sm">
                            –í—Å—å–æ–≥–æ –ø–ª–∞–Ω—ñ–≤: ${assignmentPlans.length} ‚Ä¢ 
                            –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${formatCurrency(assignmentPlans.reduce((sum, p) => sum + (p.salesPlan?.revenue?.plan || 0), 0))} –≥—Ä–Ω
                        </div>
                        <button onclick="closeModal('assignmentPlansModal')" 
                                class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700">
                            –ó–∞–∫—Ä–∏—Ç–∏
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    document.getElementById('assignmentPlansModal').classList.remove('hidden');
};

/**
 * –ü–µ—Ä–µ–≥–ª—è–¥ –ø–ª–∞–Ω—É —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞
 */
window.viewEmployeePlan = function(employeeId, monthKey) {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    if (window.switchPlanFactTab) {
        window.switchPlanFactTab('dashboard');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        setTimeout(() => {
            const managerSelect = document.getElementById('dashboardManager');
            const monthInput = document.getElementById('dashboardMonth');
            
            if (managerSelect) {
                managerSelect.value = employeeId;
            }
            if (monthInput) {
                monthInput.value = monthKey.substring(0, 4) + '-' + monthKey.substring(4, 6);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥
            if (window.updateDashboard) {
                window.updateDashboard();
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            document.querySelectorAll('[id$="Modal"]').forEach(modal => modal.remove());
            
            showToast('‚úÖ –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –ø–ª–∞–Ω—É —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞', 'success');
        }, 200);
    }
}; 

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Å—Å–æ–≤—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
 */
window.refreshMassAssignmentHistory = function() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Å—Å–æ–≤—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π...');
    console.log('üìã –ò—Å—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö:', getState().planFactData?.massAssignmentHistory);
    
    const historyContainer = document.getElementById('massAssignmentHistory'); // Changed ID
    if (!historyContainer) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    try {
        const historyHTML = renderMassAssignmentHistory();
        historyContainer.innerHTML = historyHTML;
        console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –º–∞—Å—Å–æ–≤—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
        historyContainer.innerHTML = `
            <div class="text-center py-8 text-red-400">
                <p>‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó</p>
                <p class="text-sm mt-2">${error.message}</p>
            </div>
        `;
    }
}; 