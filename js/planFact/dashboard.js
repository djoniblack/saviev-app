// dashboard.js - –î–∞—à–±–æ—Ä–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤ –∑ –≥—Ä—É–ø–æ–≤–∫–æ—é –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö

// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å—Ç–∞–Ω—É
import { getState, updateState, setLoading, canPerformOperation, lockOperation, unlockOperation } from './state.js';

/**
 * –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –º–µ—Å—è—Ü –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
 */
function calculateMonthForecast(currentFact, monthPlan) {
    const now = new Date();
    const currentYear = now.getFullYear();
    const currentMonth = now.getMonth(); // 0-based
    const currentDay = now.getDate();
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (typeof currentFact !== 'number' || isNaN(currentFact)) {
        currentFact = 0;
    }
    if (typeof monthPlan !== 'number' || isNaN(monthPlan)) {
        monthPlan = 0;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
    
    // –°—á–∏—Ç–∞–µ–º —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ø–Ω-–ø—Ç) –≤ –º–µ—Å—è—Ü–µ
    const workingDaysInMonth = getWorkingDaysInMonth(currentYear, currentMonth);
    
    // –°—á–∏—Ç–∞–µ–º —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ—à–ª–∏
    const workingDaysElapsed = getWorkingDaysElapsed(currentYear, currentMonth, currentDay);
    
    // –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
    const workingDaysRemaining = workingDaysInMonth - workingDaysElapsed;
    
    // –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
    const avgDailyRevenue = workingDaysElapsed > 0 ? currentFact / workingDaysElapsed : 0;
    
    // –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –æ–±—â–∞—è —Å—É–º–º–∞ –Ω–∞ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
    const projectedTotal = workingDaysElapsed > 0 ? 
        currentFact + (avgDailyRevenue * workingDaysRemaining) : 
        0;
    
    // –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤ –¥–µ–Ω—å, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –ø–ª–∞–Ω–∞
    const remainingPlan = monthPlan - currentFact;
    const dailyRequired = workingDaysRemaining > 0 ? remainingPlan / workingDaysRemaining : 0;
    
    // –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞
    const forecastPercent = monthPlan > 0 ? (projectedTotal / monthPlan * 100) : 0;
    
    return {
        projectedTotal: Math.max(projectedTotal, 0),
        forecastPercent: Math.max(forecastPercent, 0),
        dailyRequired: Math.max(dailyRequired, 0),
        avgDailyRevenue: avgDailyRevenue,
        workingDaysInMonth: workingDaysInMonth,
        workingDaysElapsed: workingDaysElapsed,
        workingDaysRemaining: workingDaysRemaining,
        daysElapsed: currentDay,
        daysInMonth: daysInMonth
    };
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (–ø–Ω-–ø—Ç) –≤ –º–µ—Å—è—Ü–µ
 */
function getWorkingDaysInMonth(year, month) {
    let workingDays = 0;
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    
    for (let day = 1; day <= daysInMonth; day++) {
        const date = new Date(year, month, day);
        const dayOfWeek = date.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, ..., 6 = —Å—É–±–±–æ—Ç–∞
        
        // –ü–Ω-–ü—Ç = 1-5
        if (dayOfWeek >= 1 && dayOfWeek <= 5) {
            workingDays++;
        }
    }
    
    return workingDays;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ—à–ª–∏ –≤ –º–µ—Å—è—Ü–µ
 */
function getWorkingDaysElapsed(year, month, currentDay) {
    let workingDaysElapsed = 0;
    
    for (let day = 1; day < currentDay; day++) { // < currentDay, –Ω–µ –≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è
        const date = new Date(year, month, day);
        const dayOfWeek = date.getDay();
        
        // –ü–Ω-–ü—Ç = 1-5
        if (dayOfWeek >= 1 && dayOfWeek <= 5) {
            workingDaysElapsed++;
        }
    }
    
    return workingDaysElapsed;
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–∞—à–±–æ—Ä–¥–∞ –∑ –Ω–æ–≤–æ—é –ª–æ–≥—ñ–∫–æ—é
 */
export async function renderDashboardTab(container = null) {
    console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞...');
    
    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—â–µ–º –µ–≥–æ
    if (!container) {
        container = document.getElementById('plan-fact-content');
        if (!container) {
            container = document.getElementById('plan-fact-container');
        }
        if (!container) {
            container = document.querySelector('[data-tab="dashboard"]');
        }
        if (!container) {
            container = document.querySelector('.dashboard-tab');
        }
        if (!container) {
            container = document.querySelector('[class*="dashboard"]');
        }
    }
    
    if (!container) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ü–ª–∞–Ω-–§–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏:', {
            'plan-fact-content': !!document.getElementById('plan-fact-content'),
            'plan-fact-container': !!document.getElementById('plan-fact-container'),
            'data-tab=dashboard': !!document.querySelector('[data-tab="dashboard"]'),
            'class*="dashboard"': !!document.querySelector('[class*="dashboard"]')
        });
        return;
    }
    
    console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–Ω–∞–π–¥–µ–Ω–æ:', container.id || container.className);
    
    // –†–µ–Ω–¥–µ—Ä–∏–º HTML –¥–∞—à–±–æ—Ä–¥–∞
    container.innerHTML = `
        <div class="dashboard-tab">
            <div id="dashboard-loading" class="loading-container">
                <div class="loading-spinner"></div>
                <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...</p>
            </div>
            
            <div id="overall-stats" class="overall-stats" style="display: none;">
                <!-- –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å -->
            </div>
            
            <div id="departments-section" class="departments-section" style="display: none;">
                <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º –±—É–¥—É—Ç –∑–¥–µ—Å—å -->
            </div>
            
            <div id="managers-section" class="managers-section" style="display: none;">
                <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –±—É–¥—É—Ç –∑–¥–µ—Å—å -->
            </div>
        </div>
    `;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
    const dashboardLoading = document.getElementById('dashboard-loading');
    const overallStats = document.getElementById('overall-stats');
    const departmentsSection = document.getElementById('departments-section');
    const managersSection = document.getElementById('managers-section');
    
    if (!dashboardLoading || !overallStats || !departmentsSection || !managersSection) {
        console.error('‚ùå –ù–µ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–∞—à–±–æ—Ä–¥–∞ —Å—Ç–≤–æ—Ä–µ–Ω—ñ');
        return;
    }
    
    console.log('‚úÖ –í—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–∞—à–±–æ—Ä–¥–∞ —Å—Ç–≤–æ—Ä–µ–Ω—ñ');
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
        console.log('‚è≥ –ü–æ–∫–∞–∑—É—î–º–æ –∞–Ω–∏–º–∞—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        const currentState = getState();
        let hasData = false;
        
        if (currentState.dashboardData && currentState.dashboardData.plans) {
            console.log('üìä –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–∞–Ω—ñ');
            hasData = true;
        }
        
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö –±–ª–æ–∫–∏—Ä—É—é—â–∏–º —Å–ø–æ—Å–æ–±–æ–º
        if (!hasData) {
            console.log('üìä –î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–ª–æ–∫—É—é—á–∏–º —Å–ø–æ—Å–æ–±–æ–º...');
            
            try {
                const { forceUpdate } = await import('./backgroundService.js');
                await forceUpdate();
                console.log('‚úÖ –î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                container.innerHTML = `
                    <div class="bg-red-900 border border-red-700 rounded-lg p-6 text-center">
                        <div class="text-red-400 text-6xl mb-4">‚ö†Ô∏è</div>
                        <h2 class="text-xl font-bold text-red-400 mb-2">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</h2>
                        <p class="text-sm text-gray-400 mb-6">${error.message}</p>
                        <button onclick="location.reload()" 
                                class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                            üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑
                        </button>
                    </div>
                `;
                return;
            }
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—à–±–æ—Ä–¥ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        await initializeDashboard();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        const updatedState = getState();
        if (updatedState.dashboardData && updatedState.dashboardData.plans) {
            console.log('üìä –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–∞–Ω—ñ...');
            const { combinePlanData, renderDashboardData } = await import('./dashboard.js');
            const dashboardData = combinePlanData(
                updatedState.dashboardData.plans,
                updatedState.dashboardData.salesFacts,
                updatedState.dashboardData.focusFacts
            );
            await renderDashboardData(
                dashboardData,
                updatedState.currentFilters.month,
                updatedState.currentFilters.departmentId,
                updatedState.currentFilters.managerId
            );
            console.log('‚úÖ –î–∞–Ω—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        }
        
        console.log('‚úÖ –î–∞—à–±–æ—Ä–¥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–∞—à–±–æ—Ä–¥–∞:', error);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        container.innerHTML = `
            <div class="bg-red-900 border border-red-700 rounded-lg p-6 text-center">
                <div class="text-red-400 text-6xl mb-4">‚ö†Ô∏è</div>
                <h2 class="text-xl font-bold text-red-400 mb-2">–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó</h2>
                <p class="text-sm text-gray-400 mb-6">${error.message}</p>
                <button onclick="location.reload()" 
                        class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                    üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑
                </button>
            </div>
        `;
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞
 */
async function initializeDashboard() {
    const operationId = 'initializeDashboard';
    console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞—à–±–æ—Ä–¥–∞...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
        if (!canPerformOperation(operationId)) {
            console.log('‚ö†Ô∏è –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞, —á–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —ñ–Ω—à–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó...');
            return;
        }
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if (!lockOperation(operationId)) {
            console.log('‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –¥–∞—à–±–æ—Ä–¥–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        const currentState = getState();
        if (currentState.isLoading) {
            console.log('‚ö†Ô∏è –î–∞—à–±–æ—Ä–¥ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é');
            unlockOperation(operationId);
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        setLoading(true);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        updateManagersForDashboard();
        
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        console.log('üìä –ü—Ä–µ–¥–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂—ñ–≤...');
        await preloadSalesData();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        const stateAfterPreload = getState();
        console.log('üìä –î–∞–Ω—ñ –ø—ñ—Å–ª—è –ø—Ä–µ–¥–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', {
            apiSalesCacheLength: stateAfterPreload.apiSalesCache?.length || 0,
            planFactData: !!stateAfterPreload.planFactData
        });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
        console.log('üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–∞—à–±–æ—Ä–¥–∞...');
        await updateDashboardData();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const finalState = getState();
        console.log('üìä –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', {
            isLoading: finalState.isLoading,
            plansCount: finalState.planFactData?.plans?.length || 0,
            employeesCount: finalState.planFactData?.employees?.length || 0
        });
        
        console.log('‚úÖ –î–∞—à–±–æ—Ä–¥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–∞—à–±–æ—Ä–¥–∞:', error);
        setLoading(false);
        hideLoadingState();
        showErrorState('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–∞—à–±–æ—Ä–¥–∞');
    } finally {
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        unlockOperation(operationId);
    }
}

/**
 * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂
 */
async function preloadSalesData() {
    try {
    
        
        const response = await fetch('https://fastapi.lookfort.com/nomenclature.analysis');
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const salesData = await response.json();
        
        if (!Array.isArray(salesData)) {
            throw new Error('API –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ (–Ω–µ –º–∞—Å–∏–≤)');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if (salesData.length > 0) {
            const firstRecord = salesData[0];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            const requiredFields = ["–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä", "–î–∞—Ç–∞", "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", "–í—ã—Ä—É—á–∫–∞"];
            const missingFields = requiredFields.filter(field => !(field in firstRecord));
            
            if (missingFields.length > 0) {
                console.warn(`‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –≤ API:`, missingFields);
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        updateState({ apiSalesCache: salesData });
        
        const state = getState();
        if (!state.planFactData) {
            updateState({ planFactData: {} });
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –≤ planFactData –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        updateState({ 
            planFactData: { 
                ...state.planFactData, 
                salesData: salesData 
            } 
        });
        

        
        return salesData;
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–µ–¥–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂—ñ–≤:', error);
        console.warn('‚ö†Ô∏è –ü—Ä–∞—Ü—é—î–º–æ –±–µ–∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ API');
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ
        updateState({ apiSalesCache: [] });
        
        const state = getState();
        if (!state.planFactData) {
            updateState({ planFactData: {} });
        }
        updateState({ 
            planFactData: { 
                ...state.planFactData, 
                salesData: [] 
            } 
        });
        
        // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
        return [];
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞
 */
window.updateDashboardData = async function() {
    const operationId = 'updateDashboardData';
    console.log('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–∞—à–±–æ—Ä–¥–∞...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
        if (!canPerformOperation(operationId)) {
            console.log('‚ö†Ô∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ, —á–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —ñ–Ω—à–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó...');
            return;
        }
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if (!lockOperation(operationId)) {
            console.log('‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–∞—à–±–æ—Ä–¥–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const currentState = getState();
        console.log('üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º:', {
            isLoading: currentState.isLoading,
            plansCount: currentState.planFactData?.plans?.length || 0,
            apiSalesCacheLength: currentState.apiSalesCache?.length || 0
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        showLoadingState();
        setLoading(true);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ API –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if (!currentState.apiSalesCache || currentState.apiSalesCache.length === 0) {
            console.log('üîÑ –ö–µ—à API –ø–æ—Ä–æ–∂–Ω—ñ–π, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ...');
            await preloadSalesData();
        } else {
            console.log(`üìä –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à API –∑ ${currentState.apiSalesCache.length} –∑–∞–ø–∏—Å–∞–º–∏`);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        const month = document.getElementById('dashboardMonth')?.value;
        const departmentId = document.getElementById('dashboardDepartment')?.value;
        const managerId = document.getElementById('dashboardManager')?.value;
        
        console.log('üîç –§—ñ–ª—å—Ç—Ä–∏:', { month, departmentId, managerId });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω—ã
        const plans = await getActivePlansForDashboard(month, departmentId, managerId);
        console.log(`üìã –ó–Ω–∞–π–¥–µ–Ω–æ ${plans.length} –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–ª–∞–Ω—ñ–≤`);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–∫—Ç—ã –ø—Ä–æ–¥–∞–∂
        const salesFacts = await loadSalesFactsForPlans(plans);
        console.log(`üí∞ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ñ–∞–∫—Ç–∏ –ø—Ä–æ–¥–∞–∂—ñ–≤ –¥–ª—è ${salesFacts.length} –ø–ª–∞–Ω—ñ–≤`);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–æ–∫—É—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏
        const focusFacts = await calculateFocusTasksFacts(plans);
        console.log(`üéØ –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ —Ñ–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ –¥–ª—è ${focusFacts.length} –ø–ª–∞–Ω—ñ–≤`);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        const dashboardData = combinePlanData(plans, salesFacts, focusFacts);
        console.log(`üìä –û–±'—î–¥–Ω–∞–Ω–æ –¥–∞–Ω—ñ –¥–ª—è ${dashboardData.length} –ø–ª–∞–Ω—ñ–≤`);
        console.log('üìã –ü—Ä–∏–∫–ª–∞–¥ –æ–±\'—î–¥–Ω–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö:', dashboardData[0]);
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –¥–∞—à–±–æ—Ä–¥ –∏ –ñ–î–ï–ú –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        console.log('üé® –ü–æ—á–∞—Ç–æ–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –¥–∞—à–±–æ—Ä–¥–∞...');
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await renderOverallStats(dashboardData);
        console.log('‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞');
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º
        await renderDepartmentsResults(groupDataByDepartments(dashboardData));
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö –≤—ñ–¥—Ä–µ–Ω–¥–µ—Ä–µ–Ω—ñ');
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        console.log('üë• –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö...');
        await renderManagersResults(dashboardData, groupDataByDepartments(dashboardData));
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö –≤—ñ–¥—Ä–µ–Ω–¥–µ—Ä–µ–Ω—ñ');
        
        console.log('‚úÖ –î–∞–Ω—ñ –¥–∞—à–±–æ—Ä–¥–∞ –≤—ñ–¥—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ');
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        setLoading(false);
        hideLoadingState();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const finalState = getState();
        console.log('üìä –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', {
            isLoading: finalState.isLoading,
            dashboardDataLength: dashboardData.length
        });
        
        console.log('‚úÖ –î–∞–Ω—ñ –¥–∞—à–±–æ—Ä–¥–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–∞—à–±–æ—Ä–¥–∞:', error);
        setLoading(false);
        hideLoadingState();
        showErrorState('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–∞—à–±–æ—Ä–¥–∞');
    } finally {
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        unlockOperation(operationId);
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
 */
async function getActivePlansForDashboard(month, departmentId, managerId) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞ –∏–∑ YYYY-MM –≤ YYYYMM
    const monthKey = month ? month.replace('-', '') : new Date().toISOString().slice(0, 7).replace('-', '');
    
    console.log(`üîç –ó–∞–≥—Ä—É–∂–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –ø–ª–∞–Ω–∏ –¥–ª—è –º—ñ—Å—è—Ü—è: ${month} (–∫–ª—é—á: ${monthKey})`);
    
    const state = getState();
    const allPlans = state.planFactData?.plans || [];
    console.log(`üìã –í—Å—å–æ–≥–æ –ø–ª–∞–Ω—ñ–≤ –≤ —Å–∏—Å—Ç–µ–º—ñ: ${allPlans.length}`);
    
    const validPlans = [];
    
    for (let i = 0; i < allPlans.length; i++) {
        const plan = allPlans[i];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –ø–ª–∞–Ω
        if (plan.status === 'active' && plan.monthKey === monthKey) {
            // –û–±–æ–≥–∞—â–∞–µ–º –ø–ª–∞–Ω –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –æ—Ç–¥–µ–ª–∞
            const enrichedPlan = await enrichPlanWithEmployeeData(plan);
            
            if (enrichedPlan) {
                validPlans.push(enrichedPlan);
            }
        }
    }
    
    console.log(`üìã –ó–Ω–∞–π–¥–µ–Ω–æ ${validPlans.length} –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö –ø–ª–∞–Ω—ñ–≤ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó`);
    
    return validPlans;
}

/**
 * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
function groupSalesByManagers(salesData) {
    console.log('üöÄ –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—ñ–≤ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó...');
    
    const groupedSales = {};
    
    salesData.forEach(sale => {
        const managerName = sale["–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä"] || sale.manager_name || sale.employee_name;
        if (!managerName) return;
        
        if (!groupedSales[managerName]) {
            groupedSales[managerName] = [];
        }
        groupedSales[managerName].push(sale);
    });
    
    console.log(`‚úÖ –ó–≥—Ä—É–ø–æ–≤–∞–Ω–æ –ø—Ä–æ–¥–∞–∂—ñ –¥–ª—è ${Object.keys(groupedSales).length} –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤`);
    
    return groupedSales;
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –ø–ª–∞–Ω–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ —à–∞–±–ª–æ–Ω–∞ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ê –í–ï–†–°–ò–Ø)
 */
async function loadSalesFactsForPlans(plans) {
    console.log(`üí∞ –ó–∞–≥—Ä—É–∂–∞—î–º–æ —Ñ–∞–∫—Ç–∏ –ø—Ä–æ–¥–∞–∂—ñ–≤ –¥–ª—è ${plans.length} –ø–ª–∞–Ω—ñ–≤ (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è)...`);
    
    if (plans.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ–º–∞—î –ø–ª–∞–Ω—ñ–≤ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–∫—Ç—ñ–≤');
        return [];
    }
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const state = getState();
        let salesData = state.apiSalesCache || [];
    
    if (!salesData || salesData.length === 0) {
        console.log('üîÑ –ü—Ä–µ–¥–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ API...');
            salesData = await fetchSalesDataForPeriod();
            console.log(`üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${salesData.length} –∑–∞–ø–∏—Å—ñ–≤ –∑ API`);
    } else {
            console.log(`üìä –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à API –∑ ${salesData.length} –∑–∞–ø–∏—Å–∞–º–∏`);
    }
    
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const groupedSales = groupSalesByManagers(salesData);
    
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞
        const salesFacts = [];
        
        for (let i = 0; i < plans.length; i++) {
            const plan = plans[i];
            console.log(`üíº –û–±—Ä–æ–±–ª—è—î–º–æ –ø–ª–∞–Ω –¥–ª—è ${plan.employeeName} (${plan.employeeId})`);
            console.log(`üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞–Ω—É:`, {
                id: plan.id,
                employeeName: plan.employeeName,
                salesPlan: plan.salesPlan,
                templateId: plan.templateId
            });
            
            console.log(`üîç –ü–û–ß–ê–¢–û–ö –û–ë–†–û–ë–ö–ò –ü–õ–ê–ù–£ #${i + 1} –∑ ${plans.length}`);
            
            try {
            // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø–ª–∞–Ω–∞
                let template = state.planFactData?.templates?.find(t => t.id === plan.templateId);
                
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ templates, –∏—â–µ–º –≤ planTemplates
            if (!template) {
                    template = state.planFactData?.planTemplates?.find(t => t.id === plan.templateId);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –≤ —à–∞–±–ª–æ–Ω–µ
                const nomenclatureFilter = template?.nomenclatureFilter;
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç—ã –ø—Ä–æ–¥–∞–∂
                const salesFact = calculateSalesFactFromGroupedData(
                    groupedSales[plan.employeeName] || [],
                    plan,
                    nomenclatureFilter
                );
                
                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
                const planValue = typeof plan.salesPlan === 'object' ? 
                    (plan.salesPlan?.revenue?.plan || plan.salesPlan?.plan || 0) : 
                    (plan.salesPlan || 0);
                
                salesFacts.push({
                    planId: plan.id,
                    employeeId: plan.employeeId,
                    fact: salesFact.fact,
                    plan: planValue,
                    progress: salesFact.progress,
                    nomenclatureFilter: nomenclatureFilter
                });
                
                console.log(`‚úÖ –§–∞–∫—Ç –¥–ª—è ${plan.employeeName}: ${salesFact.fact} –≥—Ä–Ω (–ø–ª–∞–Ω: ${planValue} –≥—Ä–Ω)`);
            
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞–Ω—É ${plan.id}:`, error);
        }
    }
    
    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ–±—Ä–æ–±–∫—É —Ñ–∞–∫—Ç—ñ–≤ –ø—Ä–æ–¥–∞–∂—ñ–≤ –¥–ª—è ${salesFacts.length} –ø–ª–∞–Ω—ñ–≤`);
    return salesFacts;
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–∫—Ç—ñ–≤ –ø—Ä–æ–¥–∞–∂—ñ–≤:', error);
        return [];
    }
}

/**
 * –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–∞ –ø—Ä–æ–¥–∞–∂ –∏–∑ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function calculateSalesFactFromGroupedData(managerSales, plan, nomenclatureFilter) {
        if (!managerSales || managerSales.length === 0) {
        return { fact: 0, plan: plan.salesPlan || 0, progress: 0 };
        }
        
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –º–µ—Å—è—Ü—É
    const monthKey = plan.monthKey;
    const monthYear = monthKey.substring(0, 4);
        const month = monthKey.substring(4, 6);
        
    const filteredSales = managerSales.filter(sale => {
        const saleDate = new Date(sale['–î–∞—Ç–∞']);
        const saleMonth = saleDate.getFullYear().toString() + 
                         (saleDate.getMonth() + 1).toString().padStart(2, '0');
        return saleMonth === monthKey;
    });
    
    if (filteredSales.length === 0) {
        return { fact: 0, plan: plan.salesPlan || 0, progress: 0 };
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    let finalSales = filteredSales;
        if (nomenclatureFilter && nomenclatureFilter.items && nomenclatureFilter.items.length > 0) {
        finalSales = filterDataByNomenclature(filteredSales, [], nomenclatureFilter);
    }
    
    if (finalSales.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ–º–∞—î –ø—Ä–æ–¥–∞–∂—ñ–≤ –ø—ñ—Å–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤');
        return { fact: 0, plan: plan.salesPlan || 0, progress: 0 };
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É
    const totalRevenue = finalSales.reduce((sum, sale) => {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª—è –≤—ã—Ä—É—á–∫–∏
        const revenue = parseFloat(sale['–°—É–º–∞']) || 
                       parseFloat(sale['–í—ã—Ä—É—á–∫–∞']) || 
                       parseFloat(sale['revenue']) || 
                       parseFloat(sale['total']) || 
                       parseFloat(sale['amount']) || 
                       parseFloat(sale['sum']) || 0;
        
            return sum + revenue;
        }, 0);
        
    console.log(`üí° –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤:`, finalSales.slice(0, 3));
        console.log(`üí∞ –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –≤–∏—Ä—É—á–∫–∞: ${totalRevenue} –≥—Ä–Ω`);
    
    const planValue = plan.salesPlan || 0;
    const progress = planValue > 0 ? (totalRevenue / planValue * 100) : 0;
    
    return {
        fact: totalRevenue,
        plan: planValue,
        progress: progress
    };
}

/**
 * –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–æ–≤ —Ñ–æ–∫—É—Å–Ω—ã—Ö –∑–∞–¥–∞—á
 */
async function calculateFocusTasksFacts(plans) {
    const focusFacts = [];
    
    for (const plan of plans) {
        const planFocusFacts = [];
        
        if (plan.focusTasks && plan.focusTasks.length > 0) {
            for (const focusTask of plan.focusTasks) {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ñ–æ–∫—É—Å–Ω–æ–π –∑–∞–¥–∞—á–∏
                    const state = getState();
                    const focusType = state.planFactData?.focusTypes?.find(ft => ft.id === focusTask.focusTypeId);
                    if (!focusType) {
                        console.warn(`‚ö†Ô∏è –¢–∏–ø —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${focusTask.focusTypeId}`);
                        continue;
                    }
                    
                    console.log(`ÔøΩÔøΩ –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–æ–∫—É—Å–Ω—É –∑–∞–¥–∞—á—É: ${focusType.name}, –º–µ—Ç–æ–¥: ${focusType.calculationMethod}`);
                    
                    let fact = 0;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞
                    const calculationMethod = focusType.calculationMethod || 'manual';
                    
                    if (calculationMethod === 'manual') {
                        // –†—É—á–Ω–æ–π –≤–≤–æ–¥ - –±–µ—Ä–µ–º –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ 0
                        fact = focusTask.fact || 0;
                        console.log(`‚úã –†—É—á–Ω–∏–π –≤–≤—ñ–¥: ${fact}`);
                    } else {
                        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ —Å API
                        console.log(`ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞ –º–µ—Ç–æ–¥–æ–º: ${calculationMethod}`);
                        fact = await calculateFocusTaskFactFromAPI(plan.employeeId, plan.monthKey, focusType);
                    }
                    
                    planFocusFacts.push({
                        focusTypeId: focusTask.focusTypeId,
                        focusTypeName: focusType.name,
                        calculationMethod: calculationMethod,
                        plan: focusTask.plan || 0,
                        fact: fact
                    });
                    
                } catch (error) {
                    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ ${focusTask.focusTypeId}:`, error);
                }
            }
        }
        
        focusFacts.push({
            planId: plan.id,
            employeeId: plan.employeeId,
            focusTasks: planFocusFacts
        });
    }
    
    return focusFacts;
}

// === –≠–ö–°–ü–û–†–¢–´ –î–õ–Ø BACKGROUNDSERVICE ===
export { 
    getActivePlansForDashboard, 
    loadSalesFactsForPlans, 
    calculateFocusTasksFacts,
    renderDashboardData,
    combinePlanData
};

/**
 * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ü–ª–∞–Ω-–§–∞–∫—Ç –¥–ª—è –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∏
 */
window.clearAllPlanFactData = async function() {
    if (!window.hasPermission?.('planfact_delete_all_plans')) {
        alert('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö –ü–ª–∞–Ω-–§–∞–∫—Ç');
        return;
    }
    
    const confirmation = prompt('‚ö†Ô∏è –£–í–ê–ì–ê! –¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –í–°–Ü –¥–∞–Ω—ñ –ü–ª–∞–Ω-–§–∞–∫—Ç!\n\n–í–≤–µ–¥—ñ—Ç—å "–í–ò–î–ê–õ–ò–¢–ò –í–°–ï" –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:');
    if (confirmation !== '–í–ò–î–ê–õ–ò–¢–ò –í–°–ï') {
        alert('–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
        return;
    }
    
    try {
        console.log('üóëÔ∏è –ü–æ—á–∞—Ç–æ–∫ –ø–æ–≤–Ω–æ—ó –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–∏—Ö –ü–ª–∞–Ω-–§–∞–∫—Ç...');
        
        const companyId = window.state.currentCompanyId;
        const batch = firebase.writeBatch(firebase.db);
        
        // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        let deletedCounts = {
            plans: 0,
            templates: 0,
            focusTypes: 0,
            goals: 0
        };
        
        const state = getState();
        
        // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–ª–∞–Ω—ã
        if (state.planFactData?.plans) {
            for (const plan of state.planFactData.plans) {
                const planRef = firebase.doc(firebase.db, 'companies', companyId, 'plans', plan.id);
                batch.delete(planRef);
                deletedCounts.plans++;
            }
        }
        
        // 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –ø–ª–∞–Ω–æ–≤
        if (state.planFactData?.templates) {
            for (const template of state.planFactData.templates) {
                const templateRef = firebase.doc(firebase.db, 'companies', companyId, 'planTemplates', template.id);
                batch.delete(templateRef);
                deletedCounts.templates++;
            }
        }
        
        // 3. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ñ–æ–∫—É—Å–Ω—ã—Ö –∑–∞–¥–∞—á
        if (state.planFactData?.focusTypes) {
            for (const focusType of state.planFactData.focusTypes) {
                const focusRef = firebase.doc(firebase.db, 'companies', companyId, 'focusTypes', focusType.id);
                batch.delete(focusRef);
                deletedCounts.focusTypes++;
            }
        }
        
        // 4. –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏
        if (state.planFactData?.goals) {
            for (const goal of state.planFactData.goals) {
                const goalRef = firebase.doc(firebase.db, 'companies', companyId, 'weeklyGoals', goal.id);
                batch.delete(goalRef);
                deletedCounts.goals++;
            }
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º batch-–æ–ø–µ—Ä–∞—Ü–∏—é
        await batch.commit();
        
        // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        updateState({
            planFactData: {
                plans: [],
                templates: [],
                focusTypes: [],
                goals: [],
                employees: state.planFactData?.employees || [],
                departments: state.planFactData?.departments || []
            }
        });
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const { updateState, clearApiCache } = await import('./state.js');
        clearApiCache();
        updateState({
            currentTab: 'constructor',
            isLoading: false
        });
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        const currentTab = document.querySelector('.plan-fact-tab.active')?.dataset?.tab || 'constructor';
        if (currentTab === 'constructor') {
            const { renderConstructorTab } = await import('./constructor.js');
            renderConstructorTab();
        } else if (currentTab === 'dashboard') {
            renderDashboardTab();
        }
        
        console.log('‚úÖ –ü–æ–≤–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', deletedCounts);
        alert(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ:
‚Ä¢ –ü–ª–∞–Ω—ñ–≤: ${deletedCounts.plans}
‚Ä¢ –®–∞–±–ª–æ–Ω—ñ–≤: ${deletedCounts.templates}  
‚Ä¢ –¢–∏–ø—ñ–≤ —Ñ–æ–∫—É—Å—ñ–≤: ${deletedCounts.focusTypes}
‚Ä¢ –¶—ñ–ª–µ–π: ${deletedCounts.goals}

–¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑ –Ω—É–ª—è!`);
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–∏—Ö:', error);
        alert(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–∏—Ö: ${error.message}`);
    }
};

/**
 * –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–∞ —Ñ–æ–∫—É—Å–Ω–æ–π –∑–∞–¥–∞—á–∏ —Å API
 */
async function calculateFocusTaskFactFromAPI(employeeId, monthKey, focusType) {
    try {
        console.log(`üéØ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ ${focusType.name} –¥–ª—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ ${employeeId}`);
        
        // –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ API –¥–ª—è —Ñ–æ–∫—É—Å–Ω—ã—Ö –∑–∞–¥–∞—á, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–∞—Å—á–µ—Ç
        return calculateFocusTaskFallback(employeeId, monthKey, focusType);
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ –∑ API:', error);
        
        // Fallback - –ø—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö
        return calculateFocusTaskFallback(employeeId, monthKey, focusType);
    }
}

/**
 * Fallback —Ä–∞—Å—á–µ—Ç —Ñ–æ–∫—É—Å–Ω–æ–π –∑–∞–¥–∞—á–∏
 */
function calculateFocusTaskFallback(employeeId, monthKey, focusType) {
    try {
        console.log(`üîÑ Fallback —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è ${focusType.name}, –º–µ—Ç–æ–¥: ${focusType.calculationMethod}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        const state = getState();
        const employee = state.planFactData?.employees?.find(emp => emp.id === employeeId);
        const employeeName = employee?.name;
        
        if (!employeeName) {
            console.warn(`‚ö†Ô∏è –Ü–º'—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è fallback: ${employeeId}`);
            return 0;
        }
        
        const year = monthKey.substring(0, 4);
        const month = monthKey.substring(4, 6);
        
        // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        let salesData = state.planFactData?.salesData || [];
        
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if (salesData.length === 0 && state.apiSalesCache) {
            salesData = state.apiSalesCache;
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –º–µ—Å—è—Ü—É
        const employeeSales = salesData.filter(sale => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            const saleManager = sale["–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä"] || sale.manager_name || sale.employee_name;
            if (saleManager !== employeeName) {
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
            const saleDate = sale["–î–∞—Ç–∞"] || sale.date;
            if (saleDate) {
                const date = new Date(saleDate);
                const saleYear = date.getFullYear().toString();
                const saleMonth = (date.getMonth() + 1).toString().padStart(2, '0');
                
                if (saleYear !== year || saleMonth !== month) {
                    return false;
                }
            }
            
            return true;
        });
        
        console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${employeeSales.length} –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ–¥–∞–∂—ñ–≤ –¥–ª—è fallback —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É`);
        
        const calculationMethod = focusType.calculationMethod || 'manual';
        
        switch (calculationMethod) {
            case 'clients_count':
            case '–∫–ª–∏–µ–Ω—Ç—ã_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ':
                // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                const uniqueClients = new Set();
                employeeSales.forEach(sale => {
                    const clientCode = sale["–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥"] || sale.client_code || sale.client_id;
                    const clientName = sale["–ö–ª–∏–µ–Ω—Ç"] || sale.client_name;
                    
                    if (clientCode) {
                        uniqueClients.add(clientCode);
                    } else if (clientName) {
                        uniqueClients.add(clientName);
                    }
                });
                
                console.log(`üë• –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${uniqueClients.size}`);
                return uniqueClients.size;
                
            case 'orders_count':
            case '–∑–∞–∫–∞–∑—ã_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ':
                // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ (–∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–¥–∞–∂)
                console.log(`üìã –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å: ${employeeSales.length}`);
                return employeeSales.length;
                
            case 'average_check':
            case '—Å—Ä–µ–¥–Ω–∏–π_—á–µ–∫':
                // –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
                if (employeeSales.length === 0) {
                    console.log(`üí∞ –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫: 0 (–Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å)`);
                    return 0;
                }
                
                const totalRevenue = employeeSales.reduce((sum, sale) => {
                    const revenue = parseFloat(sale["–í—ã—Ä—É—á–∫–∞"]) || parseFloat(sale.revenue) || parseFloat(sale.total) || 0;
                    return sum + revenue;
                }, 0);
                
                const averageCheck = totalRevenue / employeeSales.length;
                console.log(`üí∞ –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫: ${averageCheck.toFixed(2)} –≥—Ä–Ω`);
                return Math.round(averageCheck);
                
            case 'total_revenue':
            case '–æ–±—â–∞—è_–≤—ã—Ä—É—á–∫–∞':
                // –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞
                const revenue = employeeSales.reduce((sum, sale) => {
                    const saleRevenue = parseFloat(sale["–í—ã—Ä—É—á–∫–∞"]) || parseFloat(sale.revenue) || parseFloat(sale.total) || 0;
                    return sum + saleRevenue;
                }, 0);
                
                console.log(`üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∏—Ä—É—á–∫–∞: ${revenue} –≥—Ä–Ω`);
                return revenue;
                
            case 'unique_products':
            case '—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ_—Ç–æ–≤–∞—Ä—ã':
                // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                const uniqueProducts = new Set();
                employeeSales.forEach(sale => {
                    const productName = sale["–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"] || sale.product_name || sale.nomenclature;
                    if (productName) {
                        uniqueProducts.add(productName);
                    }
                });
                
                console.log(`üì¶ –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤: ${uniqueProducts.size}`);
                return uniqueProducts.size;
                
            case 'manual':
            default:
                // –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥
                console.log(`‚úã –†—É—á–Ω–∏–π –≤–≤—ñ–¥ –∞–±–æ –Ω–µ–≤—ñ–¥–æ–º–∏–π –º–µ—Ç–æ–¥: ${calculationMethod}`);
                return 0;
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ fallback —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ:', error);
        return 0;
    }
}

/**
 * –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤, —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ–¥–∞–∂ –∏ —Ñ–æ–∫—É—Å–Ω—ã—Ö –∑–∞–¥–∞—á
 */
function combinePlanData(plans, salesFacts, focusFacts) {
    return plans.map(plan => {
        const salesFact = salesFacts.find(sf => sf.planId === plan.id) || { fact: 0, plan: 0 };
        const focusFact = focusFacts.find(ff => ff.planId === plan.id) || { focusTasks: [] };
        
        return {
            ...plan,
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            monthPlan: plan.revenuePlan || plan.monthPlan || salesFact.plan || 0,
            monthFact: salesFact.fact || 0,
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            salesFact: salesFact.fact,
            salesPlan: salesFact.plan,
            salesProgress: salesFact.plan > 0 ? (salesFact.fact / salesFact.plan * 100) : 0,
            focusTasksData: focusFact.focusTasks
        };
    });
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞
 */
async function renderDashboardData(dashboardData, month, departmentId, managerId) {
    console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–∞–Ω–∏—Ö –¥–∞—à–±–æ—Ä–¥–∞...');
    console.log('üìä –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ:', {
        dashboardDataLength: dashboardData?.length || 0,
        month,
        departmentId,
        managerId
    });
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        if (!dashboardData || dashboardData.length === 0) {
            console.warn('‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –¥–∞—à–±–æ—Ä–¥–∞');
            return;
        }
        
        console.log(`üìä –†–µ–Ω–¥–µ—Ä–∏–º–æ ${dashboardData.length} –ø–ª–∞–Ω—ñ–≤`);
        console.log('üìã –ü—Ä–∏–∫–ª–∞–¥ –¥–∞–Ω–∏—Ö:', dashboardData[0]);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–¥–µ–ª–∞–º
    const departmentGroups = groupDataByDepartments(dashboardData);
        console.log('üè¢ –ì—Ä—É–ø–∏ –≤—ñ–¥–¥—ñ–ª—ñ–≤:', Object.keys(departmentGroups));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML —ç–ª–µ–º–µ–Ω—Ç—ã
            const loadingElement = document.getElementById('dashboard-loading');
            const overallStats = document.getElementById('overall-stats');
            const departmentsSection = document.getElementById('departments-section');
            const managersSection = document.getElementById('managers-section');
            
        console.log('üîç HTML –µ–ª–µ–º–µ–Ω—Ç–∏:', {
            loadingElement: !!loadingElement,
            overallStats: !!overallStats,
            departmentsSection: !!departmentsSection,
            managersSection: !!managersSection
        });
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log('üìä –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
        renderOverallStats(dashboardData);
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º
        console.log('üè¢ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö...');
        renderDepartmentsResults(departmentGroups);
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        console.log('üë• –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö...');
        renderManagersResults(dashboardData, departmentGroups);
        
        console.log('‚úÖ –î–∞–Ω—ñ –¥–∞—à–±–æ—Ä–¥–∞ –≤—ñ–¥—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            if (loadingElement) {
                loadingElement.style.display = 'none';
            console.log('‚úÖ –ê–Ω–∏–º–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∫—Ä–∏—Ç–∞');
        } else {
            console.warn('‚ö†Ô∏è –ï–ª–µ–º–µ–Ω—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }
            
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            if (overallStats) {
                overallStats.style.display = 'grid';
            console.log('‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞');
        } else {
            console.warn('‚ö†Ô∏è –ï–ª–µ–º–µ–Ω—Ç –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }
            
            if (departmentsSection) {
                departmentsSection.style.display = 'block';
            console.log('‚úÖ –°–µ–∫—Ü—ñ—è –≤—ñ–¥–¥—ñ–ª—ñ–≤ –ø–æ–∫–∞–∑–∞–Ω–∞');
        } else {
            console.warn('‚ö†Ô∏è –°–µ–∫—Ü—ñ—è –≤—ñ–¥–¥—ñ–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
            }
            
            if (managersSection) {
                managersSection.style.display = 'block';
            console.log('‚úÖ –°–µ–∫—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –ø–æ–∫–∞–∑–∞–Ω–∞');
        } else {
            console.warn('‚ö†Ô∏è –°–µ–∫—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
        }
        
        console.log('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–æ');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const currentState = getState();
        updateState({
            lastUpdate: new Date(),
            currentFilters: {
                month: month || currentState.currentFilters.month,
                departmentId: departmentId || currentState.currentFilters.departmentId,
                managerId: managerId || currentState.currentFilters.managerId
            }
        });
        
        console.log('‚úÖ –°—Ç–∞–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –¥–∞–Ω–∏—Ö –¥–∞—à–±–æ—Ä–¥–∞:', error);
        throw error;
    }
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Ç–¥–µ–ª–∞–º
 */
function groupDataByDepartments(dashboardData) {
    const groups = {};
    
    dashboardData.forEach(plan => {
        const deptId = plan.departmentId;
        if (!groups[deptId]) {
            groups[deptId] = {
                department: plan.department,
                plans: [],
                totalSalesPlan: 0,
                totalSalesFact: 0,
                managersCount: 0
            };
        }
        
        groups[deptId].plans.push(plan);
        groups[deptId].totalSalesPlan += plan.salesPlan || 0;
        groups[deptId].totalSalesFact += plan.salesFact || 0;
    });
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ –∫–∞–∂–¥–æ–º –æ—Ç–¥–µ–ª–µ
    Object.keys(groups).forEach(deptId => {
        groups[deptId].managersCount = new Set(groups[deptId].plans.map(p => p.employeeId)).size;
        groups[deptId].progressPercent = groups[deptId].totalSalesPlan > 0 ? 
            (groups[deptId].totalSalesFact / groups[deptId].totalSalesPlan * 100) : 0;
    });
    
    return groups;
}

/**
 * –ü–æ–∫–∞–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
 */
function showLoadingState() {
    console.log('üîÑ –ü–æ–∫–∞–∑ —Å—Ç–∞–Ω—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞—à–±–æ—Ä–¥—É...');
    
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –≤ renderDashboardTab
    // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('üìä –ê–Ω–∏–º–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∂–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è');
}

/**
 * –°–∫—Ä—ã—Ç–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
 */
function hideLoadingState() {
    console.log('üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω–∏–º–∞—Ü—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞—à–±–æ—Ä–¥—É...');
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
    const containers = ['overall-stats', 'departments-results', 'managers-results'];
    containers.forEach(containerId => {
        const container = document.getElementById(containerId);
        if (container && container.innerHTML.includes('animate-spin')) {
            container.innerHTML = '';
        }
    });
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    import('./state.js').then(({ setLoading }) => {
        setLoading(false);
        console.log('‚úÖ –ê–Ω–∏–º–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞—à–±–æ—Ä–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }).catch(error => {
        console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ setLoading:', error);
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        if (window.planFactState && window.planFactState.setLoading) {
            window.planFactState.setLoading(false);
        }
    });
}

/**
 * –ü–æ–∫–∞–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–∫–∏
 */
function showErrorState(message) {
    const containers = ['overall-stats', 'departments-results', 'managers-results'];
    containers.forEach(containerId => {
        const container = document.getElementById(containerId);
        if (container) {
            container.innerHTML = `
                <div class="text-center py-8 text-red-400">
                    <div class="text-4xl mb-4">‚ö†Ô∏è</div>
                    <p>${message}</p>
                    <button onclick="updateDashboardData()" 
                            class="mt-4 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">
                        –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
                    </button>
                </div>
            `;
        }
    });
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
 */
function updateManagersForDashboard() {
    const departmentSelect = document.getElementById('dashboardDepartment');
    const managerSelect = document.getElementById('dashboardManager');
    
    if (!departmentSelect || !managerSelect) return;
    
    const selectedDepartmentId = departmentSelect.value;
    
    const state = getState();
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ—Ç–¥–µ–ª—É
    let employees = state.planFactData?.employees || [];
    if (selectedDepartmentId) {
        employees = employees.filter(emp => 
            emp.departmentId === selectedDepartmentId ||
            emp.department === selectedDepartmentId ||
            (emp.department && emp.department.id === selectedDepartmentId)
        );
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    managerSelect.innerHTML = '<option value="">–í—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏</option>' +
        employees.map(emp => `<option value="${emp.id}">${emp.name}</option>`).join('');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞
document.addEventListener('change', function(e) {
    if (e.target && e.target.id === 'dashboardDepartment') {
        updateManagersForDashboard();
    }
});

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
 */
window.refreshDashboardData = function() {
    console.log('üîÑ –†—É—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—à–±–æ—Ä–¥–∞ –∑ –æ—á–∏—â–µ–Ω–Ω—è–º –∫–µ—à—É...');
    
    // –û—á–∏—â–∞–µ–º –∫—ç—à API –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    updateState({ apiSalesCache: [] });
    const state = getState();
    if (state.planFactData) {
        updateState({ 
            planFactData: { 
                ...state.planFactData, 
                salesData: [] 
            } 
        });
    }
    
    console.log('üßπ –ö–µ—à API –æ—á–∏—â–µ–Ω–æ, –≤–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...');
    updateDashboardData();
};

window.updateDashboard = function() {
    console.log('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—à–±–æ—Ä–¥–∞ —á–µ—Ä–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∏...');
    updateDashboardData();
};

window.exportDashboardData = function() {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    console.log('üìä –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –¥–∞—à–±–æ—Ä–¥–∞...');
    alert('–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó');
};

window.toggleManagersView = function() {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞
    console.log('üîÑ –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∏–¥—É –¥–∞—à–±–æ—Ä–¥–∞...');
    alert('–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∏–¥—É –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó');
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
 */
window.checkNomenclatureCompatibility = function() {
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏...');
    
    const state = getState();
    const plans = state.planFactData?.plans || [];
    const salesData = state.apiSalesCache || [];
    
    if (salesData.length === 0) {
        console.warn('‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É');
        return;
    }
    
    plans.forEach(plan => {
        console.log(`\nüìä –ê–Ω–∞–ª—ñ–∑ –ø–ª–∞–Ω—É: ${plan.employeeName}`);
        
        const template = state.planFactData?.planTemplates?.find(t => t.id === plan.templateId);
        if (!template) {
            console.log(`‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
            return;
        }
        
        console.log(`üìã –®–∞–±–ª–æ–Ω: ${template.name}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        const managerSales = salesData.filter(sale => {
            const saleManager = sale["–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä"] || sale.manager_name || sale.employee_name;
            return saleManager === plan.employeeName;
        });
        
        console.log(`üë§ –ü—Ä–æ–¥–∞–∂—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${managerSales.length} –∑–∞–ø–∏—Å—ñ–≤`);
        
        // –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        const uniqueNomenclature = [...new Set(managerSales.map(sale => 
            sale["–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"] || sale.nomenclature || sale.product_name
        ))].filter(name => name);
        
        console.log(`üì¶ –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö (–ø–µ—Ä—à—ñ 10):`, uniqueNomenclature.slice(0, 10));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –≤ —à–∞–±–ª–æ–Ω–µ
        if (template.nomenclatureFilters && template.nomenclatureFilters.items) {
            console.log(`üéØ –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –≤ —à–∞–±–ª–æ–Ω—ñ (${template.nomenclatureFilters.items.length} –ø–æ–∑–∏—Ü—ñ–π):`, 
                template.nomenclatureFilters.items.slice(0, 10));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            const matches = uniqueNomenclature.filter(nom => 
                template.nomenclatureFilters.items.some(filterItem => 
                    nom.toLowerCase().includes(filterItem.toLowerCase())
                )
            );
            
            console.log(`‚úÖ –ó–±—ñ–≥–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏: ${matches.length} –∑ ${uniqueNomenclature.length}`);
            if (matches.length > 0) {
                console.log(`üìã –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–±—ñ–≥—ñ–≤:`, matches.slice(0, 5));
            }
            
            if (matches.length === 0) {
                console.warn(`‚ö†Ô∏è –ù–ï–ú–ê–Ñ –ó–ë–Ü–ì–Ü–í! –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ—ñ–ª—å—Ç—Ä–∞–º —à–∞–±–ª–æ–Ω—É`);
            }
        } else {
            console.log(`‚ÑπÔ∏è –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –≤ —à–∞–±–ª–æ–Ω—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞`);
        }
    });
};

/**
 * –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–æ–≤
 */
window.checkPlansDetails = function() {
    console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–ª–∞–Ω—ñ–≤...');
    
    const state = getState();
    const plans = state.planFactData?.plans || [];
    console.log(`üìã –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–ª–∞–Ω—ñ–≤: ${plans.length}`);
    
    plans.forEach((plan, index) => {
        console.log(`\nüìä –ü–õ–ê–ù #${index + 1}:`);
        console.log(`üë§ –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫: ${plan.employeeName}`);
        console.log(`üÜî ID –ø–ª–∞–Ω—É: ${plan.id}`);
        console.log(`üìÖ –ú—ñ—Å—è—Ü—å: ${plan.monthKey}`);
        console.log(`üéØ ID —à–∞–±–ª–æ–Ω—É: ${plan.templateId}`);
        console.log(`üí∞ –ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂—ñ–≤:`, plan.salesPlan);
        console.log(`üìà –°—Ç–∞—Ç—É—Å: ${plan.status}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω
        const template = state.planFactData?.planTemplates?.find(t => t.id === plan.templateId);
        if (template) {
            console.log(`‚úÖ –®–∞–±–ª–æ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ: ${template.name}`);
            console.log(`üì¶ –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –≤ —à–∞–±–ª–æ–Ω—ñ:`, template.nomenclatureFilters);
        } else {
            console.log(`‚ùå –®–∞–±–ª–æ–Ω –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ!`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –≤ API
        if (state.apiSalesCache && state.apiSalesCache.length > 0) {
            const managerInAPI = state.apiSalesCache.some(sale => 
                sale["–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä"] === plan.employeeName
            );
            console.log(`üîç –ú–µ–Ω–µ–¥–∂–µ—Ä –≤ API: ${managerInAPI ? '‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ' : '‚ùå –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ'}`);
        }
    });
    
    console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ñ —à–∞–±–ª–æ–Ω–∏ –ø–ª–∞–Ω—ñ–≤:');
    (state.planFactData?.planTemplates || []).forEach(template => {
        console.log(`  üéØ ${template.id}: ${template.name}`);
    });
};

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∞–∫—Ç–æ–≤
 */
window.testFactCalculation = function() {
    console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ñ–∞–∫—Ç—ñ–≤ –ø—Ä–æ–¥–∞–∂—ñ–≤...');
    
    const state = getState();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à API
    console.log('üìä –ö–µ—à API:', {
        hasCache: !!state.apiSalesCache,
        cacheSize: state.apiSalesCache?.length || 0
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω—ã
    const plans = state.planFactData?.plans || [];
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ñ –ø–ª–∞–Ω–∏:', {
        plansCount: plans.length,
        activePlans: plans.filter(p => p.status === 'active').length
    });
    
    if (plans.length > 0) {
        const firstPlan = plans[0];
        console.log('üí° –ü—Ä–∏–∫–ª–∞–¥ –ø–ª–∞–Ω—É:', {
            id: firstPlan.id,
            employeeName: firstPlan.employeeName,
            monthKey: firstPlan.monthKey,
            salesPlan: firstPlan.salesPlan,
            templateId: firstPlan.templateId
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω
        const template = state.planFactData?.planTemplates?.find(t => t.id === firstPlan.templateId);
        if (template) {
            console.log('üìã –®–∞–±–ª–æ–Ω –ø–ª–∞–Ω—É:', {
                name: template.name,
                nomenclatureFilters: template.nomenclatureFilters
            });
        } else {
            console.warn('‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–ª–∞–Ω—É');
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ API –¥–∞–Ω–Ω—ã—Ö
    if (state.apiSalesCache && state.apiSalesCache.length > 0) {
        const uniqueManagers = [...new Set(state.apiSalesCache.map(sale => 
            sale["–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä"]
        ))].filter(name => name);
        
        console.log('üë• –ú–µ–Ω–µ–¥–∂–µ—Ä–∏ –≤ API (–ø–µ—Ä—à—ñ 10):', uniqueManagers.slice(0, 10));
        
        if (plans.length > 0) {
            const planEmployeeNames = plans.map(p => p.employeeName).filter(name => name);
            console.log('üë§ –Ü–º–µ–Ω–∞ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –≤ –ø–ª–∞–Ω–∞—Ö:', planEmployeeNames);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            const matches = planEmployeeNames.filter(name => uniqueManagers.includes(name));
            console.log('‚úÖ –ó–±—ñ–≥–∏ —ñ–º–µ–Ω:', matches);
            
            const noMatches = planEmployeeNames.filter(name => !uniqueManagers.includes(name));
            if (noMatches.length > 0) {
                console.warn('‚ö†Ô∏è –Ü–º–µ–Ω–∞ –±–µ–∑ –∑–±—ñ–≥—ñ–≤:', noMatches);
            }
        }
    }
};

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function renderOverallStats(dashboardData) {
    const container = document.getElementById('overall-stats');
    if (!container) return;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalPlans = dashboardData.length;
    const totalSalesPlan = dashboardData.reduce((sum, plan) => sum + (plan.salesPlan || 0), 0);
    const totalSalesFact = dashboardData.reduce((sum, plan) => sum + (plan.salesFact || 0), 0);
    const overallProgress = totalSalesPlan > 0 ? (totalSalesFact / totalSalesPlan * 100) : 0;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ñ–æ–∫—É—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏
    let totalFocusTasks = 0;
    let completedFocusTasks = 0;
    
    dashboardData.forEach(plan => {
        if (plan.focusTasksData) {
            plan.focusTasksData.forEach(task => {
                totalFocusTasks++;
                if (task.fact >= task.plan) {
                    completedFocusTasks++;
                }
            });
        }
    });
    
    const focusProgress = totalFocusTasks > 0 ? (completedFocusTasks / totalFocusTasks * 100) : 0;
    
    container.innerHTML = `
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
            <div class="bg-gradient-to-r from-blue-600 to-blue-700 rounded-lg p-6 text-white">
                <h4 class="text-sm font-medium text-blue-100 mb-2">–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–ª–∞–Ω—ñ–≤</h4>
                <p class="text-3xl font-bold">${totalPlans}</p>
                <p class="text-xs text-blue-200 mt-1">–∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–ª–∞–Ω—ñ–≤</p>
            </div>
            
            <div class="bg-gradient-to-r from-green-600 to-green-700 rounded-lg p-6 text-white">
                <h4 class="text-sm font-medium text-green-100 mb-2">–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂—ñ–≤</h4>
                <p class="text-3xl font-bold">${formatCurrency(totalSalesPlan)}</p>
                <p class="text-xs text-green-200 mt-1">–∑–∞–≥–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω</p>
            </div>
            
            <div class="bg-gradient-to-r from-purple-600 to-purple-700 rounded-lg p-6 text-white">
                <h4 class="text-sm font-medium text-purple-100 mb-2">–§–∞–∫—Ç –ø—Ä–æ–¥–∞–∂—ñ–≤</h4>
                <p class="text-3xl font-bold">${formatCurrency(totalSalesFact)}</p>
                <p class="text-xs text-purple-200 mt-1">${overallProgress.toFixed(1)}% –≤–∏–∫–æ–Ω–∞–Ω–Ω—è</p>
            </div>
            
            ${(() => {
                const overallForecast = calculateMonthForecast(totalSalesFact, totalSalesPlan);
                return `
                    <div class="bg-gradient-to-r from-indigo-600 to-indigo-700 rounded-lg p-6 text-white">
                        <h4 class="text-sm font-medium text-indigo-100 mb-2">–ü—Ä–æ–≥–Ω–æ–∑ –º—ñ—Å—è—Ü—è</h4>
                        <p class="text-3xl font-bold">${formatCurrency(overallForecast.projectedTotal)}</p>
                        <p class="text-xs text-indigo-200 mt-1">${overallForecast.forecastPercent.toFixed(1)}% –≤—ñ–¥ –ø–ª–∞–Ω—É</p>
                    </div>
                    
                    <div class="bg-gradient-to-r from-teal-600 to-teal-700 rounded-lg p-6 text-white">
                        <h4 class="text-sm font-medium text-teal-100 mb-2">–ü–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–¥–Ω—è</h4>
                        <p class="text-3xl font-bold">${formatCurrency(overallForecast.dailyRequired)}</p>
                        <p class="text-xs text-teal-200 mt-1">${overallForecast.workingDaysRemaining} —Ä–æ–±. –¥–Ω—ñ–≤</p>
                    </div>
                `;
            })()}
            
            <div class="bg-gradient-to-r from-orange-600 to-orange-700 rounded-lg p-6 text-white">
                <h4 class="text-sm font-medium text-orange-100 mb-2">–§–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ</h4>
                <p class="text-3xl font-bold">${completedFocusTasks}/${totalFocusTasks}</p>
                <p class="text-xs text-orange-200 mt-1">${focusProgress.toFixed(1)}% –≤–∏–∫–æ–Ω–∞–Ω–æ</p>
            </div>
        </div>
    `;
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –æ—Ç–¥–µ–ª–∞–º
 */
function renderDepartmentsResults(departmentGroups) {
    console.log('üè¢ –ü–æ—á–∞—Ç–æ–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –æ—Ç–¥–µ–ª–æ–≤
    let departmentsSection = document.getElementById('departments-section');
    
    // –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
    if (!departmentsSection) {
        console.log('üîß –°–µ–∫—Ü—ñ—è –≤—ñ–¥–¥—ñ–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, —Å—Ç–≤–æ—Ä—é—î–º–æ...');
        
        // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞
        const dashboardContainer = document.querySelector('.dashboard-tab') || 
                                 document.getElementById('plan-fact-content') ||
                                 document.querySelector('[class*="dashboard"]');
        
        if (dashboardContainer) {
            // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é –æ—Ç–¥–µ–ª–æ–≤
            const newDepartmentsSection = document.createElement('div');
            newDepartmentsSection.id = 'departments-section';
            newDepartmentsSection.className = 'departments-section';
            newDepartmentsSection.style.display = 'none';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞
            dashboardContainer.appendChild(newDepartmentsSection);
            departmentsSection = newDepartmentsSection;
            
            console.log('‚úÖ –°–µ–∫—Ü—ñ—è –≤—ñ–¥–¥—ñ–ª—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∞');
        } else {
            console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó –≤—ñ–¥–¥—ñ–ª—ñ–≤');
            return;
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–µ–∫—Ü–∏–∏ –æ—Ç–¥–µ–ª–æ–≤
    departmentsSection.innerHTML = `
        <div class="bg-gray-800 rounded-xl">
            <div class="px-6 py-4 border-b border-gray-700">
                <h3 class="text-xl font-bold text-white">üè¢ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö</h3>
            </div>
            <div id="departments-results" class="p-6">
                <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º –±—É–¥—É—Ç –∑–¥–µ—Å—å -->
            </div>
        </div>
    `;
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç departments-results
    const container = document.getElementById('departments-results');
    if (!container) {
        console.error('‚ùå –ï–ª–µ–º–µ–Ω—Ç departments-results –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è');
        return;
    }
    
    const departments = Object.values(departmentGroups);
    
    if (departments.length === 0) {
        container.innerHTML = `
            <div class="text-center py-8 text-gray-400">
                <div class="text-4xl mb-4">üè¢</div>
                <p class="text-lg">–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö</p>
                <p class="text-sm">–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ—ñ–ª—å—Ç—Ä–∏ –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø–ª–∞–Ω–∏</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = `
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            ${departments.map(dept => `
                <div class="bg-gray-700 rounded-lg p-6 border border-gray-600 hover:bg-gray-600 transition-colors">
                    <div class="flex justify-between items-start mb-4">
                        <div>
                            <h4 class="text-xl font-bold text-white">${dept.department.name}</h4>
                            <p class="text-sm text-gray-400">${dept.managersCount} –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ ‚Ä¢ ${dept.plans.length} –ø–ª–∞–Ω—ñ–≤</p>
                        </div>
                        <div class="text-right">
                            <span class="px-3 py-1 rounded-full text-sm font-medium ${
                                dept.progressPercent >= 100 ? 'bg-green-600 text-white' :
                                dept.progressPercent >= 80 ? 'bg-yellow-600 text-white' :
                                'bg-red-600 text-white'
                            }">
                                ${dept.progressPercent.toFixed(1)}%
                            </span>
                        </div>
                    </div>
                    
                    <!-- –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä -->
                    <div class="mb-4">
                        <div class="flex justify-between text-sm text-gray-400 mb-1">
                            <span>–ü—Ä–æ–≥—Ä–µ—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è</span>
                            <span>${formatCurrency(dept.totalSalesFact)} / ${formatCurrency(dept.totalSalesPlan)}</span>
                        </div>
                        <div class="w-full bg-gray-600 rounded-full h-3">
                            <div class="h-3 rounded-full transition-all duration-300 ${
                                dept.progressPercent >= 100 ? 'bg-green-500' :
                                dept.progressPercent >= 80 ? 'bg-yellow-500' :
                                'bg-red-500'
                            }" style="width: ${Math.min(dept.progressPercent, 100)}%"></div>
                        </div>
                    </div>
                    
                    <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
                    <div class="grid grid-cols-2 gap-4">
                        <div class="text-center p-3 bg-gray-600 rounded">
                            <div class="text-lg font-bold text-green-400">${formatCurrency(dept.totalSalesPlan)}</div>
                            <div class="text-xs text-gray-400">–ü–ª–∞–Ω</div>
                        </div>
                        <div class="text-center p-3 bg-gray-600 rounded">
                            <div class="text-lg font-bold text-blue-400">${formatCurrency(dept.totalSalesFact)}</div>
                            <div class="text-xs text-gray-400">–§–∞–∫—Ç</div>
                        </div>
                    </div>
                    
                    <!-- –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª–µ–π -->
                    <button onclick="showDepartmentDetails('${dept.department.id}')" 
                            class="w-full mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">
                        üë• –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö
                    </button>
                </div>
            `).join('')}
        </div>
    `;
    
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö –≤—ñ–¥—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ');
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
 */
function renderManagersResults(dashboardData, departmentGroups) {
    console.log('üë• –ü–æ—á–∞—Ç–æ–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –∫–∞—Ä—Ç–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    let managersSection = document.getElementById('managers-section');
    
    // –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
    if (!managersSection) {
        console.log('üîß –°–µ–∫—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, —Å—Ç–≤–æ—Ä—é—î–º–æ...');
        
        // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞
        const dashboardContainer = document.querySelector('.dashboard-tab') || 
                                 document.getElementById('plan-fact-content') ||
                                 document.querySelector('[class*="dashboard"]');
        
        if (dashboardContainer) {
            // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            const newManagersSection = document.createElement('div');
            newManagersSection.id = 'managers-section';
            newManagersSection.className = 'managers-section';
            newManagersSection.style.display = 'none';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞
            dashboardContainer.appendChild(newManagersSection);
            managersSection = newManagersSection;
            
            console.log('‚úÖ –°–µ–∫—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∞');
        } else {
            console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤');
            return;
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–µ–∫—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    managersSection.innerHTML = `
        <div class="bg-gray-800 rounded-xl">
            <div class="px-6 py-4 border-b border-gray-700">
                <h3 class="text-xl font-bold text-white">üë• –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö</h3>
            </div>
            <div id="managers-results" class="p-6">
                <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –±—É–¥—É—Ç –∑–¥–µ—Å—å -->
            </div>
        </div>
    `;
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç managers-results
    const updatedManagersResults = document.getElementById('managers-results');
    if (!updatedManagersResults) {
        console.error('‚ùå –ï–ª–µ–º–µ–Ω—Ç managers-results –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è');
        return;
    }
    
    console.log(`üìä –î–∞–Ω—ñ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É: ${dashboardData.length} –ø–ª–∞–Ω—ñ–≤`);
    
    if (!dashboardData || dashboardData.length === 0) {
        console.warn('‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤');
        updatedManagersResults.innerHTML = `
            <div class="text-center py-8 text-gray-400">
                <p>–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è</p>
            </div>
        `;
        return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–¥–µ–ª–∞–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const managersByDepartment = {};
    
    dashboardData.forEach(plan => {
        console.log(`üîç –ü–ª–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ${plan.employeeName}:`, {
            monthPlan: plan.monthPlan,
            monthFact: plan.monthFact,
            salesPlan: plan.salesPlan,
            salesFact: plan.salesFact,
            revenuePlan: plan.revenuePlan
        });
        
        const departmentName = plan.departmentName || '–ë–µ–∑ –≤—ñ–¥–¥—ñ–ª—É';
        if (!managersByDepartment[departmentName]) {
            managersByDepartment[departmentName] = [];
        }
        managersByDepartment[departmentName].push(plan);
    });
    
    console.log('üè¢ –ì—Ä—É–ø–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö:', Object.keys(managersByDepartment));
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–¥–µ–ª–∞–º
    let managersHTML = '';
    
    Object.entries(managersByDepartment).forEach(([departmentName, plans]) => {
        console.log(`üè¢ –†–µ–Ω–¥–µ—Ä–∏–º–æ –≤—ñ–¥–¥—ñ–ª "${departmentName}" –∑ ${plans.length} –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏`);
        
        managersHTML += `
            <div class="mb-6">
                <h4 class="text-lg font-semibold text-white mb-4">${departmentName}</h4>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        `;
        
        plans.forEach(plan => {
            const progressPercent = plan.monthPlan > 0 ? (plan.monthFact / plan.monthPlan * 100) : 0;
            const progressColor = progressPercent >= 100 ? 'bg-green-500' : 
                                progressPercent >= 80 ? 'bg-yellow-500' : 'bg-red-500';
            
            console.log(`üë§ –†–µ–Ω–¥–µ—Ä–∏–º–æ –∫–∞—Ä—Ç–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ${plan.employeeName}: –ø–ª–∞–Ω=${plan.monthPlan}, —Ñ–∞–∫—Ç=${plan.monthFact}, –ø—Ä–æ–≥—Ä–µ—Å=${progressPercent.toFixed(1)}%`);
            
            managersHTML += `
                <div class="bg-gray-700 rounded-lg p-4 hover:bg-gray-600 transition-colors">
                    <div class="flex justify-between items-start mb-3">
                        <div>
                            <h5 class="font-medium text-white">${plan.employeeName}</h5>
                            <p class="text-sm text-gray-400">${plan.departmentName || '–ë–µ–∑ –≤—ñ–¥–¥—ñ–ª—É'}</p>
                        </div>
                        <span class="text-xs text-gray-400">${plan.monthKey}</span>
                    </div>
                    
                    <div class="space-y-2">
                        <div class="flex justify-between text-sm">
                            <span class="text-gray-400">–ü–ª–∞–Ω:</span>
                            <span class="text-white">${formatCurrency(plan.monthPlan)}</span>
                        </div>
                        <div class="flex justify-between text-sm">
                            <span class="text-gray-400">–§–∞–∫—Ç:</span>
                            <span class="text-white">${formatCurrency(plan.monthFact)}</span>
                        </div>
                        <div class="flex justify-between text-sm">
                            <span class="text-gray-400">–ü—Ä–æ–≥—Ä–µ—Å:</span>
                            <span class="text-white font-medium">${progressPercent.toFixed(1)}%</span>
                        </div>
                    </div>
                    
                    <!-- –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä -->
                    <div class="mt-3">
                        <div class="bg-gray-600 rounded-full h-2">
                            <div class="${progressColor} h-2 rounded-full transition-all duration-300" 
                                 style="width: ${Math.min(progressPercent, 100)}%"></div>
                        </div>
                    </div>
                    
                    <!-- –§–æ–∫—É—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏ -->
                    ${plan.focusTasks && plan.focusTasks.length > 0 ? `
                        <div class="mt-4 pt-3 border-t border-gray-600">
                            <h6 class="text-xs font-medium text-gray-400 mb-2">–§–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ:</h6>
                            <div class="space-y-1">
                                ${plan.focusTasks.map(task => `
                                    <div class="flex justify-between text-xs">
                                        <span class="text-gray-400">${task.focusTypeName}:</span>
                                        <span class="text-white">${task.fact || 0} / ${task.plan || 0} ${task.focusUnit}</span>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    ` : ''}
                </div>
            `;
        });
        
        managersHTML += `
                </div>
            </div>
        `;
    });
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º HTML
    updatedManagersResults.innerHTML = managersHTML;
    
    console.log('‚úÖ –ö–∞—Ä—Ç–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –≤—ñ–¥—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ');
}

/**
 * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –æ—Ç–¥–µ–ª–∞
 */
window.showDepartmentDetails = function(departmentId) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–¥–µ–ª—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
    const departmentSelect = document.getElementById('dashboardDepartment');
    if (departmentSelect) {
        departmentSelect.value = departmentId;
        updateManagersForDashboard();
        updateDashboardData();
    }
};

/**
 * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */
window.showManagerDetails = function(planId) {
    const state = getState();
    const plan = state.planFactData?.plans?.find(p => p.id === planId);
    if (!plan) {
        alert('–ü–ª–∞–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    console.log('üìä –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –ø–ª–∞–Ω–∞:', plan);
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
    modal.id = 'managerDetailsModal';
    
    modal.innerHTML = `
        <div class="bg-gray-800 rounded-xl p-6 max-w-6xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold text-white">üìä –î–µ—Ç–∞–ª—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–ª–∞–Ω—É</h2>
                <button onclick="closeManagerDetailsModal()" class="text-gray-400 hover:text-white text-2xl">&times;</button>
            </div>
            
            <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ -->
            <div class="bg-gray-700 rounded-lg p-4 mb-6">
                <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div>
                        <span class="text-gray-400">–ú–µ–Ω–µ–¥–∂–µ—Ä:</span>
                        <div class="text-white font-medium">${plan.employeeName || plan.employeeId}</div>
                    </div>
                    <div>
                        <span class="text-gray-400">–í—ñ–¥–¥—ñ–ª:</span>
                        <div class="text-white">${plan.departmentName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</div>
                    </div>
                    <div>
                        <span class="text-gray-400">–ü–ª–∞–Ω:</span>
                        <div class="text-green-400 font-bold">${formatCurrency(plan.totalPlan || 0)}</div>
                    </div>
                    <div>
                        <span class="text-gray-400">–§–∞–∫—Ç:</span>
                        <div class="text-blue-400 font-bold">${formatCurrency(plan.totalFact || 0)}</div>
                    </div>
                </div>
            </div>
            
            <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
            <div id="managerDetailsContent">
                <div class="text-center py-8">
                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
                    <p class="text-gray-400 mt-2">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π...</p>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    loadManagerDetailsContent(plan);
};

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */
window.closeManagerDetailsModal = function() {
    const modal = document.getElementById('managerDetailsModal');
    if (modal) {
        modal.remove();
    }
};

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */
async function loadManagerDetailsContent(plan) {
    try {
        console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –ø–ª–∞–Ω–∞:', plan.id);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        const { getState } = await import('./state.js');
        const currentState = getState();
        const apiCache = currentState.apiSalesCache || [];
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        const managerSales = apiCache.filter(sale => {
            const managerName = sale['–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä'] || sale['–ú–µ–Ω–µ–¥–∂–µ—Ä'] || '';
            const planManagerName = plan.employeeName || '';
            
            // –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–º–µ–Ω
            return managerName.toLowerCase().includes(planManagerName.toLowerCase()) ||
                   planManagerName.toLowerCase().includes(managerName.toLowerCase());
        });
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${managerSales.length} –ø—Ä–æ–¥–∞–∂ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ${plan.employeeName}`);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
        const clientsMap = new Map();
        
        managerSales.forEach(sale => {
            const clientCode = sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] || sale['–ö–æ–¥ –∫–ª—ñ—î–Ω—Ç–∞'] || 'unknown';
            const clientName = sale['–ö–ª–∏–µ–Ω—Ç'] || sale['–ö–ª—ñ—î–Ω—Ç'] || clientCode;
            const revenue = parseFloat(sale['–í—ã—Ä—É—á–∫–∞'] || sale['–í–∏—Ä—É—á–∫–∞'] || 0);
            const date = sale['–î–∞—Ç–∞'] || sale['–î–∞—Ç–∞'] || '';
            const nomenclature = sale['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] || sale['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] || '';
            const branding = sale['–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ'] || sale['–ë—Ä–µ–Ω–¥—É–≤–∞–Ω–Ω—è'] || '–ù–µ—Ç';
            
            if (!clientsMap.has(clientCode)) {
                clientsMap.set(clientCode, {
                    code: clientCode,
                    name: clientName,
                    totalRevenue: 0,
                    salesCount: 0,
                    lastSaleDate: null,
                    sales: []
                });
            }
            
            const client = clientsMap.get(clientCode);
            client.totalRevenue += revenue;
            client.salesCount++;
            client.sales.push({
                date: date,
                revenue: revenue,
                nomenclature: nomenclature,
                branding: branding
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏
            if (!client.lastSaleDate || new Date(date) > new Date(client.lastSaleDate)) {
                client.lastSaleDate = date;
            }
        });
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ –ø—Ä–æ–¥–∞–∂ (—É–±—ã–≤–∞–Ω–∏–µ)
        const sortedClients = Array.from(clientsMap.values())
            .sort((a, b) => b.totalRevenue - a.totalRevenue);
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç
        renderManagerDetailsContent(plan, sortedClients, managerSales.length);
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', error);
        
        const contentDiv = document.getElementById('managerDetailsContent');
        if (contentDiv) {
            contentDiv.innerHTML = `
                <div class="text-center py-8">
                    <div class="text-red-400 text-xl mb-2">‚ùå</div>
                    <p class="text-red-400">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π</p>
                    <p class="text-gray-400 text-sm mt-1">${error.message}</p>
                </div>
            `;
        }
    }
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */
function renderManagerDetailsContent(plan, clients, totalSalesCount) {
    const contentDiv = document.getElementById('managerDetailsContent');
    if (!contentDiv) return;
    
    const totalRevenue = clients.reduce((sum, client) => sum + client.totalRevenue, 0);
    const averagePerClient = clients.length > 0 ? totalRevenue / clients.length : 0;
    
    contentDiv.innerHTML = `
        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            <div class="bg-gray-700 rounded-lg p-4 text-center">
                <div class="text-2xl font-bold text-blue-400">${clients.length}</div>
                <div class="text-sm text-gray-400">–ö–ª—ñ—î–Ω—Ç—ñ–≤</div>
            </div>
            <div class="bg-gray-700 rounded-lg p-4 text-center">
                <div class="text-2xl font-bold text-green-400">${totalSalesCount}</div>
                <div class="text-sm text-gray-400">–ü—Ä–æ–¥–∞–∂—ñ–≤</div>
            </div>
            <div class="bg-gray-700 rounded-lg p-4 text-center">
                <div class="text-2xl font-bold text-yellow-400">${formatCurrency(totalRevenue)}</div>
                <div class="text-sm text-gray-400">–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞</div>
            </div>
            <div class="bg-gray-700 rounded-lg p-4 text-center">
                <div class="text-2xl font-bold text-purple-400">${formatCurrency(averagePerClient)}</div>
                <div class="text-sm text-gray-400">–í —Å–µ—Ä–µ–¥–Ω—å–æ–º—É –Ω–∞ –∫–ª—ñ—î–Ω—Ç–∞</div>
            </div>
        </div>
        
        <!-- –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ -->
        <div class="bg-gray-700 rounded-lg overflow-hidden">
            <div class="p-4 border-b border-gray-600">
                <h3 class="text-lg font-bold text-white">üë• –ö–ª—ñ—î–Ω—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞</h3>
            </div>
            
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-gray-600">
                        <tr>
                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-300">–ö–ª—ñ—î–Ω—Ç</th>
                            <th class="px-4 py-3 text-right text-sm font-medium text-gray-300">–°—É–º–∞ –ø—Ä–æ–¥–∞–∂—ñ–≤</th>
                            <th class="px-4 py-3 text-center text-sm font-medium text-gray-300">–ö—ñ–ª—å–∫—ñ—Å—Ç—å</th>
                            <th class="px-4 py-3 text-center text-sm font-medium text-gray-300">–û—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–¥–∞–∂</th>
                            <th class="px-4 py-3 text-center text-sm font-medium text-gray-300">–î—ñ—ó</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-600">
                        ${clients.map((client, index) => `
                            <tr class="hover:bg-gray-600 transition-colors">
                                <td class="px-4 py-3">
                                    <div class="text-white font-medium">${client.name}</div>
                                    <div class="text-gray-400 text-xs">${client.code}</div>
                                </td>
                                <td class="px-4 py-3 text-right">
                                    <div class="text-green-400 font-bold">${formatCurrency(client.totalRevenue)}</div>
                                </td>
                                <td class="px-4 py-3 text-center">
                                    <span class="px-2 py-1 bg-blue-600 text-white rounded text-xs">${client.salesCount}</span>
                                </td>
                                <td class="px-4 py-3 text-center text-gray-300 text-sm">
                                    ${client.lastSaleDate ? new Date(client.lastSaleDate).toLocaleDateString('uk-UA') : '–ù–µ–º–∞—î'}
                                </td>
                                <td class="px-4 py-3 text-center">
                                    <button onclick="showClientSalesDetails('${client.code}', '${plan.employeeName}')" 
                                            class="px-3 py-1 bg-purple-600 text-white rounded text-xs hover:bg-purple-700 transition-colors">
                                        –î–µ—Ç–∞–ª—ñ
                                    </button>
                                </td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
                ${clients.length === 0 ? `
                    <div class="text-center py-8">
                        <div class="text-gray-400 text-lg mb-2">üì≠</div>
                        <p class="text-gray-400">–ü—Ä–æ–¥–∞–∂—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</p>
                        <p class="text-gray-500 text-sm mt-1">–ú–æ–∂–ª–∏–≤–æ, –¥–∞–Ω—ñ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∞–±–æ –Ω–µ–º–∞—î –ø—Ä–æ–¥–∞–∂—ñ–≤ –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥</p>
                    </div>
                ` : ''}
            </div>
        </div>
    `;
}

/**
 * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥–∞–∂ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
 */
window.showClientSalesDetails = function(clientCode, managerName) {
    console.log(`üìä –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∫–ª–∏–µ–Ω—Ç–∞: ${clientCode} –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${managerName}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∫–µ—à—É –∏–∑ backgroundService
    const state = getState();
    const apiCache = state.planFactData?.salesData || [];
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç—É –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    const clientSales = apiCache.filter(sale => {
        const saleClientCode = sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] || sale['–ö–æ–¥ –∫–ª—ñ—î–Ω—Ç–∞'] || '';
        const saleManagerName = sale['–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä'] || sale['–ú–µ–Ω–µ–¥–∂–µ—Ä'] || '';
        
        return saleClientCode === clientCode && 
               (saleManagerName.toLowerCase().includes(managerName.toLowerCase()) ||
                managerName.toLowerCase().includes(saleManagerName.toLowerCase()));
    });
    
    if (clientSales.length === 0) {
        alert('–ü—Ä–æ–¥–∞–∂—ñ–≤ –¥–ª—è —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∫–ª–∏–µ–Ω—Ç–∞
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-[60]';
    modal.id = 'clientDetailsModal';
    
    const clientName = clientSales[0]['–ö–ª–∏–µ–Ω—Ç'] || clientSales[0]['–ö–ª—ñ—î–Ω—Ç'] || clientCode;
    const totalRevenue = clientSales.reduce((sum, sale) => sum + parseFloat(sale['–í—ã—Ä—É—á–∫–∞'] || sale['–í–∏—Ä—É—á–∫–∞'] || 0), 0);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    clientSales.sort((a, b) => new Date(b['–î–∞—Ç–∞'] || b['–î–∞—Ç–∞']) - new Date(a['–î–∞—Ç–∞'] || a['–î–∞—Ç–∞']));
    
    modal.innerHTML = `
        <div class="bg-gray-800 rounded-xl p-6 max-w-5xl w-full mx-4 max-h-[85vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-xl font-bold text-white">üè¢ –î–µ—Ç–∞–ª—ñ –ø—Ä–æ–¥–∞–∂—ñ–≤ –∫–ª—ñ—î–Ω—Ç–∞</h2>
                <button onclick="closeClientDetailsModal()" class="text-gray-400 hover:text-white text-2xl">&times;</button>
            </div>
            
            <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ -->
            <div class="bg-gray-700 rounded-lg p-4 mb-6">
                <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div>
                        <span class="text-gray-400 text-sm">–ö–ª—ñ—î–Ω—Ç:</span>
                        <div class="text-white font-medium">${clientName}</div>
                        <div class="text-gray-400 text-xs">${clientCode}</div>
                    </div>
                    <div>
                        <span class="text-gray-400 text-sm">–ú–µ–Ω–µ–¥–∂–µ—Ä:</span>
                        <div class="text-white">${managerName}</div>
                    </div>
                    <div>
                        <span class="text-gray-400 text-sm">–í—Å—å–æ–≥–æ –ø—Ä–æ–¥–∞–∂—ñ–≤:</span>
                        <div class="text-green-400 font-bold">${clientSales.length}</div>
                    </div>
                    <div>
                        <span class="text-gray-400 text-sm">–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:</span>
                        <div class="text-blue-400 font-bold">${formatCurrency(totalRevenue)}</div>
                    </div>
                </div>
            </div>
            
            <!-- –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥–∞–∂ -->
            <div class="bg-gray-700 rounded-lg overflow-hidden">
                <div class="p-4 border-b border-gray-600">
                    <h3 class="text-lg font-bold text-white">üì¶ –Ü—Å—Ç–æ—Ä—ñ—è –ø—Ä–æ–¥–∞–∂—ñ–≤</h3>
                </div>
                
                <div class="overflow-x-auto">
                    <table class="w-full text-sm">
                        <thead class="bg-gray-600">
                            <tr>
                                <th class="px-3 py-2 text-left text-gray-300">–î–∞—Ç–∞</th>
                                <th class="px-3 py-2 text-left text-gray-300">–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞</th>
                                <th class="px-3 py-2 text-center text-gray-300">–ë—Ä–µ–Ω–¥—É–≤–∞–Ω–Ω—è</th>
                                <th class="px-3 py-2 text-right text-gray-300">–°—É–º–∞</th>
                                <th class="px-3 py-2 text-center text-gray-300">–°—Ñ–µ—Ä–∞ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-600">
                            ${clientSales.map(sale => {
                                const date = sale['–î–∞—Ç–∞'] || sale['–î–∞—Ç–∞'] || '';
                                const nomenclature = sale['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] || sale['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
                                const branding = sale['–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ'] || sale['–ë—Ä–µ–Ω–¥—É–≤–∞–Ω–Ω—è'] || '–ù–µ—Ç';
                                const revenue = parseFloat(sale['–í—ã—Ä—É—á–∫–∞'] || sale['–í–∏—Ä—É—á–∫–∞'] || 0);
                                const activity = sale['–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'] || sale['–°—Ñ–µ—Ä–∞ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ'] || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
                                
                                return `
                                    <tr class="hover:bg-gray-600 transition-colors">
                                        <td class="px-3 py-2 text-gray-300">
                                            ${date ? new Date(date).toLocaleDateString('uk-UA') : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
                                        </td>
                                        <td class="px-3 py-2">
                                            <div class="text-white text-xs max-w-xs truncate" title="${nomenclature}">
                                                ${nomenclature}
                                            </div>
                                        </td>
                                        <td class="px-3 py-2 text-center">
                                            <span class="px-2 py-1 rounded text-xs ${branding === '–î–∞' || branding === '–¢–∞–∫' ? 'bg-green-600 text-white' : 'bg-gray-600 text-gray-300'}">
                                                ${branding}
                                            </span>
                                        </td>
                                        <td class="px-3 py-2 text-right">
                                            <span class="text-green-400 font-medium">${formatCurrency(revenue)}</span>
                                        </td>
                                        <td class="px-3 py-2 text-center text-gray-300 text-xs max-w-xs truncate" title="${activity}">
                                            ${activity}
                                        </td>
                                    </tr>
                                `;
                            }).join('')}
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ -->
            <div class="mt-6 bg-gray-700 rounded-lg p-4">
                <h4 class="text-md font-bold text-white mb-3">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ñ</h4>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    ${(() => {
                        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ
                        const nomenclatureMap = new Map();
                        clientSales.forEach(sale => {
                            const nomenclature = sale['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] || sale['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
                            const revenue = parseFloat(sale['–í—ã—Ä—É—á–∫–∞'] || sale['–í–∏—Ä—É—á–∫–∞'] || 0);
                            
                            if (!nomenclatureMap.has(nomenclature)) {
                                nomenclatureMap.set(nomenclature, { count: 0, revenue: 0 });
                            }
                            
                            const item = nomenclatureMap.get(nomenclature);
                            item.count++;
                            item.revenue += revenue;
                        });
                        
                        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—ã—Ä—É—á–∫–µ
                        const sortedNomenclature = Array.from(nomenclatureMap.entries())
                            .sort((a, b) => b[1].revenue - a[1].revenue)
                            .slice(0, 10); // –¢–æ–ø 10
                        
                        return sortedNomenclature.map(([name, data]) => `
                            <div class="flex justify-between items-center py-2 border-b border-gray-600 last:border-b-0">
                                <div class="text-gray-300 truncate max-w-xs" title="${name}">${name}</div>
                                <div class="text-right">
                                    <div class="text-green-400 font-medium">${formatCurrency(data.revenue)}</div>
                                    <div class="text-gray-400 text-xs">${data.count} –ø—Ä–æ–¥–∞–∂—ñ–≤</div>
                                </div>
                            </div>
                        `).join('');
                    })()}
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
};

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π –∫–ª–∏–µ–Ω—Ç–∞
 */
window.closeClientDetailsModal = function() {
    const modal = document.getElementById('clientDetailsModal');
    if (modal) {
        modal.remove();
    }
};

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –ø–ª–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */
window.editManagerPlan = function(planId) {
    const plan = window.planFactData?.plans?.find(p => p.id === planId);
    if (!plan) {
        alert('–ü–ª–∞–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    // TODO: –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤
    alert(`–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ñ–∞–∫—Ç—ñ–≤ –¥–ª—è ${plan.employeeName || plan.employeeId} –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ`);
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
 */
function formatCurrency(amount) {
    if (!amount && amount !== 0) return '0 ‚Ç¥';
    return new Intl.NumberFormat('uk-UA', {
        style: 'currency',
        currency: 'UAH',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
    }).format(amount);
}

/**
 * –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ–¥–∞–∂ –∏–∑ –¥–∞–Ω–Ω—ã—Ö (–°–¢–ê–†–ê–Ø –í–ï–†–°–ò–Ø - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
function calculateSalesFactFromData(salesData, plan, nomenclatureFilter) {
    // –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    console.warn('‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞ —Ñ—É–Ω–∫—Ü—ñ—è calculateSalesFactFromData, –ø–µ—Ä–µ–∫–ª—é—á—ñ—Ç—å—Å—è –Ω–∞ calculateSalesFactFromGroupedData');
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const groupedSales = groupSalesByManagers(salesData);
    const managerSales = groupedSales.get(plan.employeeName || plan.employee?.name) || [];
    
    return calculateSalesFactFromGroupedData(managerSales, plan, nomenclatureFilter);
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
 */
window.showBackgroundServiceStatus = function() {
    if (!window.backgroundService) {
        showToast('‚ùå –§–æ–Ω–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π', 'error');
        return;
    }
    
    const status = window.backgroundService.getStatus();
    
    console.log('üìä –°—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É:', status);
    
    let statusText = '';
    if (status.isActive) {
        const lastUpdate = status.lastUpdate ? new Date(status.lastUpdate) : null;
        const nextUpdate = status.nextUpdate ? new Date(status.nextUpdate) : null;
        
        statusText = `‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π\n`;
        statusText += `üïê –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${lastUpdate ? lastUpdate.toLocaleTimeString() : '–ù–µ–≤—ñ–¥–æ–º–æ'}\n`;
        statusText += `‚è∞ –ù–∞—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${nextUpdate ? nextUpdate.toLocaleTimeString() : '–ù–µ–≤—ñ–¥–æ–º–æ'}\n`;
        statusText += `‚è±Ô∏è –Ü–Ω—Ç–µ—Ä–≤–∞–ª: ${status.interval / 1000 / 60} —Ö–≤–∏–ª–∏–Ω`;
    } else {
        statusText = `‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π\n`;
        statusText += `üîÑ –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤—ñ—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è`;
    }
    
    showToast(statusText, status.isActive ? 'success' : 'warning');
};

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∞–∫—Ç–æ–≤
 */
window.testFactCalculation = function() {
    console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ñ–∞–∫—Ç—ñ–≤ –ø—Ä–æ–¥–∞–∂—ñ–≤...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à API
    console.log('üìä –ö–µ—à API:', {
        hasCache: !!state.apiSalesCache,
        cacheSize: state.apiSalesCache?.length || 0
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω—ã
    const plans = state.planFactData?.plans || [];
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ñ –ø–ª–∞–Ω–∏:', {
        plansCount: plans.length,
        activePlans: plans.filter(p => p.status === 'active').length
    });
    
    if (plans.length > 0) {
        const firstPlan = plans[0];
        console.log('üí° –ü—Ä–∏–∫–ª–∞–¥ –ø–ª–∞–Ω—É:', {
            id: firstPlan.id,
            employeeName: firstPlan.employeeName,
            monthKey: firstPlan.monthKey,
            salesPlan: firstPlan.salesPlan,
            templateId: firstPlan.templateId
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω
        const template = state.planFactData?.planTemplates?.find(t => t.id === firstPlan.templateId);
        if (template) {
            console.log('üìã –®–∞–±–ª–æ–Ω –ø–ª–∞–Ω—É:', {
                name: template.name,
                nomenclatureFilters: template.nomenclatureFilters
            });
        } else {
            console.warn('‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–ª–∞–Ω—É');
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ API –¥–∞–Ω–Ω—ã—Ö
    if (state.apiSalesCache && state.apiSalesCache.length > 0) {
        const uniqueManagers = [...new Set(state.apiSalesCache.map(sale => 
            sale["–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä"]
        ))].filter(name => name);
        
        console.log('üë• –ú–µ–Ω–µ–¥–∂–µ—Ä–∏ –≤ API (–ø–µ—Ä—à—ñ 10):', uniqueManagers.slice(0, 10));
        
        if (plans.length > 0) {
            const planEmployeeNames = plans.map(p => p.employeeName).filter(name => name);
            console.log('üë§ –Ü–º–µ–Ω–∞ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –≤ –ø–ª–∞–Ω–∞—Ö:', planEmployeeNames);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            const matches = planEmployeeNames.filter(name => uniqueManagers.includes(name));
            console.log('‚úÖ –ó–±—ñ–≥–∏ —ñ–º–µ–Ω:', matches);
            
            const noMatches = planEmployeeNames.filter(name => !uniqueManagers.includes(name));
            if (noMatches.length > 0) {
                console.warn('‚ö†Ô∏è –Ü–º–µ–Ω–∞ –±–µ–∑ –∑–±—ñ–≥—ñ–≤:', noMatches);
            }
        }
    }
};

/**
 * –û–±–æ–≥–∞—â–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –æ—Ç–¥–µ–ª–∞
 */
async function enrichPlanWithEmployeeData(plan) {
    const state = getState();
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const employee = state.planFactData?.employees?.find(emp => emp.id === plan.employeeId);
    
    // –ù–∞—Ö–æ–¥–∏–º –æ—Ç–¥–µ–ª
    let department = null;
    if (plan.departmentId) {
        department = state.planFactData?.departments?.find(dept => dept.id === plan.departmentId);
    }
    
    // –ï—Å–ª–∏ –æ—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ departmentId, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    if (!department && employee) {
        if (employee.departmentId) {
            department = state.planFactData?.departments?.find(dept => dept.id === employee.departmentId);
        } else if (employee.department) {
            if (typeof employee.department === 'object') {
                department = employee.department;
            } else {
                department = state.planFactData?.departments?.find(dept => 
                    dept.id === employee.department || dept.name === employee.department
                );
            }
        }
    }
    
    const enrichedPlan = {
        ...plan,
        employee: employee,
        department: department,
        employeeName: employee?.name || plan.employeeName || `–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ ${plan.employeeId}`,
        departmentName: department?.name || plan.departmentName || `–í—ñ–¥–¥—ñ–ª ${plan.departmentId}`
    };
    
    if (!employee) {
        console.warn(`‚ö†Ô∏è –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –¥–ª—è –ø–ª–∞–Ω—É ${plan.id}, employeeId: ${plan.employeeId}`);
        return null; // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–ª–∞–Ω –±–µ–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    }
    if (!department) {
        console.warn(`‚ö†Ô∏è –í—ñ–¥–¥—ñ–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –¥–ª—è –ø–ª–∞–Ω—É ${plan.id}, departmentId: ${plan.departmentId}`);
    }
    
    return enrichedPlan;
}

/**
 * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ
 */
function filterDataByNomenclature(salesData, nomenclatureData, filters) {
    if (!filters || !filters.items || filters.items.length === 0) {
        return salesData;
    }
    
    return salesData.filter(sale => {
        const nomenclatureCode = sale["–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞.–ö–æ–¥"];
        if (!nomenclatureCode) {
            return false;
        }
        
        const shouldInclude = filters.items.some(filterItem => {
            return nomenclatureCode === filterItem;
        });
        
        // –ï—Å–ª–∏ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ "exclude" - –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (filters.filterType === 'exclude') {
            return !shouldInclude;
        } else {
            return shouldInclude;
        }
    });
}