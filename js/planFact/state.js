// state.js - –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞–Ω–æ–º

/**
 * –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
let state = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    planFactData: {
        plans: [],
        planTemplates: [],
        focusTypes: [],
        goals: [],
        employees: [],
        departments: [],
        massAssignmentHistory: []
    },
    
    // –ö—ç—à API –¥–∞–Ω–Ω—ã—Ö
    apiSalesCache: [],
    
    // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    currentTab: 'dashboard',
    currentFilters: {
        month: new Date().toISOString().slice(0, 7),
        departmentId: '',
        managerId: ''
    },
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    isLoading: false,
    lastUpdate: null,
    
    // –ú–µ—Ö–∞–Ω–∏–∑–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    operationLock: null,
    pendingOperations: new Set()
};

/**
 * –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
const subscribers = new Set();

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 */
export function getState() {
    return { ...state };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
 */
export function canPerformOperation(operationId) {
    if (state.operationLock && state.operationLock !== operationId) {
        console.log(`‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü—ñ—è ${operationId} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞, –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è ${state.operationLock}`);
        return false;
    }
    return true;
}

/**
 * –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export function lockOperation(operationId) {
    if (state.operationLock && state.operationLock !== operationId) {
        console.log(`‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é ${operationId}, –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è ${state.operationLock}`);
        return false;
    }
    
    state.operationLock = operationId;
    state.pendingOperations.add(operationId);
    console.log(`üîí –û–ø–µ—Ä–∞—Ü—ñ—è ${operationId} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞`);
    return true;
}

/**
 * –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export function unlockOperation(operationId) {
    if (state.operationLock === operationId) {
        state.operationLock = null;
        state.pendingOperations.delete(operationId);
        console.log(`üîì –û–ø–µ—Ä–∞—Ü—ñ—è ${operationId} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∞`);
    }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 */
export function updateState(newState) {
    const oldState = JSON.parse(JSON.stringify(state)); // –î–µ–ª–∞–µ–º –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏

    // "–£–º–Ω–æ–µ" —Å–ª–∏—è–Ω–∏–µ
    for (const key in newState) {
        if (newState.hasOwnProperty(key)) {
            // –ï—Å–ª–∏ –∫–ª—é—á - —ç—Ç–æ –æ–±—ä–µ–∫—Ç (–Ω–æ –Ω–µ –º–∞—Å—Å–∏–≤), —Å–ª–∏–≤–∞–µ–º –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
            if (typeof newState[key] === 'object' && newState[key] !== null && !Array.isArray(newState[key]) && state[key]) {
                state[key] = { ...state[key], ...newState[key] };
            } else {
                // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ (–¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∏–ø–æ–≤ –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–≤)
                state[key] = newState[key];
            }
        }
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    subscribers.forEach(callback => {
        try {
            callback(state, oldState);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—É —Å—Ç–∞–Ω—É:', error);
        }
    });
}

/**
 * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
export function subscribe(callback) {
    subscribers.add(callback);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
    return () => {
        subscribers.delete(callback);
    };
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —á–∞—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
export function getStateSlice(sliceName) {
    return state[sliceName];
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —á–∞—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
export function updateStateSlice(sliceName, newData) {
    updateState({
        [sliceName]: { ...state[sliceName], ...newData }
    });
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
export function addToStateArray(arrayName, item) {
    const currentArray = state[arrayName] || [];
    updateState({
        [arrayName]: [...currentArray, item]
    });
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
export function updateStateArrayItem(arrayName, itemId, updates) {
    const currentArray = state[arrayName] || [];
    const updatedArray = currentArray.map(item => 
        item.id === itemId ? { ...item, ...updates } : item
    );
    
    updateState({
        [arrayName]: updatedArray
    });
}

/**
 * –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
export function removeFromStateArray(arrayName, itemId) {
    const currentArray = state[arrayName] || [];
    const filteredArray = currentArray.filter(item => item.id !== itemId);
    
    updateState({
        [arrayName]: filteredArray
    });
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
 */
export function setFilters(filters) {
    updateState({
        currentFilters: { ...state.currentFilters, ...filters }
    });
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É
 */
export function setCurrentTab(tabName) {
    updateState({
        currentTab: tabName
    });
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 */
export function setLoading(isLoading) {
    updateState({
        isLoading
    });
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à API –¥–∞–Ω–Ω—ã—Ö
 */
export function updateApiCache(data) {
    updateState({
        apiSalesCache: data,
        lastUpdate: new Date().toISOString()
    });
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à API –¥–∞–Ω–Ω—ã—Ö
 */
export function clearApiCache() {
    updateState({
        apiSalesCache: [],
        lastUpdate: null
    });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
export function getStateStats() {
    return {
        plansCount: state.planFactData.plans.length,
        templatesCount: state.planFactData.planTemplates.length,
        focusTypesCount: state.planFactData.focusTypes.length,
        employeesCount: state.planFactData.employees.length,
        departmentsCount: state.planFactData.departments.length,
        apiCacheSize: state.apiSalesCache.length,
        subscribersCount: subscribers.size,
        lastUpdate: state.lastUpdate
    };
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
if (typeof window !== 'undefined') {
    window.planFactState = {
        getState,
        updateState,
        subscribe,
        getStateSlice,
        updateStateSlice,
        addToStateArray,
        updateStateArrayItem,
        removeFromStateArray,
        setFilters,
        setCurrentTab,
        setLoading,
        updateApiCache,
        clearApiCache,
        getStateStats
    };
} 