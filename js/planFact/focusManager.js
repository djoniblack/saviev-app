// focusManager.js - –ü—ñ–¥–º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ñ–æ–∫—É—Å–Ω–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏
import * as firebase from '../firebase.js';
import { openNomenclatureSelector, setNomenclatureSelectionCallback } from './nomenclatureSelector.js';
import { getState, updateState } from './state.js';

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ —Ñ–æ–∫—É—Å—ñ–≤
 */
function loadFocusTypes() {
    console.log('üéØ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ —Ñ–æ–∫—É—Å—ñ–≤...');
    
    const focusTypesList = document.getElementById('focusTypesList');
    if (!focusTypesList) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ø–∏—Å–∫—É —Ç–∏–ø—ñ–≤ —Ñ–æ–∫—É—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ —Ç–∏–ø–∏ —Ñ–æ–∫—É—Å—ñ–≤
    const filteredFocusTypes = getFilteredFocusTypes();
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫
    focusTypesList.innerHTML = renderFocusTypesList(filteredFocusTypes);
    
    console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${filteredFocusTypes.length} —Ç–∏–ø—ñ–≤ —Ñ–æ–∫—É—Å—ñ–≤`);
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —Ñ–æ–∫—É—Å—ñ–≤
 */
function getFilteredFocusTypes() {
    const allFocusTypes = getState().planFactData?.focusTypes || [];
    const categoryFilter = document.getElementById('focusCategoryFilter')?.value;
    const typeFilter = document.getElementById('focusTypeFilter')?.value;
    
    return allFocusTypes.filter(focusType => {
        if (categoryFilter && focusType.category !== categoryFilter) {
            return false;
        }
        if (typeFilter && focusType.type !== typeFilter) {
            return false;
        }
        return true;
    });
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫—É —Ç–∏–ø—ñ–≤ —Ñ–æ–∫—É—Å—ñ–≤
 */
function renderFocusTypesList(focusTypes = null) {
    // –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —Ç–∏–ø—ã —Ñ–æ–∫—É—Å–æ–≤, –ø–æ–ª—É—á–∞–µ–º –∏—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (!focusTypes) {
        focusTypes = getState().planFactData?.focusTypes || [];
    }
    
    if (focusTypes.length === 0) {
        return `
            <div class="text-center py-8 text-gray-400">
                <p>–ù–µ–º–∞—î —Ç–∏–ø—ñ–≤ —Ñ–æ–∫—É—Å–Ω–∏—Ö –∑–∞–¥–∞—á</p>
                <p class="text-sm mt-2">–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à–∏–π —Ç–∏–ø —Ñ–æ–∫—É—Å—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É "–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–ø —Ñ–æ–∫—É—Å—É"</p>
            </div>
        `;
    }
    
    return `
        <div class="space-y-4">
            ${focusTypes.map(focusType => `
                <div class="bg-gray-800 rounded-lg p-4 border border-gray-600">
                    <div class="flex justify-between items-start mb-3">
                        <div>
                            <h4 class="text-lg font-bold text-white">${focusType.name}</h4>
                            <p class="text-sm text-gray-400">${focusType.description}</p>
                            <div class="flex items-center gap-2 mt-1">
                                <span class="px-2 py-1 rounded text-xs ${focusType.type === 'revenue' ? 'bg-green-600' : 'bg-blue-600'} text-white">
                                    ${focusType.type === 'revenue' ? '–ì—Ä–æ—à–æ–≤–∏–π' : '–ö—ñ–ª—å–∫—ñ—Å–Ω–∏–π'}
                                </span>
                                <span class="px-2 py-1 rounded text-xs bg-gray-600 text-white">
                                    ${focusType.unit}
                                </span>
                                <span class="px-2 py-1 rounded text-xs bg-purple-600 text-white">
                                    ${focusType.category}
                                </span>
                                <span class="px-2 py-1 rounded text-xs ${focusType.calculationMethod?.startsWith('auto_') ? 'bg-orange-600' : 'bg-blue-600'} text-white">
                                    ${getCalculationMethodLabel(focusType.calculationMethod || 'manual')}
                                </span>
                            </div>
                        </div>
                        <div class="text-right">
                            <span class="px-2 py-1 rounded-full text-xs ${focusType.active !== false ? 'bg-green-600 text-white' : 'bg-gray-600 text-white'}">
                                ${focusType.active !== false ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}
                            </span>
                        </div>
                    </div>
                    
                    <div class="flex gap-2">
                        <button onclick="editFocusType('${focusType.id}')" 
                                class="px-3 py-1 bg-yellow-600 text-white rounded hover:bg-yellow-700 text-sm">
                            –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                        </button>
                        ${focusType.active !== false ? 
                            `<button onclick="deactivateFocusType('${focusType.id}')" 
                                     class="px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700 text-sm">
                                –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏
                            </button>` :
                            `<button onclick="activateFocusType('${focusType.id}')" 
                                     class="px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 text-sm">
                                –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏
                            </button>`
                        }
                        <button onclick="deleteFocusType('${focusType.id}')" 
                                class="px-3 py-1 bg-red-800 text-white rounded hover:bg-red-900 text-sm">
                            –í–∏–¥–∞–ª–∏—Ç–∏
                        </button>
                    </div>
                </div>
            `).join('')}
        </div>
    `;
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞–º–∏
 */
export function renderFocusManagerTab(container = null) {
    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—â–µ–º –µ–≥–æ
    if (!container) {
        container = document.getElementById('plan-fact-content');
    }
    
    if (!container) return;
    
    container.innerHTML = `
        <div class="space-y-6">
            <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ –∫–Ω–æ–ø–∫–∏ -->
            <div class="flex justify-between items-center">
                <h2 class="text-xl font-bold text-white">–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ñ–æ–∫—É—Å–Ω–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏</h2>
                <button onclick="showCreateFocusTypeModal()" 
                        class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">
                    + –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–ø —Ñ–æ–∫—É—Å—É
                </button>
            </div>
            
            <!-- –§—ñ–ª—å—Ç—Ä–∏ -->
            <div class="bg-gray-700 rounded-lg p-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–ö–∞—Ç–µ–≥–æ—Ä—ñ—è</label>
                        <select id="focusCategoryFilter" class="w-full bg-gray-600 border border-gray-500 rounded text-white p-2" onchange="loadFocusTypes()">
                            <option value="">–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</option>
                            <option value="sales">–ü—Ä–æ–¥–∞–∂—ñ</option>
                            <option value="communication">–ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è</option>
                            <option value="financial">–§—ñ–Ω–∞–Ω—Å–∏</option>
                            <option value="other">–Ü–Ω—à–µ</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–¢–∏–ø</label>
                        <select id="focusTypeFilter" class="w-full bg-gray-600 border border-gray-500 rounded text-white p-2" onchange="loadFocusTypes()">
                            <option value="">–í—Å—ñ —Ç–∏–ø–∏</option>
                            <option value="quantity">–ö—ñ–ª—å–∫—ñ—Å—Ç—å</option>
                            <option value="revenue">–í–∏—Ä—É—á–∫–∞</option>
                            <option value="percentage">–í—ñ–¥—Å–æ—Ç–æ–∫</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <!-- –°–ø–∏—Å–æ–∫ —Ç–∏–ø—ñ–≤ —Ñ–æ–∫—É—Å—ñ–≤ -->
            <div class="bg-gray-700 rounded-lg overflow-hidden">
                <div class="px-4 py-3 border-b border-gray-600">
                    <h3 class="text-lg font-bold text-white">–¢–∏–ø–∏ —Ñ–æ–∫—É—Å–Ω–∏—Ö –∑–∞–¥–∞—á</h3>
                </div>
                <div id="focusTypesList" class="p-4">
                    ${renderFocusTypesList()}
                </div>
            </div>
        </div>
    `;
    
    loadFocusTypes();
}

/**
 * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–ø—É —Ñ–æ–∫—É—Å—É
 */
window.showCreateFocusTypeModal = function() {
    const modalHTML = `
        <div id="createFocusTypeModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
            <div class="bg-gray-800 rounded-lg shadow-xl w-full max-w-3xl max-h-[90vh] overflow-y-auto">
                <div class="p-6">
                    <div class="flex items-center justify-between mb-6">
                        <h3 class="text-xl font-semibold text-white">–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ç–∏–ø —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ</h3>
                    <button onclick="closeModal('createFocusTypeModal')" class="text-gray-400 hover:text-white">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                
                <form id="createFocusTypeForm" class="space-y-6">
                    <!-- –ù–∞–∑–≤–∞ —Ç–∏–ø—É -->
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ù–∞–∑–≤–∞ —Ç–∏–ø—É —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ</label>
                        <input type="text" id="focus-type-name" required 
                               class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                               placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫, –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–∑–≤—ñ–Ω–∫—ñ–≤">
                    </div>
                    
                    <!-- –¢–∏–ø —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É -->
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–¢–∏–ø —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É</label>
                        <select id="focus-type-calculation-type" required 
                                class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:border-blue-500">
                            <option value="">–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É</option>
                            <option value="sum">–°—É–º–∞ (–≥—Ä–Ω)</option>
                            <option value="quantity">–ö—ñ–ª—å–∫—ñ—Å—Ç—å (—à—Ç)</option>
                            <option value="percentage">–í—ñ–¥—Å–æ—Ç–æ–∫ (%)</option>
                        </select>
                    </div>
                    
                    <!-- –ú–µ—Ç–æ–¥ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É -->
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ú–µ—Ç–æ–¥ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É</label>
                        <select id="focus-type-calculation-method" required 
                                class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:border-blue-500">
                            <option value="manual">–†—É—á–Ω–∏–π –≤–≤—ñ–¥</option>
                            <option value="auto_average_check">–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π: –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫</option>
                            <option value="auto_clients_count">–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤</option>
                            <option value="auto_orders_count">–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å</option>
                            <option value="auto_sales_amount">–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π: –°—É–º–∞ –ø—Ä–æ–¥–∞–∂—ñ–≤</option>
                            <option value="auto_calls_count">–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–∑–≤—ñ–Ω–∫—ñ–≤</option>
                        </select>
                    </div>
                    
                    <!-- –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É -->
                    <div id="nomenclature-section" class="hidden">
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É</label>
                        <div class="space-y-3">
                            <div class="flex items-center justify-between p-3 bg-gray-700 rounded-md border border-gray-600">
                                <div>
                                    <span class="text-white font-medium">–û–±—Ä–∞—Ç–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É</span>
                                    <p class="text-sm text-gray-400" id="selected-nomenclature-info">–ù–µ –æ–±—Ä–∞–Ω–æ</p>
                                </div>
                                <button type="button" id="select-nomenclature-btn" 
                                        class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500 transition-colors">
                                    –û–±—Ä–∞—Ç–∏
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- –û–ø–∏—Å -->
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–û–ø–∏—Å (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)</label>
                        <textarea id="focus-type-description" rows="3"
                                  class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                  placeholder="–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —Ç–∏–ø—É —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ"></textarea>
                    </div>
                    
                    <!-- –ö–Ω–æ–ø–∫–∏ -->
                    <div class="flex justify-end space-x-3 pt-4">
                        <button type="button" onclick="closeModal('createFocusTypeModal')" 
                                class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-500">
                            –°–∫–∞—Å—É–≤–∞—Ç–∏
                        </button>
                        <button type="submit" 
                                class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500">
                            –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–ø
                        </button>
                    </div>
                </form>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    setupFocusTypeFormEventListeners();
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    document.getElementById('createFocusTypeModal').classList.remove('hidden');
};

/**
 * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É
 */
function setupHierarchicalEventListeners() {
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó 1
    document.querySelectorAll('.nomenclature-category1-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            const isChecked = this.checked;
            const categoryName = this.value;
            const hasChildren = this.dataset.hasChildren === 'true';
            const children = this.dataset.children ? this.dataset.children.split(',') : [];
            
            console.log(`üîÑ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è 1 "${categoryName}" ${isChecked ? '–≤–∏–±—Ä–∞–Ω–∞' : '–∑–Ω—è—Ç–∞'}, –¥—ñ—Ç–µ–π: ${children.length}`);
            
            if (hasChildren) {
                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ—Ö –¥—ñ—Ç–µ–π
                children.forEach(childName => {
                    const childCheckbox = document.querySelector(`.nomenclature-category2-checkbox[value="${childName}"]`);
                    if (childCheckbox) {
                        childCheckbox.checked = isChecked;
                        childCheckbox.indeterminate = false;
                        console.log(`   ‚Üí –î–æ—á—ñ—Ä–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è 2 "${childName}" ${isChecked ? '–≤–∏–±—Ä–∞–Ω–∞' : '–∑–Ω—è—Ç–∞'}`);
                    }
                });
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
            updateParentCheckboxState(this);
        });
    });
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó 2
    document.querySelectorAll('.nomenclature-category2-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            const isChecked = this.checked;
            const categoryName = this.value;
            const hasChildren = this.dataset.hasChildren === 'true';
            const children = this.dataset.children ? this.dataset.children.split(',') : [];
            
            console.log(`üîÑ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è 2 "${categoryName}" ${isChecked ? '–≤–∏–±—Ä–∞–Ω–∞' : '–∑–Ω—è—Ç–∞'}, –¥—ñ—Ç–µ–π: ${children.length}`);
            
            if (hasChildren) {
                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ—Ö –¥—ñ—Ç–µ–π
                children.forEach(childName => {
                    const childCheckbox = document.querySelector(`.nomenclature-category3-checkbox[value="${childName}"]`);
                    if (childCheckbox) {
                        childCheckbox.checked = isChecked;
                        childCheckbox.indeterminate = false;
                        console.log(`   ‚Üí –î–æ—á—ñ—Ä–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è 3 "${childName}" ${isChecked ? '–≤–∏–±—Ä–∞–Ω–∞' : '–∑–Ω—è—Ç–∞'}`);
                    }
                });
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
            updateParentCheckboxState(this);
        });
    });
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó 3
    document.querySelectorAll('.nomenclature-category3-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            console.log(`üîÑ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è 3 "${this.value}" ${this.checked ? '–≤–∏–±—Ä–∞–Ω–∞' : '–∑–Ω—è—Ç–∞'}`);
            updateParentCheckboxState(this);
        });
    });
}

/**
 * –û–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ —á–µ–∫–±–æ–∫—Å—É
 */
function updateParentCheckboxState(childCheckbox) {
    const parentName = childCheckbox.dataset.parent;
    if (!parentName) return;
    
    const parentCheckbox = document.querySelector(`.nomenclature-category${childCheckbox.dataset.category - 1}-checkbox[value="${parentName}"]`);
    if (!parentCheckbox) return;
    
    const siblings = document.querySelectorAll(`.nomenclature-category${childCheckbox.dataset.category}-checkbox[data-parent="${parentName}"]`);
    const checkedSiblings = Array.from(siblings).filter(cb => cb.checked);
    const uncheckedSiblings = Array.from(siblings).filter(cb => !cb.checked);
    
    if (checkedSiblings.length === siblings.length) {
        // –í—Å—ñ –¥—ñ—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ
        parentCheckbox.checked = true;
        parentCheckbox.indeterminate = false;
    } else if (checkedSiblings.length === 0) {
        // –ñ–æ–¥–µ–Ω –∑ –¥—ñ—Ç–µ–π –Ω–µ –≤–∏–±—Ä–∞–Ω–∏–π
        parentCheckbox.checked = false;
        parentCheckbox.indeterminate = false;
    } else {
        // –ß–∞—Å—Ç–∫–æ–≤–æ –≤–∏–±—Ä–∞–Ω—ñ –¥—ñ—Ç–∏
        parentCheckbox.checked = false;
        parentCheckbox.indeterminate = true;
    }
}

/**
 * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –Ω–æ–≤–æ—ó —Ñ–æ—Ä–º–∏ —Ñ–æ–∫—É—Å–Ω–æ–≥–æ —Ç–∏–ø—É
 */
function setupFocusTypeFormEventListeners() {
    const calculationMethodSelect = document.getElementById('focus-type-calculation-method');
    const nomenclatureSection = document.getElementById('nomenclature-section');
    const selectNomenclatureBtn = document.getElementById('select-nomenclature-btn');
    
    // –ü–æ–∫–∞–∑—É—î–º–æ/—Ö–æ–≤–∞—î–º–æ —Å–µ–∫—Ü—ñ—é –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–µ—Ç–æ–¥—É —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
    calculationMethodSelect.addEventListener('change', function() {
        const method = this.value;
        if (method.startsWith('auto_')) {
            nomenclatureSection.classList.remove('hidden');
        } else {
            nomenclatureSection.classList.add('hidden');
        }
    });
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏
    selectNomenclatureBtn.addEventListener('click', function() {
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –≤–∏–±—ñ—Ä –∑ —Ñ–æ—Ä–º–∏
        const currentSelection = window.currentNomenclatureSelection || [];
        const currentFilterType = window.currentNomenclatureFilterType || 'include';
        
        // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏
        openNomenclatureSelector(currentSelection, currentFilterType);
    });
    
    // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ callback –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏
    setNomenclatureSelectionCallback(function(result) {
        window.currentNomenclatureSelection = result.items;
        window.currentNomenclatureFilterType = result.filterType;
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–±—ñ—Ä
        const infoElement = document.getElementById('selected-nomenclature-info');
        if (result.items.length > 0) {
            infoElement.textContent = `–û–±—Ä–∞–Ω–æ ${result.items.length} –ø–æ–∑–∏—Ü—ñ–π (${result.filterType === 'include' ? '–≤–∫–ª—é—á–∏—Ç–∏' : '–≤–∏–∫–ª—é—á–∏—Ç–∏'})`;
        } else {
            infoElement.textContent = '–ù–µ –æ–±—Ä–∞–Ω–æ';
        }
    });
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏
    document.getElementById('createFocusTypeForm').addEventListener('submit', saveNewFocusType);
}

/**
 * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø—É —Ñ–æ–∫—É—Å—É
 */
async function saveNewFocusType(e) {
    e.preventDefault();
    
    try {
        const name = document.getElementById('focus-type-name').value.trim();
        const calculationType = document.getElementById('focus-type-calculation-type').value;
        const calculationMethod = document.getElementById('focus-type-calculation-method').value;
        const description = document.getElementById('focus-type-description').value.trim();
        
        if (!name || !calculationType || !calculationMethod) {
            showToast('‚ùå –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è', 'error');
            return;
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        const companyId = window.state?.currentCompanyId || window.state?.currentCompany?.id;
        const userId = window.state?.currentUser?.uid || 'demo-user';
        
        if (!companyId) {
            console.warn('‚ö†Ô∏è ID –∫–æ–º–ø–∞–Ω—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ');
        }
        
        const formData = {
            name: name,
            calculationType: calculationType,
            calculationMethod: calculationMethod,
            description: description,
            companyId: companyId,
            createdBy: userId,
            createdAt: new Date().toISOString(),
            isActive: true
        };
        
        // –î–æ–¥–∞—î–º–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É —è–∫—â–æ —Ü–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥
        if (calculationMethod.startsWith('auto_')) {
            formData.nomenclatureFilters = {
                items: window.currentNomenclatureSelection || [],
                filterType: window.currentNomenclatureFilterType || 'include'
            };
        }
        
        let focusTypeId;
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Firebase –∞–±–æ –ª–æ–∫–∞–ª—å–Ω–æ
        if (companyId) {
            try {
                const focusTypesRef = firebase.collection(firebase.db, 'companies', companyId, 'focusTypes');
                const docRef = await firebase.addDoc(focusTypesRef, formData);
                focusTypeId = docRef.id;
                console.log('‚úÖ –ù–æ–≤–∏–π —Ç–∏–ø —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ Firebase:', docRef.id);
            } catch (firebaseError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Firebase:', firebaseError);
                throw firebaseError;
            }
        } else {
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
            focusTypeId = 'focus-' + Date.now();
            formData.id = focusTypeId;
            
            if (!getState().planFactData.focusTypes) {
                getState().planFactData.focusTypes = [];
            }
            getState().planFactData.focusTypes.push(formData);
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
            try {
                localStorage.setItem('planFactData', JSON.stringify({
                    planTemplates: getState().planFactData.planTemplates,
                    focusTypes: getState().planFactData.focusTypes,
                    plans: getState().planFactData.plans,
                    goals: getState().planFactData.goals
                }));
                console.log('‚úÖ –ù–æ–≤–∏–π —Ç–∏–ø —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', focusTypeId);
            } catch (storageError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ localStorage:', storageError);
            }
        }
        
        showToast('‚úÖ –¢–∏–ø —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ', 'success');
        
        // –û—á–∏—â–∞—î–º–æ —Ñ–æ—Ä–º—É
        document.getElementById('createFocusTypeForm').reset();
        window.currentNomenclatureSelection = [];
        window.currentNomenclatureFilterType = 'include';
        document.getElementById('selected-nomenclature-info').textContent = '–ù–µ –æ–±—Ä–∞–Ω–æ';
        document.getElementById('nomenclature-section').classList.add('hidden');
        
        // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        closeModal('createFocusTypeModal');
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–∏–ø—ñ–≤
        if (window.loadFocusTypesFromFirebase) {
            await window.loadFocusTypesFromFirebase();
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º DOM
        const focusTypesList = document.getElementById('focusTypesList');
        if (focusTypesList) {
            focusTypesList.innerHTML = renderFocusTypesList();
            console.log('‚úÖ –°–ø–∏—Å–æ–∫ —Ç–∏–ø—ñ–≤ —Ñ–æ–∫—É—Å–Ω–∏—Ö –∑–∞–¥–∞—á –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ DOM');
        } else {
            console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä focusTypesList –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∏–ø—É —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ:', error);
        showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∏–ø—É —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ', 'error');
    }
}

/**
 * –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É —Ñ–æ–∫—É—Å—É
 */
window.editFocusType = function(focusTypeId) {
    const focusType = getState().planFactData?.focusTypes?.find(f => f.id === focusTypeId);
    if (!focusType) {
        alert('–¢–∏–ø —Ñ–æ–∫—É—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60';
    modal.innerHTML = `
        <div class="bg-gray-800 rounded-lg p-6 w-full max-w-3xl max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-2xl font-bold text-white">–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É —Ñ–æ–∫—É—Å—É: ${focusType.name}</h2>
                <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-white text-2xl">&times;</button>
            </div>
            
            <form id="edit-focus-type-form" class="space-y-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–ù–∞–∑–≤–∞ —Ç–∏–ø—É *</label>
                        <input type="text" id="edit-focus-type-name" class="w-full bg-gray-600 text-white rounded border border-gray-500 p-2" 
                               value="${focusType.name}" required>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–¢–∏–ø —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É *</label>
                        <select id="edit-focus-type-type" class="w-full bg-gray-600 text-white rounded border border-gray-500 p-2" required>
                            <option value="quantity" ${focusType.calculationType === 'quantity' ? 'selected' : ''}>–ö—ñ–ª—å–∫—ñ—Å–Ω–∏–π</option>
                            <option value="revenue" ${focusType.calculationType === 'revenue' ? 'selected' : ''}>–ì—Ä–æ—à–æ–≤–∏–π</option>
                        </select>
                    </div>
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-1">–ú–µ—Ç–æ–¥ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É *</label>
                    <select id="edit-calculation-method" class="w-full bg-gray-600 text-white rounded border border-gray-500 p-2" 
                            onchange="toggleEditNomenclatureSection()" required>
                        <option value="manual" ${focusType.calculationMethod === 'manual' ? 'selected' : ''}>–†—É—á–Ω–∏–π –≤–≤—ñ–¥</option>
                        <option value="clients_count" ${focusType.calculationMethod === 'clients_count' ? 'selected' : ''}>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤</option>
                        <option value="orders_count" ${focusType.calculationMethod === 'orders_count' ? 'selected' : ''}>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å</option>
                        <option value="average_check" ${focusType.calculationMethod === 'average_check' ? 'selected' : ''}>–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫</option>
                        <option value="total_revenue" ${focusType.calculationMethod === 'total_revenue' ? 'selected' : ''}>–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∏—Ä—É—á–∫–∞</option>
                        <option value="unique_products" ${focusType.calculationMethod === 'unique_products' ? 'selected' : ''}>–£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ç–æ–≤–∞—Ä–∏</option>
                        <option value="auto_api" ${focusType.calculationMethod === 'auto_api' ? 'selected' : ''}>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑ API</option>
                    </select>
                </div>
                
                <!-- –°–µ–∫—Ü—ñ—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ -->
                <div id="edit-nomenclature-section" class="${focusType.calculationMethod?.startsWith('auto_') || focusType.nomenclatureFilters ? '' : 'hidden'}">
                    <label class="block text-sm font-medium text-gray-300 mb-2">–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É</label>
                    <div class="space-y-3">
                        <div class="flex items-center justify-between p-3 bg-gray-700 rounded-md border border-gray-600">
                            <div>
                                <span class="text-white font-medium">–û–±—Ä–∞–Ω–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞:</span>
                                <p class="text-sm text-gray-400" id="edit-selected-nomenclature-info">
                                    ${focusType.nomenclatureFilters && focusType.nomenclatureFilters.items && focusType.nomenclatureFilters.items.length > 0 
                                        ? `–û–±—Ä–∞–Ω–æ ${focusType.nomenclatureFilters.items.length} –ø–æ–∑–∏—Ü—ñ–π (${focusType.nomenclatureFilters.filterType === 'include' ? '–≤–∫–ª—é—á–∏—Ç–∏' : '–≤–∏–∫–ª—é—á–∏—Ç–∏'})`
                                        : '–ù–µ –æ–±—Ä–∞–Ω–æ'
                                    }
                                </p>
                                ${focusType.nomenclatureFilters && focusType.nomenclatureFilters.items && focusType.nomenclatureFilters.items.length > 0 
                                    ? `<div class="mt-2">
                                        <div class="text-xs text-gray-500">–û–±—Ä–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó:</div>
                                        <div class="mt-1 flex flex-wrap gap-1">
                                            ${focusType.nomenclatureFilters.items.map(item => 
                                                `<span class="px-2 py-1 bg-blue-600 text-white rounded text-xs">${item}</span>`
                                            ).join('')}
                                        </div>
                                    </div>`
                                    : ''
                                }
                            </div>
                            <button type="button" id="edit-select-nomenclature-btn" 
                                    class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500 transition-colors">
                                ${focusType.nomenclatureFilters && focusType.nomenclatureFilters.items && focusType.nomenclatureFilters.items.length > 0 ? '–ó–º—ñ–Ω–∏—Ç–∏' : '–û–±—Ä–∞—Ç–∏'}
                            </button>
                        </div>
                    </div>
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-1">–û–ø–∏—Å</label>
                    <textarea id="edit-focus-type-description" class="w-full bg-gray-600 text-white rounded border border-gray-500 p-2" rows="3">${focusType.description || ''}</textarea>
                </div>
                
                <div class="flex justify-end gap-4">
                    <button type="button" onclick="this.closest('.fixed').remove()" 
                            class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700">
                        –°–∫–∞—Å—É–≤–∞—Ç–∏
                    </button>
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                        –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏
                    </button>
                </div>
            </form>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    window.currentEditNomenclatureSelection = focusType.nomenclatureFilters?.items || [];
    window.currentEditNomenclatureFilterType = focusType.nomenclatureFilters?.filterType || 'include';
    
    // –û–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ä–º–∏
    document.getElementById('edit-focus-type-form').onsubmit = function(e) {
        e.preventDefault();
        updateFocusType(focusTypeId);
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
    document.getElementById('edit-select-nomenclature-btn').onclick = function() {
        openEditNomenclatureSelector();
    };
};

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ
 */
window.toggleEditNomenclatureSection = function() {
    const calculationMethod = document.getElementById('edit-calculation-method').value;
    const nomenclatureSection = document.getElementById('edit-nomenclature-section');
    
    if (calculationMethod.startsWith('auto_') || ['clients_count', 'orders_count', 'average_check', 'total_revenue', 'unique_products'].includes(calculationMethod)) {
        nomenclatureSection.classList.remove('hidden');
    } else {
        nomenclatureSection.classList.add('hidden');
    }
};

/**
 * –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ
 */
function openEditNomenclatureSelector() {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
    if (typeof openNomenclatureSelector === 'function') {
        openNomenclatureSelector(
            window.currentEditNomenclatureSelection || [],
            window.currentEditNomenclatureFilterType || 'include'
        );
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if (typeof setNomenclatureSelectionCallback === 'function') {
            setNomenclatureSelectionCallback(function(result) {
                window.currentEditNomenclatureSelection = result.items;
                window.currentEditNomenclatureFilterType = result.filterType;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                const infoElement = document.getElementById('edit-selected-nomenclature-info');
                if (infoElement) {
                    if (result.items.length > 0) {
                        infoElement.textContent = `–û–±—Ä–∞–Ω–æ ${result.items.length} –ø–æ–∑–∏—Ü—ñ–π (${result.filterType === 'include' ? '–≤–∫–ª—é—á–∏—Ç–∏' : '–≤–∏–∫–ª—é—á–∏—Ç–∏'})`;
                    } else {
                        infoElement.textContent = '–ù–µ –æ–±—Ä–∞–Ω–æ';
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                const btnElement = document.getElementById('edit-select-nomenclature-btn');
                if (btnElement) {
                    btnElement.textContent = result.items.length > 0 ? '–ó–º—ñ–Ω–∏—Ç–∏' : '–û–±—Ä–∞—Ç–∏';
                }
            });
        }
    } else {
        showToast('‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π', 'error');
    }
}

/**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∏–ø—É —Ñ–æ–∫—É—Å—É
 */
async function updateFocusType(focusTypeId) {
    try {
        const focusType = getState().planFactData?.focusTypes?.find(f => f.id === focusTypeId);
        if (!focusType) {
            showToast('‚ùå –¢–∏–ø —Ñ–æ–∫—É—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error');
            return;
        }
        
        const name = document.getElementById('edit-focus-type-name').value.trim();
        const calculationType = document.getElementById('edit-focus-type-type').value;
        const calculationMethod = document.getElementById('edit-calculation-method').value;
        const description = document.getElementById('edit-focus-type-description').value.trim();
        
        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        if (!name || !calculationType || !calculationMethod) {
            showToast('‚ùå –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è', 'error');
            return;
        }
        
        const updatedData = {
            name: name,
            calculationType: calculationType,
            calculationMethod: calculationMethod,
            description: description,
            updatedAt: new Date().toISOString(),
            updatedBy: window.state?.currentUser?.uid || 'demo-user'
        };
        
        // –î–æ–¥–∞—î–º–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É —è–∫—â–æ —Ü–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥
        if (calculationMethod.startsWith('auto_') || ['clients_count', 'orders_count', 'average_check', 'total_revenue', 'unique_products'].includes(calculationMethod)) {
            updatedData.nomenclatureFilters = {
                items: window.currentEditNomenclatureSelection || [],
                filterType: window.currentEditNomenclatureFilterType || 'include'
            };
        } else {
            // –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
            updatedData.nomenclatureFilters = null;
        }
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –æ–±'—î–∫—Ç—ñ
        Object.assign(focusType, updatedData);
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Firebase –∞–±–æ localStorage
        const companyId = window.state?.currentCompanyId;
        if (companyId) {
            try {
                const focusTypeRef = firebase.doc(firebase.db, 'companies', companyId, 'focusTypes', focusTypeId);
                await firebase.updateDoc(focusTypeRef, updatedData);
                console.log('‚úÖ –¢–∏–ø —Ñ–æ–∫—É—Å—É –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ Firebase');
            } catch (firebaseError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ Firebase:', firebaseError);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            }
        } else {
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
            try {
                localStorage.setItem('planFactData', JSON.stringify({
                    planTemplates: getState().planFactData.planTemplates,
                    focusTypes: getState().planFactData.focusTypes,
                    plans: getState().planFactData.plans,
                    goals: getState().planFactData.goals
                }));
                console.log('‚úÖ –¢–∏–ø —Ñ–æ–∫—É—Å—É –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ localStorage');
            } catch (storageError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ localStorage:', storageError);
            }
        }
        
        showToast('‚úÖ –¢–∏–ø —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!', 'success');
        
        // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        document.querySelector('.fixed').remove();
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É
        const focusTypesList = document.getElementById('focusTypesList');
        if (focusTypesList) {
            focusTypesList.innerHTML = renderFocusTypesList();
            console.log('‚úÖ –°–ø–∏—Å–æ–∫ —Ç–∏–ø—ñ–≤ —Ñ–æ–∫—É—Å–Ω–∏—Ö –∑–∞–¥–∞—á –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è');
        }
        
        // –û—á–∏—â–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
        window.currentEditNomenclatureSelection = [];
        window.currentEditNomenclatureFilterType = 'include';
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∏–ø—É —Ñ–æ–∫—É—Å—É:', error);
        showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∏–ø—É —Ñ–æ–∫—É—Å—É', 'error');
    }
}

/**
 * –ê–∫—Ç–∏–≤–∞—Ü—ñ—è —Ç–∏–ø—É —Ñ–æ–∫—É—Å—É
 */
window.activateFocusType = function(focusTypeId) {
    const focusType = getState().planFactData?.focusTypes?.find(f => f.id === focusTypeId);
    if (focusType) {
        focusType.active = true;
        renderFocusManagerTab();
        alert('‚úÖ –¢–∏–ø —Ñ–æ–∫—É—Å—É –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!');
    }
};

/**
 * –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è —Ç–∏–ø—É —Ñ–æ–∫—É—Å—É
 */
window.deactivateFocusType = function(focusTypeId) {
    const focusType = getState().planFactData?.focusTypes?.find(f => f.id === focusTypeId);
    if (focusType) {
        focusType.active = false;
        renderFocusManagerTab();
        alert('‚úÖ –¢–∏–ø —Ñ–æ–∫—É—Å—É –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!');
    }
};

/**
 * –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–ø—É —Ñ–æ–∫—É—Å—É
 */
window.deleteFocusType = function(focusTypeId) {
    if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Ç–∏–ø —Ñ–æ–∫—É—Å—É? –¶–µ –º–æ–∂–µ –≤–ø–ª–∏–Ω—É—Ç–∏ –Ω–∞ —ñ—Å–Ω—É—é—á—ñ –ø–ª–∞–Ω–∏.')) {
        const index = getState().planFactData?.focusTypes?.findIndex(f => f.id === focusTypeId);
        if (index !== -1) {
            getState().planFactData.focusTypes.splice(index, 1);
            renderFocusManagerTab();
            alert('‚úÖ –¢–∏–ø —Ñ–æ–∫—É—Å—É –≤–∏–¥–∞–ª–µ–Ω–æ!');
        }
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –º–µ—Ç–æ–¥–∞ —Ä–∞—Å—á–µ—Ç–∞
 */
function getCalculationMethodLabel(method) {
    switch (method) {
        case 'auto_average_check':
            return '–ê–≤—Ç–æ: —Å–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫';
        case 'auto_clients_count':
            return '–ê–≤—Ç–æ: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤';
        case 'auto_orders_count':
            return '–ê–≤—Ç–æ: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å';
        case 'auto_sales_amount':
            return '–ê–≤—Ç–æ: —Å—É–º–∞ –ø—Ä–æ–¥–∞–∂—ñ–≤';
        case 'auto_calls_count':
            return '–ê–≤—Ç–æ: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–∑–≤—ñ–Ω–∫—ñ–≤';
        case 'manual':
        default:
            return '–†—É—á–Ω–∏–π –≤–≤—ñ–¥';
    }
} 