// constructor.js - –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–ª–∞–Ω–æ–≤ —ñ —à–∞–±–ª–æ–Ω—ñ–≤

// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å—Ç–∞–Ω—É
import { getState, updateState } from './state.js';

import * as firebase from '../firebase.js';
import { openNomenclatureSelector, setNomenclatureSelectionCallback } from './nomenclatureSelector.js';

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–ª–∞–Ω—ñ–≤
 */
export function renderConstructorTab(container = null) {
    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—â–µ–º –µ–≥–æ
    if (!container) {
        container = document.getElementById('plan-fact-content');
    }
    
    if (!container) return;
    
    container.innerHTML = `
        <div class="space-y-6">
            <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ –∫–Ω–æ–ø–∫–∏ -->
            <div class="flex justify-between items-center">
                <h2 class="text-xl font-bold text-white">–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω—ñ–≤ –ø–ª–∞–Ω—ñ–≤</h2>
                <button onclick="showCreatePlanTemplateModal()" 
                        class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">
                    + –°—Ç–≤–æ—Ä–∏—Ç–∏ —à–∞–±–ª–æ–Ω
                </button>
            </div>
            
            <!-- –§—ñ–ª—å—Ç—Ä–∏ -->
            <div class="bg-gray-700 rounded-lg p-4">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–ú—ñ—Å—è—Ü—å</label>
                        <input type="month" id="constructorMonth" class="w-full bg-gray-600 border border-gray-500 rounded text-white p-2" 
                               value="${new Date().toISOString().slice(0, 7)}" onchange="loadPlanTemplatesForMonth()">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–í—ñ–¥–¥—ñ–ª</label>
                        <select id="constructorDepartment" class="w-full bg-gray-600 border border-gray-500 rounded text-white p-2" onchange="loadPlanTemplatesForMonth()">
                            <option value="">–í—Å—ñ –≤—ñ–¥–¥—ñ–ª–∏</option>
                            ${getState().planFactData?.departments?.map(dept => 
                                `<option value="${dept.id}">${dept.name}</option>`
                            ).join('') || ''}
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">–°—Ç–∞—Ç—É—Å</label>
                        <select id="constructorStatus" class="w-full bg-gray-600 border border-gray-500 rounded text-white p-2" onchange="loadPlanTemplatesForMonth()">
                            <option value="">–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏</option>
                            <option value="active">–ê–∫—Ç–∏–≤–Ω—ñ</option>
                            <option value="draft">–ß–µ—Ä–Ω–µ—Ç–∫–∏</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <!-- –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω—ñ–≤ –ø–ª–∞–Ω—ñ–≤ -->
            <div class="bg-gray-700 rounded-lg overflow-hidden">
                <div class="px-4 py-3 border-b border-gray-600">
                    <h3 class="text-lg font-bold text-white">–®–∞–±–ª–æ–Ω–∏ –ø–ª–∞–Ω—ñ–≤</h3>
                </div>
                <div id="planTemplatesList" class="p-4">
                    ${renderPlanTemplatesList()}
                </div>
            </div>
        </div>
    `;
    
    loadPlanTemplatesForMonth();
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω—ñ–≤ –ø–ª–∞–Ω—ñ–≤
 */
function renderPlanTemplatesList() {
    const filteredTemplates = getFilteredPlanTemplates();
    
    if (filteredTemplates.length === 0) {
        const hasCompanyId = !!window.state?.currentCompanyId;
        
        return `
            <div class="text-center py-8 text-gray-400">
                ${!hasCompanyId ? `
                    <div class="mb-6">
                        <div class="text-blue-400 text-4xl mb-4">üè¢</div>
                        <p class="text-lg font-medium text-blue-300 mb-2">–ö–æ–º–ø–∞–Ω—ñ—è –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞</p>
                        <p class="text-sm text-gray-400 max-w-md mx-auto">
                            –î–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–ª–∞–Ω–∞–º–∏ –ø—Ä–æ–¥–∞–∂—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ–º–ø–∞–Ω—ñ—ó —Ç–∞ –≤—ñ–¥–¥—ñ–ª—ñ–≤.
                        </p>
                    </div>
                ` : ''}
                <p>–ù–µ–º–∞—î —à–∞–±–ª–æ–Ω—ñ–≤ –ø–ª–∞–Ω—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è</p>
                <p class="text-sm mt-2">
                    ${hasCompanyId ? 
                        '–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —à–∞–±–ª–æ–Ω, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É "–°—Ç–≤–æ—Ä–∏—Ç–∏ —à–∞–±–ª–æ–Ω"' :
                        '–ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∫–æ–º–ø–∞–Ω—ñ—é —â–æ–± –ø–æ—á–∞—Ç–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ø–ª–∞–Ω–∏ –ø—Ä–æ–¥–∞–∂—ñ–≤'
                    }
                </p>
                ${!hasCompanyId ? `
                    <div class="mt-6 pt-4 border-t border-gray-600">
                        <button onclick="loadDemoData()" 
                                class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 text-sm">
                            üß™ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ–º–æ –¥–∞–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
                        </button>
                        <p class="text-xs text-gray-500 mt-2">–¢—ñ–ª—å–∫–∏ –¥–ª—è –æ–∑–Ω–∞–π–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º</p>
                    </div>
                ` : ''}
            </div>
        `;
    }
    
    return `
        <div class="space-y-4">
            ${filteredTemplates.map(template => `
                <div class="bg-gray-800 rounded-lg p-4 border border-gray-600">
                    <div class="flex justify-between items-start mb-3">
                        <div>
                            <h4 class="text-lg font-bold text-white">${template.name}</h4>
                            <p class="text-sm text-gray-400">${getDepartmentName(template.department || template.departmentId)}</p>
                            <p class="text-xs text-gray-500">–ú—ñ—Å—è—Ü—å: ${formatMonthKey(template.monthKey || template.month)}</p>
                            <p class="text-xs text-gray-500">–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂—ñ–≤: ${formatCurrency(template.salesPlan || template.revenuePlan)} –≥—Ä–Ω</p>
                        </div>
                        <div class="text-right">
                            <span class="px-2 py-1 rounded-full text-xs ${
                                template.status === 'active' ? 'bg-green-600 text-white' : 
                                template.status === 'draft' ? 'bg-yellow-600 text-white' :
                                'bg-gray-600 text-white'
                            }">
                                ${template.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : template.status === 'draft' ? '–ß–µ—Ä–Ω–µ—Ç–∫–∞' : '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–π'}
                            </span>
                        </div>
                    </div>
                    
                                         <!-- –§–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ -->
                     ${template.focusTasks && template.focusTasks.length > 0 ? `
                         <div class="mt-3">
                             <p class="text-sm font-medium text-gray-300 mb-2">–§–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ:</p>
                             <div class="flex flex-wrap gap-2">
                                 ${template.focusTasks.map(taskId => {
                                     const focusType = getFocusTypeById(taskId);
                                     return `
                                     <span class="px-2 py-1 bg-blue-600 text-white rounded text-xs">
                                             ${focusType ? focusType.name : taskId}
                                     </span>
                                     `;
                                 }).join('')}
                             </div>
                         </div>
                     ` : ''}
                     
                     <!-- –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ -->
                     ${template.nomenclatureFilters ? `
                         <div class="mt-3">
                             <p class="text-sm font-medium text-gray-300 mb-2">–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏:</p>
                             <div class="space-y-1">
                                 ${template.nomenclatureFilters.category1 && template.nomenclatureFilters.category1.length > 0 ? `
                                     <div class="text-xs">
                                         <span class="text-gray-400">–ö–∞—Ç. 1:</span>
                                         <span class="text-white">${template.nomenclatureFilters.category1.join(', ')}</span>
                                     </div>
                                 ` : ''}
                                 ${template.nomenclatureFilters.category2 && template.nomenclatureFilters.category2.length > 0 ? `
                                     <div class="text-xs">
                                         <span class="text-gray-400">–ö–∞—Ç. 2:</span>
                                         <span class="text-white">${template.nomenclatureFilters.category2.join(', ')}</span>
                                     </div>
                                 ` : ''}
                                 ${template.nomenclatureFilters.category3 && template.nomenclatureFilters.category3.length > 0 ? `
                                     <div class="text-xs">
                                         <span class="text-gray-400">–ö–∞—Ç. 3:</span>
                                         <span class="text-white">${template.nomenclatureFilters.category3.join(', ')}</span>
                                     </div>
                                 ` : ''}
                                 ${(!template.nomenclatureFilters.category1 || template.nomenclatureFilters.category1.length === 0) &&
                                   (!template.nomenclatureFilters.category2 || template.nomenclatureFilters.category2.length === 0) &&
                                   (!template.nomenclatureFilters.category3 || template.nomenclatureFilters.category3.length === 0) ? `
                                     <div class="text-xs text-gray-400">–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</div>
                                 ` : ''}
                             </div>
                         </div>
                     ` : ''}
                    
                    <!-- –î—ñ—ó -->
                    <div class="flex gap-2 mt-4">
                        <button onclick="viewPlanTemplate('${template.id}')" 
                                class="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700">
                            –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏
                        </button>
                        <button onclick="editPlanTemplate('${template.id}')" 
                                class="px-3 py-1 bg-yellow-600 text-white rounded text-sm hover:bg-yellow-700">
                            –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                        </button>
                        <button onclick="copyPlanTemplate('${template.id}')" 
                                class="px-3 py-1 bg-green-600 text-white rounded text-sm hover:bg-green-700">
                            –ö–æ–ø—ñ—é–≤–∞—Ç–∏
                        </button>
                        <button onclick="activatePlanTemplate('${template.id}')" 
                                class="px-3 py-1 bg-purple-600 text-white rounded text-sm hover:bg-purple-700">
                            ${template.status === 'active' ? '–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏' : '–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏'}
                        </button>
                        <button onclick="deletePlanTemplate('${template.id}')" 
                                class="px-3 py-1 bg-red-600 text-white rounded text-sm hover:bg-red-700">
                            –í–∏–¥–∞–ª–∏—Ç–∏
                        </button>
                    </div>
                </div>
            `).join('')}
        </div>
    `;
}

/**
 * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É
 */
window.showCreatePlanTemplateModal = function() {
    const modalHTML = `
        <div id="createPlanTemplateModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
            <div class="bg-gray-800 rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
                <div class="p-6">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-xl font-semibold text-white">–°—Ç–≤–æ—Ä–∏—Ç–∏ —à–∞–±–ª–æ–Ω –ø–ª–∞–Ω—É</h3>
                    <button onclick="closeModal('createPlanTemplateModal')" class="text-gray-400 hover:text-white">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                
                <form id="createPlanTemplateForm" class="space-y-6">
                    <!-- –ù–∞–∑–≤–∞ —à–∞–±–ª–æ–Ω—É -->
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ù–∞–∑–≤–∞ —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É</label>
                        <input type="text" id="template-name" required 
                               class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                               placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ü–ª–∞–Ω –ó–∞–∫–ª–∞–¥–∏, –ü–ª–∞–Ω –†–µ—Å—Ç–æ—Ä–∞–Ω">
                    </div>
                    
                    <!-- –í—ñ–¥–¥—ñ–ª -->
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–í—ñ–¥–¥—ñ–ª</label>
                        <select id="template-department" required 
                                class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:border-blue-500">
                            <option value="">–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª</option>
                            ${getState().planFactData?.departments?.map(dept => 
                                `<option value="${dept.id}">${dept.name}</option>`
                            ).join('') || '<option disabled>–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–¥–¥—ñ–ª—ñ–≤</option>'}
                        </select>
                    </div>
                    
                    <!-- –ú—ñ—Å—è—Ü—å -->
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ú—ñ—Å—è—Ü—å</label>
                        <input type="month" id="template-month" required 
                               class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:border-blue-500">
                    </div>
                    
                    <!-- –ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂—ñ–≤ -->
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂—ñ–≤ (–≥—Ä–Ω)</label>
                        <input type="number" id="template-sales-plan" required min="0" step="1000"
                               class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                               placeholder="–í–≤–µ–¥—ñ—Ç—å –ø–ª–∞–Ω –ø—Ä–æ–¥–∞–∂—ñ–≤">
                    </div>
                    
                    <!-- –§–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ -->
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–§–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ</label>
                        <div id="focus-tasks-container" class="space-y-2">
                            <!-- –§–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –¥–∏–Ω–∞–º—ñ—á–Ω–æ -->
                        </div>
                        <button type="button" id="add-focus-task-btn" 
                                class="mt-2 px-3 py-1 bg-green-600 text-white text-sm rounded-md hover:bg-green-500">
                            + –î–æ–¥–∞—Ç–∏ —Ñ–æ–∫—É—Å–Ω—É –∑–∞–¥–∞—á—É
                        </button>
                    </div>
                    
                    <!-- –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ñ–∞–∫—Ç—ñ–≤ -->
                    <div id="template-nomenclature-section">
                        <label class="block text-sm font-medium text-gray-300 mb-2">–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ñ–∞–∫—Ç—ñ–≤</label>
                        <div class="space-y-3">
                            <div class="flex items-center justify-between p-3 bg-gray-700 rounded-md border border-gray-600">
                                <div>
                                    <span class="text-white font-medium">–û–±—Ä–∞—Ç–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É</span>
                                    <p class="text-sm text-gray-400" id="template-selected-nomenclature-info">–ù–µ –æ–±—Ä–∞–Ω–æ</p>
                                </div>
                                <button type="button" id="select-template-nomenclature-btn" 
                                        class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500 transition-colors">
                                    –û–±—Ä–∞—Ç–∏
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- –û–ø–∏—Å -->
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">–û–ø–∏—Å (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)</label>
                        <textarea id="template-description" rows="3"
                                  class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                  placeholder="–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É"></textarea>
                    </div>
                    
                    <!-- –ö–Ω–æ–ø–∫–∏ -->
                    <div class="flex justify-end space-x-3 pt-4">
                        <button type="button" onclick="closeModal('createPlanTemplateModal')" 
                                class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-500">
                            –°–∫–∞—Å—É–≤–∞—Ç–∏
                        </button>
                        <button type="submit" 
                                class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500">
                            –°—Ç–≤–æ—Ä–∏—Ç–∏ —à–∞–±–ª–æ–Ω
                        </button>
                    </div>
                </form>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    setupTemplateFormEventListeners();
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ
    loadFocusTasksForTemplate();
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    document.getElementById('createPlanTemplateModal').classList.remove('hidden');
};

/**
 * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É –≤ —à–∞–±–ª–æ–Ω–∞—Ö
 */
function setupTemplateHierarchicalEventListeners() {
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó 1
    document.querySelectorAll('.template-nomenclature-category1-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            const isChecked = this.checked;
            const categoryName = this.value;
            const hasChildren = this.dataset.hasChildren === 'true';
            const children = this.dataset.children ? this.dataset.children.split(',') : [];
            
            if (hasChildren) {
                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ—Ö –¥—ñ—Ç–µ–π
                children.forEach(childName => {
                    const childCheckbox = document.querySelector(`.template-nomenclature-category2-checkbox[value="${childName}"]`);
                    if (childCheckbox) {
                        childCheckbox.checked = isChecked;
                        childCheckbox.indeterminate = false;
                    }
                });
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
            updateTemplateParentCheckboxState(this);
        });
    });
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó 2
    document.querySelectorAll('.template-nomenclature-category2-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            const isChecked = this.checked;
            const categoryName = this.value;
            const hasChildren = this.dataset.hasChildren === 'true';
            const children = this.dataset.children ? this.dataset.children.split(',') : [];
            
            if (hasChildren) {
                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ—Ö –¥—ñ—Ç–µ–π
                children.forEach(childName => {
                    const childCheckbox = document.querySelector(`.template-nomenclature-category3-checkbox[value="${childName}"]`);
                    if (childCheckbox) {
                        childCheckbox.checked = isChecked;
                        childCheckbox.indeterminate = false;
                    }
                });
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
            updateTemplateParentCheckboxState(this);
        });
    });
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó 3
    document.querySelectorAll('.template-nomenclature-category3-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            updateTemplateParentCheckboxState(this);
        });
    });
}

/**
 * –û–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ —á–µ–∫–±–æ–∫—Å—É –¥–ª—è —à–∞–±–ª–æ–Ω—ñ–≤
 */
function updateTemplateParentCheckboxState(childCheckbox) {
    const parentName = childCheckbox.dataset.parent;
    if (!parentName) return;
    
    const parentCheckbox = document.querySelector(`.template-nomenclature-category${childCheckbox.dataset.category - 1}-checkbox[value="${parentName}"]`);
    if (!parentCheckbox) return;
    
    const siblings = document.querySelectorAll(`.template-nomenclature-category${childCheckbox.dataset.category}-checkbox[data-parent="${parentName}"]`);
    const checkedSiblings = Array.from(siblings).filter(cb => cb.checked);
    const uncheckedSiblings = Array.from(siblings).filter(cb => !cb.checked);
    
    if (checkedSiblings.length === siblings.length) {
        // –í—Å—ñ –¥—ñ—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ
        parentCheckbox.checked = true;
        parentCheckbox.indeterminate = false;
    } else if (checkedSiblings.length === 0) {
        // –ñ–æ–¥–µ–Ω –∑ –¥—ñ—Ç–µ–π –Ω–µ –≤–∏–±—Ä–∞–Ω–∏–π
        parentCheckbox.checked = false;
        parentCheckbox.indeterminate = false;
    } else {
        // –ß–∞—Å—Ç–∫–æ–≤–æ –≤–∏–±—Ä–∞–Ω—ñ –¥—ñ—Ç–∏
        parentCheckbox.checked = false;
        parentCheckbox.indeterminate = true;
    }
}

/**
 * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É –≤ —à–∞–±–ª–æ–Ω–∞—Ö
 */
function setupTemplateFormEventListeners() {
    const selectNomenclatureBtn = document.getElementById('select-template-nomenclature-btn');
    const addFocusTaskBtn = document.getElementById('add-focus-task-btn');
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏
    selectNomenclatureBtn.addEventListener('click', function() {
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –≤–∏–±—ñ—Ä –∑ —Ñ–æ—Ä–º–∏
        const currentSelection = window.currentTemplateNomenclatureSelection || [];
        const currentFilterType = window.currentTemplateNomenclatureFilterType || 'include';
        
        // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏
        openNomenclatureSelector(currentSelection, currentFilterType);
    });
    
    // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ callback –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏
    setNomenclatureSelectionCallback(function(result) {
        window.currentTemplateNomenclatureSelection = result.items;
        window.currentTemplateNomenclatureFilterType = result.filterType;
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–±—ñ—Ä
        const infoElement = document.getElementById('template-selected-nomenclature-info');
        if (result.items.length > 0) {
            infoElement.textContent = `–û–±—Ä–∞–Ω–æ ${result.items.length} –ø–æ–∑–∏—Ü—ñ–π (${result.filterType === 'include' ? '–≤–∫–ª—é—á–∏—Ç–∏' : '–≤–∏–∫–ª—é—á–∏—Ç–∏'})`;
        } else {
            infoElement.textContent = '–ù–µ –æ–±—Ä–∞–Ω–æ';
        }
    });
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ
    addFocusTaskBtn.addEventListener('click', addFocusTaskToTemplate);
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏
    document.getElementById('createPlanTemplateForm').addEventListener('submit', saveNewPlanTemplate);
}

/**
 * –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ –¥–æ —à–∞–±–ª–æ–Ω—É
 */
function addFocusTaskToTemplate() {
    const container = document.getElementById('focus-tasks-container');
    const taskId = `focus-task-${Date.now()}`;
    
    const taskHTML = `
        <div id="${taskId}" class="flex items-center space-x-3 p-3 bg-gray-700 rounded-md border border-gray-600">
            <select class="focus-task-type flex-1 px-3 py-2 bg-gray-600 border border-gray-500 rounded-md text-white focus:outline-none focus:border-blue-500">
                <option value="">–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ</option>
                ${getState().planFactData.focusTypes ? getState().planFactData.focusTypes.map(type => 
                    `<option value="${type.id}">${type.name}</option>`
                ).join('') : ''}
            </select>
            <button type="button" onclick="removeFocusTaskFromTemplate('${taskId}')" 
                    class="px-3 py-2 bg-red-600 text-white rounded-md hover:bg-red-500">
                –í–∏–¥–∞–ª–∏—Ç–∏
            </button>
        </div>
    `;
    
    container.insertAdjacentHTML('beforeend', taskHTML);
}

/**
 * –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ –∑ —à–∞–±–ª–æ–Ω—É
 */
window.removeFocusTaskFromTemplate = function(taskId) {
    const taskElement = document.getElementById(taskId);
    if (taskElement) {
        taskElement.remove();
    }
};

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ–∫—É—Å–Ω–∏—Ö –∑–∞–¥–∞—á –¥–ª—è —à–∞–±–ª–æ–Ω—É
 */
async function loadFocusTasksForTemplate() {
    try {
        const state = getState();
        if (!state.planFactData.focusTypes) {
            if (window.loadFocusTypesFromFirebase) {
                await window.loadFocusTypesFromFirebase();
            }
        }
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –æ–ø—Ü—ñ—ó –≤ —ñ—Å–Ω—É—é—á–∏—Ö —Å–µ–ª–µ–∫—Ç–∞—Ö
        const focusTaskSelects = document.querySelectorAll('.focus-task-type');
        focusTaskSelects.forEach(select => {
            const currentValue = select.value;
            select.innerHTML = '<option value="">–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ</option>' +
                state.planFactData.focusTypes.map(type => 
                    `<option value="${type.id}" ${type.id === currentValue ? 'selected' : ''}>${type.name}</option>`
                ).join('');
        });
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ–∫—É—Å–Ω–∏—Ö –∑–∞–¥–∞—á –¥–ª—è —à–∞–±–ª–æ–Ω—É:', error);
    }
}

/**
 * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É
 */
async function saveNewPlanTemplate(e) {
    e.preventDefault();
    
    try {
        const name = document.getElementById('template-name').value.trim();
        const department = document.getElementById('template-department').value;
        const month = document.getElementById('template-month').value;
        const salesPlan = parseFloat(document.getElementById('template-sales-plan').value);
        const description = document.getElementById('template-description').value.trim();
        
        if (!name || !department || !month || !salesPlan) {
            showToast('‚ùå –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è', 'error');
            return;
        }
        
        // –ó–±–∏—Ä–∞—î–º–æ –æ–±—Ä–∞–Ω—ñ —Ñ–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ
        const selectedFocusTasks = [];
        document.querySelectorAll('.focus-task-type').forEach(select => {
            if (select.value) {
                selectedFocusTasks.push(select.value);
            }
        });
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        const companyId = window.state?.currentCompanyId || window.state?.currentCompany?.id;
        const userId = window.state?.currentUser?.uid || 'demo-user';
        
        if (!companyId) {
            console.warn('‚ö†Ô∏è ID –∫–æ–º–ø–∞–Ω—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ');
        }
        
        const templateData = {
            name: name,
            department: department,
            monthKey: month.replace('-', ''),
            month: month,
            salesPlan: salesPlan,
            focusTasks: selectedFocusTasks,
            nomenclatureFilters: {
                items: window.currentTemplateNomenclatureSelection || [],
                filterType: window.currentTemplateNomenclatureFilterType || 'include'
            },
            description: description,
            companyId: companyId,
            createdBy: userId,
            createdAt: new Date().toISOString(),
            isActive: true
        };
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Firebase –∞–±–æ –ª–æ–∫–∞–ª—å–Ω–æ
        let templateId;
        if (companyId) {
            try {
                const templatesRef = firebase.collection(firebase.db, 'companies', companyId, 'planTemplates');
                const docRef = await firebase.addDoc(templatesRef, templateData);
                templateId = docRef.id;
                console.log('‚úÖ –ù–æ–≤–∏–π —à–∞–±–ª–æ–Ω –ø–ª–∞–Ω—É —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ Firebase:', docRef.id);
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Firebase:', error);
                throw error;
            }
        } else {
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
            templateId = 'template-' + Date.now();
            templateData.id = templateId;
            
            const state = getState();
            if (!state.planFactData.planTemplates) {
                updateState({ 
                    planFactData: { 
                        ...state.planFactData, 
                        planTemplates: [] 
                    } 
                });
            }
            updateState({ 
                planFactData: { 
                    ...state.planFactData, 
                    planTemplates: [...(state.planFactData.planTemplates || []), templateData] 
                } 
            });
            console.log('‚úÖ –ù–æ–≤–∏–π —à–∞–±–ª–æ–Ω –ø–ª–∞–Ω—É —Å—Ç–≤–æ—Ä–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', templateId);
        }
        
        showToast('‚úÖ –®–∞–±–ª–æ–Ω –ø–ª–∞–Ω—É —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ', 'success');
        
        // –û—á–∏—â–∞—î–º–æ —Ñ–æ—Ä–º—É
        document.getElementById('createPlanTemplateForm').reset();
        window.currentTemplateNomenclatureSelection = [];
        window.currentTemplateNomenclatureFilterType = 'include';
        document.getElementById('template-selected-nomenclature-info').textContent = '–ù–µ –æ–±—Ä–∞–Ω–æ';
        document.getElementById('focus-tasks-container').innerHTML = '';
        
        // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        const modal = document.getElementById('createPlanTemplateModal');
        if (modal) {
            modal.remove();
        }
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω—ñ–≤
        setTimeout(() => {
            loadPlanTemplatesForMonth();
            console.log('‚úÖ –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è');
        }, 100);
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É:', error);
        showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É', 'error');
    }
}

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ –ø–ª–∞–Ω—ñ–≤ –∑ Firebase
 */
async function loadPlanTemplatesFromFirebase() {
    try {
        if (!window.state?.currentCompanyId) return;
        
        const templatesRef = firebase.collection(firebase.db, 'companies', window.state.currentCompanyId, 'planTemplates');
        const snapshot = await firebase.getDocs(templatesRef);
        
        const templates = [];
        snapshot.forEach(doc => {
            templates.push({
                id: doc.id,
                ...doc.data()
            });
        });
        
        updateState({ 
            planFactData: { 
                ...getState().planFactData, 
                planTemplates: templates 
            } 
        });
        console.log('‚úÖ –®–∞–±–ª–æ–Ω–∏ –ø–ª–∞–Ω—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', templates.length);
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ –ø–ª–∞–Ω—ñ–≤:', error);
        updateState({ 
            planFactData: { 
                ...getState().planFactData, 
                planTemplates: [] 
            } 
        });
    }
}

/**
 * –ü–µ—Ä–µ–≥–ª—è–¥ —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É
 */
window.viewPlanTemplate = function(templateId) {
    const template = getState().planFactData.planTemplates?.find(t => t.id === templateId);
    if (!template) {
        alert('–®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
    modal.innerHTML = `
        <div class="bg-gray-800 rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-2xl font-bold text-white">–ü–µ—Ä–µ–≥–ª—è–¥ —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É</h2>
                <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-white text-2xl">&times;</button>
            </div>
            
            <div class="space-y-4">
                <div class="bg-gray-700 rounded-lg p-4">
                    <h3 class="text-lg font-bold text-white mb-3">–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
                    <div class="grid grid-cols-2 gap-4 text-sm">
                        <div>
                            <span class="text-gray-400">–ù–∞–∑–≤–∞:</span>
                            <p class="text-white font-medium">${template.name}</p>
                        </div>
                        <div>
                            <span class="text-gray-400">–í—ñ–¥–¥—ñ–ª:</span>
                            <p class="text-white font-medium">${template.departmentName}</p>
                        </div>
                        <div>
                            <span class="text-gray-400">–ú—ñ—Å—è—Ü—å:</span>
                            <p class="text-white font-medium">${formatMonthKey(template.monthKey)}</p>
                        </div>
                        <div>
                            <span class="text-gray-400">–°—Ç–∞—Ç—É—Å:</span>
                            <p class="text-white font-medium">${template.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–ß–µ—Ä–Ω–µ—Ç–∫–∞'}</p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-gray-700 rounded-lg p-4">
                    <h3 class="text-lg font-bold text-white mb-3">–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂—ñ–≤</h3>
                    <p class="text-2xl font-bold text-green-400">${formatCurrency(template.revenuePlan)} –≥—Ä–Ω</p>
                </div>
                
                ${template.focusTasks && template.focusTasks.length > 0 ? `
                    <div class="bg-gray-700 rounded-lg p-4">
                        <h3 class="text-lg font-bold text-white mb-3">–§–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ</h3>
                        <div class="space-y-2">
                            ${template.focusTasks.map(task => `
                                <div class="flex items-center gap-3 p-2 bg-gray-600 rounded">
                                    <span class="text-white font-medium">${task.focusTypeName}</span>
                                    <span class="text-gray-400 text-sm">(${task.focusType === 'quantity' ? '–ö—ñ–ª—å–∫—ñ—Å—Ç—å' : '–°—É–º–∞'} - ${task.focusUnit})</span>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                ` : ''}
            </div>
            
            <div class="flex justify-end mt-6">
                <button onclick="this.closest('.fixed').remove()" 
                        class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700">
                    –ó–∞–∫—Ä–∏—Ç–∏
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
};

/**
 * –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É
 */
window.editPlanTemplate = function(templateId) {
    const { planFactData } = getState();
    const template = planFactData.planTemplates?.find(t => t.id === templateId);
    if (!template) {
        showToast('‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ, –Ω–æ —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
    const modalHTML = `
        <div id="editPlanTemplateModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
            <div class="bg-gray-800 rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
                <div class="p-6">
                    <div class="flex items-center justify-between mb-6">
                        <h3 class="text-xl font-semibold text-white">–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —à–∞–±–ª–æ–Ω –ø–ª–∞–Ω—É: ${template.name}</h3>
                        <button onclick="closeModal('editPlanTemplateModal')" class="text-gray-400 hover:text-white">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                    
                    <form id="editPlanTemplateForm" class="space-y-6">
                        <!-- –ù–∞–∑–≤–∞ —à–∞–±–ª–æ–Ω—É -->
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">–ù–∞–∑–≤–∞ —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É</label>
                            <input type="text" id="edit-template-name" required 
                                   value="${template.name}"
                                   class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500">
                        </div>
                        
                        <!-- –í—ñ–¥–¥—ñ–ª -->
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">–í—ñ–¥–¥—ñ–ª</label>
                            <select id="edit-template-department" required 
                                    class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:border-blue-500">
                                <option value="">–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª</option>
                                ${getState().planFactData?.departments?.map(dept => 
                                    `<option value="${dept.id}" ${dept.id === template.department ? 'selected' : ''}>${dept.name}</option>`
                                ).join('') || '<option disabled>–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–¥–¥—ñ–ª—ñ–≤</option>'}
                            </select>
                        </div>
                        
                        <!-- –ú—ñ—Å—è—Ü—å -->
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">–ú—ñ—Å—è—Ü—å</label>
                            <input type="month" id="edit-template-month" required 
                                   value="${template.month || (template.monthKey ? template.monthKey.substring(0,4) + '-' + template.monthKey.substring(4,6) : '')}"
                                   class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:border-blue-500">
                        </div>
                        
                        <!-- –ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂—ñ–≤ -->
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂—ñ–≤ (–≥—Ä–Ω)</label>
                            <input type="number" id="edit-template-sales-plan" required min="0" step="1000"
                                   value="${template.salesPlan || 0}"
                                   class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500">
                        </div>
                        
                        <!-- –§–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ -->
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">–§–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ</label>
                            <div id="edit-focus-tasks-container" class="space-y-2">
                                <!-- –Ü—Å–Ω—É—é—á—ñ —Ñ–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ -->
                                ${template.focusTasks ? template.focusTasks.map(taskId => {
                                    const focusType = getFocusTypeById(taskId);
                                    const editTaskId = `edit-focus-task-${Date.now()}-${Math.random()}`;
                                    return `
                                        <div id="${editTaskId}" class="flex items-center space-x-3 p-3 bg-gray-700 rounded-md border border-gray-600">
                                            <select class="edit-focus-task-type flex-1 px-3 py-2 bg-gray-600 border border-gray-500 rounded-md text-white focus:outline-none focus:border-blue-500">
                                                <option value="">–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ</option>
                                                ${getState().planFactData.focusTypes ? getState().planFactData.focusTypes.map(type => 
                                                    `<option value="${type.id}" ${type.id === taskId ? 'selected' : ''}>${type.name}</option>`
                                                ).join('') : ''}
                                            </select>
                                            <button type="button" onclick="removeEditFocusTask('${editTaskId}')" 
                                                    class="px-3 py-2 bg-red-600 text-white rounded-md hover:bg-red-500">
                                                –í–∏–¥–∞–ª–∏—Ç–∏
                                            </button>
                                        </div>
                                    `;
                                }).join('') : ''}
                            </div>
                            <button type="button" id="edit-add-focus-task-btn" 
                                    class="mt-2 px-3 py-1 bg-green-600 text-white text-sm rounded-md hover:bg-green-500">
                                + –î–æ–¥–∞—Ç–∏ —Ñ–æ–∫—É—Å–Ω—É –∑–∞–¥–∞—á—É
                            </button>
                        </div>
                        
                        <!-- –û–ø–∏—Å -->
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">–û–ø–∏—Å (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)</label>
                            <textarea id="edit-template-description" rows="3"
                                      class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                      placeholder="–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É">${template.description || ''}</textarea>
                        </div>
                        
                        <!-- –ö–Ω–æ–ø–∫–∏ -->
                        <div class="flex justify-end space-x-3 pt-4">
                            <button type="button" onclick="closeModal('editPlanTemplateModal')" 
                                    class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-500">
                                –°–∫–∞—Å—É–≤–∞—Ç–∏
                            </button>
                            <button type="submit" 
                                    class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500">
                                –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    setupEditTemplateEventListeners(template);
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    document.getElementById('editPlanTemplateModal').classList.remove('hidden');
};

/**
 * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É
 */
function setupEditTemplateEventListeners(template) {
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ
    document.getElementById('edit-add-focus-task-btn').addEventListener('click', function() {
        const container = document.getElementById('edit-focus-tasks-container');
        const taskId = `edit-focus-task-${Date.now()}`;
        
        const taskHTML = `
            <div id="${taskId}" class="flex items-center space-x-3 p-3 bg-gray-700 rounded-md border border-gray-600">
                <select class="edit-focus-task-type flex-1 px-3 py-2 bg-gray-600 border border-gray-500 rounded-md text-white focus:outline-none focus:border-blue-500">
                    <option value="">–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ</option>
                    ${getState().planFactData.focusTypes ? getState().planFactData.focusTypes.map(type => 
                        `<option value="${type.id}">${type.name}</option>`
                    ).join('') : ''}
                </select>
                <button type="button" onclick="removeEditFocusTask('${taskId}')" 
                        class="px-3 py-2 bg-red-600 text-white rounded-md hover:bg-red-500">
                    –í–∏–¥–∞–ª–∏—Ç–∏
                </button>
            </div>
        `;
        
        container.insertAdjacentHTML('beforeend', taskHTML);
    });
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏
    document.getElementById('editPlanTemplateForm').addEventListener('submit', function(e) {
        saveEditedPlanTemplate(e, template);
    });
}

/**
 * –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ
 */
window.removeEditFocusTask = function(taskId) {
    const taskElement = document.getElementById(taskId);
    if (taskElement) {
        taskElement.remove();
    }
};

/**
 * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É
 */
async function saveEditedPlanTemplate(e, originalTemplate) {
    e.preventDefault();
    
    try {
        const name = document.getElementById('edit-template-name').value.trim();
        const department = document.getElementById('edit-template-department').value;
        const month = document.getElementById('edit-template-month').value;
        const salesPlan = parseFloat(document.getElementById('edit-template-sales-plan').value);
        const description = document.getElementById('edit-template-description').value.trim();
        
        if (!name || !department || !month || !salesPlan) {
            showToast('‚ùå –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è', 'error');
            return;
        }
        
        // –ó–±–∏—Ä–∞—î–º–æ –æ–±—Ä–∞–Ω—ñ —Ñ–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ
        const selectedFocusTasks = [];
        document.querySelectorAll('.edit-focus-task-type').forEach(select => {
            if (select.value) {
                selectedFocusTasks.push(select.value);
            }
        });
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —à–∞–±–ª–æ–Ω—É
        const updatedTemplate = {
            ...originalTemplate,
            name: name,
            department: department,
            monthKey: month.replace('-', ''),
            month: month,
            salesPlan: salesPlan,
            focusTasks: selectedFocusTasks,
            description: description,
            updatedAt: new Date().toISOString()
        };
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Firebase –∞–±–æ –ª–æ–∫–∞–ª—å–Ω–æ
        const companyId = window.state?.currentCompanyId;
        if (companyId && originalTemplate.id && !originalTemplate.id.startsWith('template-')) {
            try {
                const templateRef = firebase.doc(firebase.db, 'companies', companyId, 'planTemplates', originalTemplate.id);
                await firebase.updateDoc(templateRef, updatedTemplate);
                console.log('‚úÖ –®–∞–±–ª–æ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ Firebase');
            } catch (firebaseError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ Firebase:', firebaseError);
                throw firebaseError;
            }
        } else {
            // –û–Ω–æ–≤–ª—é—î–º–æ –≤ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            const state = getState();
            const templateIndex = state.planFactData.planTemplates?.findIndex(t => t.id === originalTemplate.id);
            if (templateIndex !== -1) {
                const updatedTemplates = [...state.planFactData.planTemplates];
                updatedTemplates[templateIndex] = updatedTemplate;
                updateState({ 
                    planFactData: { 
                        ...state.planFactData, 
                        planTemplates: updatedTemplates 
                    } 
                });
            }
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
            try {
                localStorage.setItem('planFactData', JSON.stringify({
                    planTemplates: state.planFactData.planTemplates,
                    focusTypes: state.planFactData.focusTypes,
                    plans: state.planFactData.plans,
                    goals: state.planFactData.goals
                }));
                console.log('‚úÖ –®–∞–±–ª–æ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ');
            } catch (storageError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ localStorage:', storageError);
            }
        }
        
        showToast('‚úÖ –®–∞–±–ª–æ–Ω –ø–ª–∞–Ω—É –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ', 'success');
        
        // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        const modal = document.getElementById('editPlanTemplateModal');
        if (modal) {
            modal.remove();
        }
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω—ñ–≤
        setTimeout(() => {
            loadPlanTemplatesForMonth();
            console.log('‚úÖ –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è');
        }, 100);
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É:', error);
        showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É', 'error');
    }
}

/**
 * –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É
 */
window.copyPlanTemplate = function(templateId) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞
    if (!window.hasPermission?.('planfact_create_templates')) {
        alert('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ –ø–ª–∞–Ω—ñ–≤');
        return;
    }
    
    const state = getState();
    const template = state.planFactData.planTemplates?.find(t => t.id === templateId);
    if (!template) {
        alert('–®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    // –ö–æ–ø—ñ—é—î–º–æ —à–∞–±–ª–æ–Ω –∑ –Ω–æ–≤–∏–º –º—ñ—Å—è—Ü–µ–º
    const newTemplate = {
        ...template,
        name: `${template.name} (–∫–æ–ø—ñ—è)`,
        monthKey: state.planFactData.currentMonth.replace('-', ''),
        status: 'draft',
        createdAt: new Date()
    };
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–ø—ñ—é
    const docRef = firebase.doc(firebase.db, 'companies', window.state.currentCompanyId, 'planTemplates', `${template.departmentId}_${newTemplate.monthKey}`);
    firebase.setDoc(docRef, newTemplate).then(() => {
        loadPlanTemplatesFromFirebase().then(() => {
            loadPlanTemplatesForMonth();
            alert('–®–∞–±–ª–æ–Ω —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
        });
    }).catch(error => {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É');
    });
};

/**
 * –ê–∫—Ç–∏–≤—É–≤–∞–Ω–Ω—è/–¥–µ–∞–∫—Ç–∏–≤—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É
 */
window.activatePlanTemplate = function(templateId) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞
    if (!window.hasPermission?.('planfact_activate_templates')) {
        alert('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∞–∫—Ç–∏–≤—É–≤–∞–Ω–Ω—è/–¥–µ–∞–∫—Ç–∏–≤—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ –ø–ª–∞–Ω—ñ–≤');
        return;
    }
    
    const { planFactData } = getState();
    const template = planFactData.planTemplates?.find(t => t.id === templateId);
    if (!template) {
        alert('–®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    const newStatus = template.status === 'active' ? 'draft' : 'active';
    
    const docRef = firebase.doc(firebase.db, 'companies', window.state.currentCompanyId, 'planTemplates', templateId);
    firebase.updateDoc(docRef, { status: newStatus }).then(() => {
        loadPlanTemplatesFromFirebase().then(() => {
            loadPlanTemplatesForMonth();
            alert(`–®–∞–±–ª–æ–Ω ${newStatus === 'active' ? '–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ' : '–¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ'}!`);
        });
    }).catch(error => {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É —à–∞–±–ª–æ–Ω—É:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É —à–∞–±–ª–æ–Ω—É');
    });
};

/**
 * –í–∏–¥–∞–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É
 */
window.deletePlanTemplate = function(templateId) {
    if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —à–∞–±–ª–æ–Ω?')) {
        return;
    }
    
    const { planFactData } = getState();
    const currentTemplates = planFactData.planTemplates || [];
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    const updatedTemplates = currentTemplates.filter(t => t.id !== templateId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω
    if (updatedTemplates.length < currentTemplates.length) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º –º–∞—Å—Å–∏–≤–æ–º
        updateState({ 
            planFactData: { 
                ...planFactData, 
                planTemplates: updatedTemplates 
            } 
        });
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        loadPlanTemplatesForMonth();
        showToast('‚úÖ –®–∞–±–ª–æ–Ω –≤–∏–¥–∞–ª–µ–Ω–æ', 'success');
    } else {
        showToast('‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error');
    }
    // –õ–æ–≥–∏–∫—É –¥–ª—è Firebase –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
};

// === –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ===

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∏
 */
function formatCurrency(amount) {
    return new Intl.NumberFormat('uk-UA', {
        style: 'currency',
        currency: 'UAH',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
    }).format(amount || 0);
}

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –º—ñ—Å—è—Ü—è
 */
function formatMonthKey(monthKey) {
    const year = monthKey.substring(0, 4);
    const month = monthKey.substring(4, 6);
    const date = new Date(parseInt(year), parseInt(month) - 1);
    return date.toLocaleDateString('uk-UA', { month: 'long', year: 'numeric' });
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —à–∞–±–ª–æ–Ω—ñ–≤ –ø–ª–∞–Ω—ñ–≤
 */
function getFilteredPlanTemplates() {
    const state = getState();
    const monthFilter = document.getElementById('constructorMonth')?.value || state.planFactData?.currentMonth;
    const departmentFilter = document.getElementById('constructorDepartment')?.value || '';
    const statusFilter = document.getElementById('constructorStatus')?.value || '';
    

    
    const filtered = state.planFactData?.planTemplates?.filter(template => {
        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ monthFilter –≤ —Ñ–æ—Ä–º–∞—Ç monthKey (–±–µ–∑ –¥–µ—Ñ—ñ—Å—É)
        if (monthFilter) {
            const expectedMonthKey = monthFilter.replace('-', '');
            if (template.monthKey !== expectedMonthKey) {
                return false;
            }
        }
        if (departmentFilter && template.departmentId !== departmentFilter) {
            return false;
        }
        if (statusFilter && template.status !== statusFilter) {
            return false;
        }
        return true;
    }) || [];
    

    return filtered;
}

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ –¥–ª—è –º—ñ—Å—è—Ü—è
 */
window.loadPlanTemplatesForMonth = function() {
    const planTemplatesList = document.getElementById('planTemplatesList');
    if (planTemplatesList) {
        planTemplatesList.innerHTML = renderPlanTemplatesList();
    } else {
        console.error('‚ùå –ï–ª–µ–º–µ–Ω—Ç planTemplatesList –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–∞ –ø–æ ID
 */
function getDepartmentName(departmentId) {
    if (!departmentId) return '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
    const state = getState();
    const department = state.planFactData?.departments?.find(dept => dept.id === departmentId);
    return department ? department.name : departmentId;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–æ–∫—É—Å–∞ –ø–æ ID
 */
function getFocusTypeById(focusTypeId) {
    if (!focusTypeId) return null;
    const state = getState();
    return state.planFactData?.focusTypes?.find(type => type.id === focusTypeId) || null;
}

/**
 * –ü–µ—Ä–µ–≥–ª—è–¥ —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É
 */
window.viewPlanTemplate = function(templateId) {
    const { planFactData } = getState();
    const template = planFactData.planTemplates?.find(t => t.id === templateId);
    if (!template) {
        showToast('‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error');
        return;
    }
    
    const modalHTML = `
        <div id="viewTemplateModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
            <div class="bg-gray-800 rounded-lg shadow-xl w-full max-w-3xl max-h-[90vh] overflow-y-auto">
                <div class="p-6">
                    <div class="flex items-center justify-between mb-6">
                        <h3 class="text-xl font-semibold text-white">–ü–µ—Ä–µ–≥–ª—è–¥ —à–∞–±–ª–æ–Ω—É: ${template.name}</h3>
                        <button onclick="closeModal('viewTemplateModal')" class="text-gray-400 hover:text-white">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                    
                    <div class="space-y-4">
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-300">–ù–∞–∑–≤–∞:</label>
                                <p class="text-white">${template.name}</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-300">–í—ñ–¥–¥—ñ–ª:</label>
                                <p class="text-white">${getDepartmentName(template.department)}</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-300">–ú—ñ—Å—è—Ü—å:</label>
                                <p class="text-white">${formatMonthKey(template.monthKey || template.month)}</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-300">–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂—ñ–≤:</label>
                                <p class="text-white">${formatCurrency(template.salesPlan)} –≥—Ä–Ω</p>
                            </div>
                        </div>
                        
                        ${template.description ? `
                            <div>
                                <label class="block text-sm font-medium text-gray-300">–û–ø–∏—Å:</label>
                                <p class="text-white">${template.description}</p>
                            </div>
                        ` : ''}
                        
                        ${template.focusTasks && template.focusTasks.length > 0 ? `
                            <div>
                                <label class="block text-sm font-medium text-gray-300 mb-2">–§–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ:</label>
                                <div class="space-y-2">
                                    ${template.focusTasks.map(taskId => {
                                        const focusType = getFocusTypeById(taskId);
                                        return `
                                            <div class="p-2 bg-gray-700 rounded">
                                                <span class="text-white">${focusType ? focusType.name : taskId}</span>
                                                ${focusType ? `<span class="text-gray-400 text-sm ml-2">(${focusType.type})</span>` : ''}
                                            </div>
                                        `;
                                    }).join('')}
                                </div>
                            </div>
                        ` : ''}
                    </div>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    document.getElementById('viewTemplateModal').classList.remove('hidden');
};

/**
 * –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É
 */
window.copyPlanTemplate = function(templateId) {
    const { planFactData } = getState();
    const template = planFactData.planTemplates?.find(t => t.id === templateId);
    if (!template) {
        showToast('‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error');
        return;
    }
    
    const newTemplate = {
        ...template,
        id: 'template-' + Date.now(),
        name: template.name + ' (–∫–æ–ø—ñ—è)',
        createdAt: new Date().toISOString(),
        status: 'draft'
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º —à–∞–±–ª–æ–Ω–æ–º
    const updatedTemplates = [...(planFactData.planTemplates || []), newTemplate];
    updateState({ 
        planFactData: { 
            ...planFactData, 
            planTemplates: updatedTemplates 
        } 
    });
    
    loadPlanTemplatesForMonth();
    showToast('‚úÖ –®–∞–±–ª–æ–Ω —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ', 'success');
};

/**
 * –ê–∫—Ç–∏–≤–∞—Ü—ñ—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É
 */
window.activatePlanTemplate = async function(templateId) {
    const { planFactData } = getState();
    const template = planFactData.planTemplates?.find(t => t.id === templateId);
    if (!template) {
        showToast('‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error');
        return;
    }
    
    const newStatus = template.status === 'active' ? 'draft' : 'active';
    const companyId = window.state?.currentCompanyId;
    
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        const updatedTemplates = planFactData.planTemplates.map(t => 
            t.id === templateId 
                ? { ...t, status: newStatus, updatedAt: new Date().toISOString() }
                : t
        );
        
        updateState({ 
            planFactData: { 
                ...planFactData, 
                planTemplates: updatedTemplates 
            } 
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase –µ—Å–ª–∏ –µ—Å—Ç—å companyId
        if (companyId) {
            try {
                const templateRef = firebase.doc(firebase.db, 'companies', companyId, 'planTemplates', templateId);
                await firebase.updateDoc(templateRef, {
                    status: newStatus,
                    updatedAt: new Date().toISOString()
                });
                console.log('‚úÖ –°—Ç–∞—Ç—É—Å —à–∞–±–ª–æ–Ω—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Firebase');
            } catch (firebaseError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Firebase:', firebaseError);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            }
        } else {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            try {
                localStorage.setItem('planFactData', JSON.stringify({
                    planTemplates: updatedTemplates,
                    focusTypes: planFactData.focusTypes,
                    plans: planFactData.plans,
                    goals: planFactData.goals
                }));
                console.log('‚úÖ –°—Ç–∞—Ç—É—Å —à–∞–±–ª–æ–Ω—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ localStorage');
            } catch (storageError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ localStorage:', storageError);
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        loadPlanTemplatesForMonth();
        showToast(`‚úÖ –®–∞–±–ª–æ–Ω ${newStatus === 'active' ? '–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ' : '–¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ'}`, 'success');
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É —à–∞–±–ª–æ–Ω—É:', error);
        showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É —à–∞–±–ª–æ–Ω—É', 'error');
    }
};

/**
 * –í–∏–¥–∞–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –ø–ª–∞–Ω—É
 */
window.deletePlanTemplate = function(templateId) {
    if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —à–∞–±–ª–æ–Ω?')) {
        return;
    }
    
    const { planFactData } = getState();
    const currentTemplates = planFactData.planTemplates || [];
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    const updatedTemplates = currentTemplates.filter(t => t.id !== templateId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω
    if (updatedTemplates.length < currentTemplates.length) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º –º–∞—Å—Å–∏–≤–æ–º
        updateState({ 
            planFactData: { 
                ...planFactData, 
                planTemplates: updatedTemplates 
            } 
        });
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        loadPlanTemplatesForMonth();
        showToast('‚úÖ –®–∞–±–ª–æ–Ω –≤–∏–¥–∞–ª–µ–Ω–æ', 'success');
    } else {
        showToast('‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error');
    }
    // –õ–æ–≥–∏–∫—É –¥–ª—è Firebase –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
}; 