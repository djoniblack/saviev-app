// FocusReports.js - –ú–æ–¥—É–ª—å –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –§–æ–∫—É—Å 2.0
import * as firebase from '../../firebase.js';

export class FocusReports {
  constructor() {
    this.data = {
      tasks: [],
      clients: [],
      reports: []
    };
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –æ—Ç—á–µ—Ç–æ–≤
   */
  async init() {
    console.log('üìã –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è –∑–≤—ñ—Ç—ñ–≤ –§–æ–∫—É—Å 2.0...');
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
      await this.loadReportsData();
      
      console.log('‚úÖ –ú–æ–¥—É–ª—å –∑–≤—ñ—Ç—ñ–≤ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑–≤—ñ—Ç—ñ–≤:', error);
    }
  }
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
   */
  async loadReportsData() {
    try {
      const companyId = window.state?.currentCompanyId;
      if (companyId) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
        const tasksRef = firebase.collection(firebase.db, 'companies', companyId, 'focusTasks2');
        const tasksSnapshot = await firebase.getDocs(tasksRef);
        this.data.tasks = tasksSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
        this.generateReports();
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤:', error);
    }
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
   */
  generateReports() {
    const now = new Date();
    const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
    const lastQuarter = new Date(now.getFullYear(), Math.floor(now.getMonth() / 3) * 3, 1);
    
    this.data.reports = [
      {
        id: 'monthly',
        title: '–ó–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å',
        period: '–û—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å',
        data: this.generateMonthlyReport(lastMonth),
        icon: 'üìÖ'
      },
      {
        id: 'quarterly',
        title: '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç',
        period: '–û—Å—Ç–∞–Ω–Ω—ñ–π –∫–≤–∞—Ä—Ç–∞–ª',
        data: this.generateQuarterlyReport(lastQuarter),
        icon: 'üìä'
      },
      {
        id: 'performance',
        title: '–ó–≤—ñ—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ',
        period: '–ó–∞–≥–∞–ª—å–Ω–∏–π',
        data: this.generatePerformanceReport(),
        icon: 'üìà'
      },
      {
        id: 'clients',
        title: '–ó–≤—ñ—Ç –ø–æ –∫–ª—ñ—î–Ω—Ç–∞—Ö',
        period: '–ó–∞–≥–∞–ª—å–Ω–∏–π',
        data: this.generateClientsReport(),
        icon: 'üë•'
      }
    ];
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  generateMonthlyReport(startDate) {
    const monthlyTasks = this.data.tasks.filter(task => {
      const taskDate = new Date(task.createdAt);
      return taskDate >= startDate;
    });
    
    const completed = monthlyTasks.filter(t => t.status === 'completed').length;
    const active = monthlyTasks.filter(t => t.status === 'active').length;
    const total = monthlyTasks.length;
    
    return {
      total,
      completed,
      active,
      completionRate: total > 0 ? Math.round((completed / total) * 100) : 0,
      avgDuration: this.calculateAverageDuration(monthlyTasks.filter(t => t.status === 'completed'))
    };
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  generateQuarterlyReport(startDate) {
    const quarterlyTasks = this.data.tasks.filter(task => {
      const taskDate = new Date(task.createdAt);
      return taskDate >= startDate;
    });
    
    const completed = quarterlyTasks.filter(t => t.status === 'completed').length;
    const active = quarterlyTasks.filter(t => t.status === 'active').length;
    const total = quarterlyTasks.length;
    
    return {
      total,
      completed,
      active,
      completionRate: total > 0 ? Math.round((completed / total) * 100) : 0,
      avgDuration: this.calculateAverageDuration(quarterlyTasks.filter(t => t.status === 'completed')),
      trends: this.calculateTrends(quarterlyTasks)
    };
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  generatePerformanceReport() {
    const allTasks = this.data.tasks;
    const completedTasks = allTasks.filter(t => t.status === 'completed');
    
    return {
      totalTasks: allTasks.length,
      completedTasks: completedTasks.length,
      activeTasks: allTasks.filter(t => t.status === 'active').length,
      completionRate: allTasks.length > 0 ? Math.round((completedTasks.length / allTasks.length) * 100) : 0,
      avgDuration: this.calculateAverageDuration(completedTasks),
      topPerformers: this.getTopPerformers(),
      bottlenecks: this.identifyBottlenecks()
    };
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
   */
  generateClientsReport() {
    const clientStats = {};
    
    this.data.tasks.forEach(task => {
      const clientCode = task.clientCode;
      if (clientCode) {
        if (!clientStats[clientCode]) {
          clientStats[clientCode] = {
            clientName: task.clientName || clientCode,
            totalTasks: 0,
            completedTasks: 0,
            activeTasks: 0
          };
        }
        
        clientStats[clientCode].totalTasks++;
        if (task.status === 'completed') {
          clientStats[clientCode].completedTasks++;
        } else if (task.status === 'active') {
          clientStats[clientCode].activeTasks++;
        }
      }
    });
    
    return {
      totalClients: Object.keys(clientStats).length,
      clientStats: Object.values(clientStats).map(client => ({
        ...client,
        completionRate: client.totalTasks > 0 ? 
          Math.round((client.completedTasks / client.totalTasks) * 100) : 0
      })).sort((a, b) => b.totalTasks - a.totalTasks)
    };
  }
  
  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  calculateAverageDuration(tasks) {
    if (tasks.length === 0) return 0;
    
    const totalDays = tasks.reduce((sum, task) => {
      if (task.createdAt && task.completedAt) {
        const created = new Date(task.createdAt);
        const completed = new Date(task.completedAt);
        const diffTime = completed - created;
        return sum + Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      }
      return sum;
    }, 0);
    
    return Math.round(totalDays / tasks.length);
  }
  
  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤
   */
  calculateTrends(tasks) {
    const weeklyStats = {};
    
    tasks.forEach(task => {
      const taskDate = new Date(task.createdAt);
      const weekStart = new Date(taskDate);
      weekStart.setDate(taskDate.getDate() - taskDate.getDay());
      const weekKey = weekStart.toISOString().split('T')[0];
      
      if (!weeklyStats[weekKey]) {
        weeklyStats[weekKey] = { created: 0, completed: 0 };
      }
      
      weeklyStats[weekKey].created++;
      if (task.status === 'completed') {
        weeklyStats[weekKey].completed++;
      }
    });
    
    return Object.entries(weeklyStats)
      .map(([week, stats]) => ({
        week,
        created: stats.created,
        completed: stats.completed
      }))
      .sort((a, b) => a.week.localeCompare(b.week));
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
   */
  getTopPerformers() {
    const performerStats = {};
    
    this.data.tasks.forEach(task => {
      const performer = task.assignedTo || task.createdBy;
      if (performer) {
        if (!performerStats[performer]) {
          performerStats[performer] = { total: 0, completed: 0 };
        }
        performerStats[performer].total++;
        if (task.status === 'completed') {
          performerStats[performer].completed++;
        }
      }
    });
    
    return Object.entries(performerStats)
      .map(([performer, stats]) => ({
        performer,
        total: stats.total,
        completed: stats.completed,
        completionRate: Math.round((stats.completed / stats.total) * 100)
      }))
      .sort((a, b) => b.completionRate - a.completionRate)
      .slice(0, 5);
  }
  
  /**
   * –í—ã—è–≤–ª–µ–Ω–∏–µ —É–∑–∫–∏—Ö –º–µ—Å—Ç
   */
  identifyBottlenecks() {
    const bottlenecks = [];
    
    // –ê–Ω–∞–ª–∏–∑ –¥–æ–ª–≥–∏—Ö –∑–∞–¥–∞—á
    const longTasks = this.data.tasks.filter(task => {
      if (task.createdAt && task.status === 'active') {
        const created = new Date(task.createdAt);
        const now = new Date();
        const daysSinceCreation = Math.ceil((now - created) / (1000 * 60 * 60 * 24));
        return daysSinceCreation > 30;
      }
      return false;
    });
    
    if (longTasks.length > 0) {
      bottlenecks.push({
        type: 'long_tasks',
        title: '–î–æ–≤–≥–æ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è',
        count: longTasks.length,
        description: `${longTasks.length} –∑–∞–¥–∞—á –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –±—ñ–ª—å—à–µ 30 –¥–Ω—ñ–≤`
      });
    }
    
    // –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    const unassignedTasks = this.data.tasks.filter(task => 
      task.status === 'active' && !task.assignedTo
    );
    
    if (unassignedTasks.length > 0) {
      bottlenecks.push({
        type: 'unassigned',
        title: '–ë–µ–∑ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è',
        count: unassignedTasks.length,
        description: `${unassignedTasks.length} –∑–∞–¥–∞—á –±–µ–∑ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è`
      });
    }
    
    return bottlenecks;
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ç—á–µ—Ç–æ–≤
   */
  render() {
    return `
      <div class="focus2-reports">
        <div class="reports-header mb-6">
          <h2 class="text-2xl font-bold text-white mb-2">–ó–≤—ñ—Ç–∏ –§–æ–∫—É—Å 2.0</h2>
          <p class="text-gray-400">–î–µ—Ç–∞–ª—å–Ω—ñ –∑–≤—ñ—Ç–∏ –ø–æ –∑–∞–¥–∞—á–∞–º —Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ</p>
        </div>
        
        <!-- –°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ -->
        <div class="reports-grid grid grid-cols-1 md:grid-cols-2 gap-6">
          ${this.data.reports.map(report => this.renderReportCard(report)).join('')}
        </div>
        
        <!-- –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç -->
        <div id="report-details" class="mt-8">
          <!-- –î–µ—Ç–∞–ª–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –æ—Ç—á–µ—Ç -->
        </div>
      </div>
    `;
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç—á–µ—Ç–∞
   */
  renderReportCard(report) {
    return `
      <div class="report-card" data-report-id="${report.id}">
        <div class="report-header">
          <div class="report-icon">${report.icon}</div>
          <div class="report-info">
            <h3 class="report-title">${report.title}</h3>
            <p class="report-period">${report.period}</p>
          </div>
        </div>
        <div class="report-summary">
          ${this.renderReportSummary(report)}
        </div>
        <button class="report-view-btn" onclick="window.focus2Components?.reports?.viewReport('${report.id}')">
          –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—ñ
        </button>
      </div>
    `;
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–≤–æ–¥–∫–∏ –æ—Ç—á–µ—Ç–∞
   */
  renderReportSummary(report) {
    switch (report.id) {
      case 'monthly':
        return `
          <div class="summary-stats">
            <div class="stat-item">
              <span class="stat-label">–í—Å—å–æ–≥–æ –∑–∞–¥–∞—á:</span>
              <span class="stat-value">${report.data.total}</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</span>
              <span class="stat-value">${report.data.completed}</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">–ö–æ–Ω–≤–µ—Ä—Å—ñ—è:</span>
              <span class="stat-value">${report.data.completionRate}%</span>
            </div>
          </div>
        `;
      
      case 'quarterly':
        return `
          <div class="summary-stats">
            <div class="stat-item">
              <span class="stat-label">–í—Å—å–æ–≥–æ –∑–∞–¥–∞—á:</span>
              <span class="stat-value">${report.data.total}</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</span>
              <span class="stat-value">${report.data.completed}</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å:</span>
              <span class="stat-value">${report.data.avgDuration} –¥–Ω.</span>
            </div>
          </div>
        `;
      
      case 'performance':
        return `
          <div class="summary-stats">
            <div class="stat-item">
              <span class="stat-label">–ö–æ–Ω–≤–µ—Ä—Å—ñ—è:</span>
              <span class="stat-value">${report.data.completionRate}%</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å:</span>
              <span class="stat-value">${report.data.avgDuration} –¥–Ω.</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">–¢–æ–ø –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤:</span>
              <span class="stat-value">${report.data.topPerformers.length}</span>
            </div>
          </div>
        `;
      
      case 'clients':
        return `
          <div class="summary-stats">
            <div class="stat-item">
              <span class="stat-label">–ö–ª—ñ—î–Ω—Ç—ñ–≤:</span>
              <span class="stat-value">${report.data.totalClients}</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">–°–µ—Ä–µ–¥–Ω—è –∫–æ–Ω–≤–µ—Ä—Å—ñ—è:</span>
              <span class="stat-value">${this.calculateAverageClientCompletion(report.data.clientStats)}%</span>
            </div>
          </div>
        `;
      
      default:
        return '<div class="text-gray-400">–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö</div>';
    }
  }
  
  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  calculateAverageClientCompletion(clientStats) {
    if (clientStats.length === 0) return 0;
    
    const totalCompletion = clientStats.reduce((sum, client) => sum + client.completionRate, 0);
    return Math.round(totalCompletion / clientStats.length);
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ
   */
  async generateTaskReport(taskId) {
    try {
      console.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É –¥–ª—è –∑–∞–¥–∞—á—ñ:', taskId);
      
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É
      const tasks = window.focus2Data?.tasks || [];
      const task = tasks.find(t => t.id === taskId);
      if (!task) {
        throw new Error('–ó–∞–¥–∞—á—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º clientsSnapshot –∏–∑ –ø–æ–¥–∫–æ–ª–ª–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      let clientsSnapshot = [];
      let hasClientsSnapshot = false;
      
      if (task.hasClientsSnapshot && task.clientsSnapshotCount > 0) {
        try {
          console.log('üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è clientsSnapshot –¥–ª—è –∑–≤—ñ—Ç—É –∑–∞–¥–∞—á—ñ:', taskId);
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
          const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö')), 10000); // 10 —Å–µ–∫—É–Ω–¥
          });
          
          const loadPromise = window.focus2TaskConstructor.loadClientsSnapshot(taskId);
          
          clientsSnapshot = await Promise.race([loadPromise, timeoutPromise]);
          hasClientsSnapshot = clientsSnapshot.length > 0;
          console.log('‚úÖ clientsSnapshot –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–ª—è –∑–≤—ñ—Ç—É:', clientsSnapshot.length, '–∫–ª—ñ—î–Ω—Ç—ñ–≤');
        } catch (error) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è clientsSnapshot –¥–ª—è –∑–≤—ñ—Ç—É:', error);
          hasClientsSnapshot = false;
          
          // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç
          if (error.message.includes('–¢–∞–π–º–∞—É—Ç')) {
            console.log('‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π –∑–≤—ñ—Ç');
          }
        }
      }
      
      if (!hasClientsSnapshot) {
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç –±–µ–∑ clientsSnapshot
        const report = {
          taskId: taskId,
          taskTitle: task.title,
          taskDescription: task.description,
          createdAt: task.createdAt,
          status: task.status,
          summary: {
            totalClients: 0,
            matchedClients: 0,
            matchPercentage: 0,
            paramBreakdown: []
          },
          recommendations: [
            {
              type: 'warning',
              message: '–ó–∞–¥–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –±–µ–∑ –∞–Ω–∞–ª—ñ–∑—É –∫–ª—ñ—î–Ω—Ç—ñ–≤. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –∑–≤—ñ—Ç—É.',
              action: null
            }
          ],
          clients: [],
          parameters: task.parameters || {}
        };
        
        console.log('‚úÖ –ó–≤—ñ—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ (–±–µ–∑ clientsSnapshot):', report);
        return report;
      }
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º clientsSnapshot
      const clients = clientsSnapshot;
      const totalClients = clients.length;
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
      const byManager = {};
      clients.forEach(client => {
        const manager = client.manager || '–ë–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞';
        if (!byManager[manager]) {
          byManager[manager] = [];
        }
        byManager[manager].push(client);
      });
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
      const byParam = {};
      clients.forEach(client => {
        if (client.params && Array.isArray(client.params)) {
          client.params.forEach(param => {
            if (!byParam[param]) {
              byParam[param] = [];
            }
            byParam[param].push(client);
          });
        }
      });
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const totalRevenue = clients.reduce((sum, client) => sum + (client.sum || 0), 0);
      const avgRevenue = totalRevenue / totalClients;
      const managers = Object.keys(byManager);
      const topManager = managers.reduce((top, manager) => {
        const managerRevenue = byManager[manager].reduce((sum, client) => sum + (client.sum || 0), 0);
        return managerRevenue > top.revenue ? { manager, revenue: managerRevenue } : top;
      }, { manager: '', revenue: 0 });
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º —Ñ–æ–∫—É—Å–∞
      const focusProducts = new Set(task.products || []);
      const salesByProduct = {};
      const salesByClient = {};
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂
      const salesData = window.focus2Data?.salesData || [];
      const periodStart = task.periodFrom ? new Date(task.periodFrom) : new Date();
      const periodEnd = task.periodTo ? new Date(task.periodTo) : new Date();
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–æ–∫—É—Å–∞
      clients.forEach(client => {
        const clientSales = salesData.filter(sale => 
          sale['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥'] === client.code &&
          focusProducts.has(sale['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞']) &&
          new Date(sale['–î–∞—Ç–∞']) >= periodStart &&
          new Date(sale['–î–∞—Ç–∞']) <= periodEnd
        );
        
        salesByClient[client.code] = clientSales;
        
        clientSales.forEach(sale => {
          const product = sale['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'];
          if (!salesByProduct[product]) {
            salesByProduct[product] = {
              totalQuantity: 0,
              totalRevenue: 0,
              clientCount: 0,
              clients: new Set()
            };
          }
          salesByProduct[product].totalQuantity += sale['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] || 0;
          salesByProduct[product].totalRevenue += sale['–í—ã—Ä—É—á–∫–∞'] || 0;
          salesByProduct[product].clients.add(client.code);
        });
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
      Object.keys(salesByProduct).forEach(product => {
        salesByProduct[product].clientCount = salesByProduct[product].clients.size;
        delete salesByProduct[product].clients; // –£–¥–∞–ª—è–µ–º Set –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      });
      
      // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
      const report = {
        taskId: taskId,
        taskTitle: task.title,
        taskDescription: task.description,
        createdAt: task.createdAt,
        status: task.status,
        period: {
          from: task.periodFrom,
          to: task.periodTo
        },
        summary: {
          totalClients: totalClients,
          totalRevenue: totalRevenue,
          avgRevenue: avgRevenue,
          managersCount: managers.length,
          topManager: topManager.manager,
          topManagerRevenue: topManager.revenue,
          focusProducts: Array.from(focusProducts),
          salesByProduct: salesByProduct
        },
        breakdown: {
          byManager: byManager,
          byParam: byParam,
          salesByClient: salesByClient
        },
        recommendations: this.generateRecommendations(clients, task),
        parameters: task.parameters || {}
      };
      
      console.log('‚úÖ –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ:', report);
      return report;
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É –∑–∞–¥–∞—á—ñ:', error);
      throw error;
    }
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  generateRecommendations(clients, task) {
    const recommendations = [];
    
    if (clients.length === 0) {
      recommendations.push({
        type: 'info',
        message: '–ö–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ –∑–∞–¥–∞—á—ñ',
        action: null
      });
      return recommendations;
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    const byManager = {};
    clients.forEach(client => {
      const manager = client.manager || '–ë–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞';
      if (!byManager[manager]) {
        byManager[manager] = [];
      }
      byManager[manager].push(client);
    });
    
    const topManagers = Object.entries(byManager)
      .map(([manager, clients]) => ({
        manager,
        count: clients.length,
        revenue: clients.reduce((sum, client) => sum + (client.sum || 0), 0)
      }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 3);
    
    if (topManagers.length > 0) {
      recommendations.push({
        type: 'success',
        message: `–¢–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤: ${topManagers.map(m => `${m.manager} (${m.count} –∫–ª—ñ—î–Ω—Ç—ñ–≤)`).join(', ')}`,
        action: null
      });
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ñ–µ—Ä–∞–º
    const bySphere = {};
    clients.forEach(client => {
      const sphere = client.sphere || '–ë–µ–∑ —Å—Ñ–µ—Ä–∏';
      if (!bySphere[sphere]) {
        bySphere[sphere] = [];
      }
      bySphere[sphere].push(client);
    });
    
    const topSpheres = Object.entries(bySphere)
      .map(([sphere, clients]) => ({
        sphere,
        count: clients.length,
        revenue: clients.reduce((sum, client) => sum + (client.sum || 0), 0)
      }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 3);
    
    if (topSpheres.length > 0) {
      recommendations.push({
        type: 'info',
        message: `–¢–æ–ø —Å—Ñ–µ—Ä–∏: ${topSpheres.map(s => `${s.sphere} (${s.count} –∫–ª—ñ—î–Ω—Ç—ñ–≤)`).join(', ')}`,
        action: null
      });
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∞—Ç–∞–º
    const recentClients = clients.filter(client => {
      if (!client.lastDate) return false;
      const lastDate = new Date(client.lastDate);
      const now = new Date();
      const daysDiff = (now - lastDate) / (1000 * 60 * 60 * 24);
      return daysDiff <= 30;
    });
    
    if (recentClients.length > 0) {
      recommendations.push({
        type: 'warning',
        message: `${recentClients.length} –∫–ª—ñ—î–Ω—Ç—ñ–≤ –º–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤ - –º–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–∏ —â–µ –∞–∫—Ç–∏–≤–Ω—ñ`,
        action: null
      });
    }
    
    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (clients.length >= 10) {
      recommendations.push({
        type: 'success',
        message: '–ó–Ω–∞–π–¥–µ–Ω–æ –±–∞–≥–∞—Ç–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ - –º–æ–∂–Ω–∞ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –º—ñ–∂ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏',
        action: null
      });
    } else if (clients.length <= 3) {
      recommendations.push({
        type: 'warning',
        message: '–ó–Ω–∞–π–¥–µ–Ω–æ –º–∞–ª–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ - –º–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –ø–æ—à—É–∫—É',
        action: null
      });
    }
    
    return recommendations;
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async refresh() {
    await this.loadReportsData();
    this.generateReports();
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞–¥–∞—á–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
   */
  async showTaskReportModal(taskId) {
    try {
      console.log('üìä –ü–æ–∫–∞–∑ –∑–≤—ñ—Ç—É –∑–∞–¥–∞—á—ñ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ:', taskId);
      
      const report = await this.generateTaskReport(taskId);
      
      // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      const modal = document.createElement('div');
      modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60';
      modal.innerHTML = `
        <div class="bg-gray-900 rounded-2xl shadow-2xl p-8 w-full max-w-6xl max-h-[90vh] overflow-y-auto relative">
          <button id="close-report-modal" class="absolute top-4 right-4 text-gray-400 hover:text-white text-2xl">&times;</button>
          
          <div class="mb-6">
            <h2 class="text-2xl font-bold text-white mb-2">–ó–≤—ñ—Ç –∑–∞–¥–∞—á—ñ: ${report.taskTitle}</h2>
            <p class="text-gray-400">${report.taskDescription || '–ë–µ–∑ –æ–ø–∏—Å—É'}</p>
          </div>
          
          <!-- –í–∫–ª–∞–¥–∫–∏ –æ—Ç—á–µ—Ç–∞ -->
          <div class="flex gap-2 mb-6">
            <button class="report-tab-btn active px-4 py-2 bg-blue-600 text-white rounded" data-tab="summary">–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</button>
            <button class="report-tab-btn px-4 py-2 bg-gray-700 text-white rounded" data-tab="managers">–ü–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö</button>
            <button class="report-tab-btn px-4 py-2 bg-gray-700 text-white rounded" data-tab="products">–ü–æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö</button>
            <button class="report-tab-btn px-4 py-2 bg-gray-700 text-white rounded" data-tab="clients">–î–µ—Ç–∞–ª—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤</button>
            <button class="report-tab-btn px-4 py-2 bg-gray-700 text-white rounded" data-tab="recommendations">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</button>
          </div>
          
          <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ -->
          <div id="report-content">
            <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
          </div>
          
          <div class="flex justify-end gap-4 mt-6 pt-4 border-t border-gray-700">
            <button id="export-report-csv" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-500">
              üìä –ï–∫—Å–ø–æ—Ä—Ç CSV
            </button>
            <button id="close-report" class="px-4 py-2 bg-gray-700 text-white rounded hover:bg-gray-600">
              –ó–∞–∫—Ä–∏—Ç–∏
            </button>
          </div>
        </div>
      `;
      
      document.body.appendChild(modal);
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      const closeModal = () => modal.remove();
      const closeBtn = modal.querySelector('#close-report-modal');
      const closeReportBtn = modal.querySelector('#close-report');
      const exportBtn = modal.querySelector('#export-report-csv');
      
      closeBtn.onclick = closeModal;
      closeReportBtn.onclick = closeModal;
      exportBtn.onclick = () => this.exportReportToCSV(report);
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫
      const tabBtns = modal.querySelectorAll('.report-tab-btn');
      const contentDiv = modal.querySelector('#report-content');
      
      const switchTab = (tabName) => {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        tabBtns.forEach(btn => {
          btn.classList.toggle('bg-blue-600', btn.dataset.tab === tabName);
          btn.classList.toggle('bg-gray-700', btn.dataset.tab !== tabName);
        });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏
        contentDiv.innerHTML = this.renderReportTab(report, tabName);
      };
      
      tabBtns.forEach(btn => {
        btn.onclick = () => switchTab(btn.dataset.tab);
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
      switchTab('summary');
      
      console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑–≤—ñ—Ç—É –≤—ñ–¥–∫—Ä–∏—Ç–æ');
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –∑–≤—ñ—Ç—É:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É: ' + error.message);
    }
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∫–ª–∞–¥–∫–∏ –æ—Ç—á–µ—Ç–∞
   */
  renderReportTab(report, tabName) {
    switch (tabName) {
      case 'summary':
        return this.renderSummaryTab(report);
      case 'managers':
        return this.renderManagersTab(report);
      case 'products':
        return this.renderProductsTab(report);
      case 'clients':
        return this.renderClientsTab(report);
      case 'recommendations':
        return this.renderRecommendationsTab(report);
      default:
        return '<div class="text-gray-400">–í–∫–ª–∞–¥–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞</div>';
    }
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  renderSummaryTab(report) {
    const { summary } = report;
    
    return `
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
        <div class="bg-gray-800 rounded-lg p-4">
          <h3 class="text-gray-400 text-sm mb-1">–í—Å—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤</h3>
          <p class="text-2xl font-bold text-white">${summary.totalClients}</p>
        </div>
        <div class="bg-gray-800 rounded-lg p-4">
          <h3 class="text-gray-400 text-sm mb-1">–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∏—Ä—É—á–∫–∞</h3>
          <p class="text-2xl font-bold text-white">${this.formatCurrency(summary.totalRevenue)}</p>
        </div>
        <div class="bg-gray-800 rounded-lg p-4">
          <h3 class="text-gray-400 text-sm mb-1">–°–µ—Ä–µ–¥–Ω—è –≤–∏—Ä—É—á–∫–∞</h3>
          <p class="text-2xl font-bold text-white">${this.formatCurrency(summary.avgRevenue)}</p>
        </div>
        <div class="bg-gray-800 rounded-lg p-4">
          <h3 class="text-gray-400 text-sm mb-1">–ú–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤</h3>
          <p class="text-2xl font-bold text-white">${summary.managersCount}</p>
        </div>
      </div>
      
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div class="bg-gray-800 rounded-lg p-6">
          <h3 class="text-lg font-semibold text-white mb-4">–¢–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä</h3>
          <div class="space-y-2">
            <p class="text-gray-400">–ú–µ–Ω–µ–¥–∂–µ—Ä: <span class="text-white">${summary.topManager}</span></p>
            <p class="text-gray-400">–í–∏—Ä—É—á–∫–∞: <span class="text-white">${this.formatCurrency(summary.topManagerRevenue)}</span></p>
          </div>
        </div>
        
        <div class="bg-gray-800 rounded-lg p-6">
          <h3 class="text-lg font-semibold text-white mb-4">–§–æ–∫—É—Å–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏</h3>
          <div class="space-y-2">
            ${summary.focusProducts.map(product => `
              <span class="inline-block bg-blue-600 text-white px-3 py-1 rounded text-sm mr-2 mb-2">
                ${this.getNomenclatureName(product)}
              </span>
            `).join('')}
          </div>
        </div>
      </div>
    `;
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
   */
  renderManagersTab(report) {
    const { breakdown } = report;
    const managers = Object.entries(breakdown.byManager);
    
    return `
      <div class="space-y-4">
        <h3 class="text-lg font-semibold text-white mb-4">–ê–Ω–∞–ª—ñ–∑ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö</h3>
        
        <div class="overflow-x-auto">
          <table class="w-full text-sm">
            <thead>
              <tr class="bg-gray-800">
                <th class="text-left p-3 text-gray-300">–ú–µ–Ω–µ–¥–∂–µ—Ä</th>
                <th class="text-left p-3 text-gray-300">–ö–ª—ñ—î–Ω—Ç—ñ–≤</th>
                <th class="text-left p-3 text-gray-300">–í–∏—Ä—É—á–∫–∞</th>
                <th class="text-left p-3 text-gray-300">–°–µ—Ä–µ–¥–Ω—è –≤–∏—Ä—É—á–∫–∞</th>
              </tr>
            </thead>
            <tbody>
              ${managers.map(([manager, clients]) => {
                const totalRevenue = clients.reduce((sum, client) => sum + (client.sum || 0), 0);
                const avgRevenue = totalRevenue / clients.length;
                return `
                  <tr class="border-b border-gray-700">
                    <td class="p-3 text-white">${manager}</td>
                    <td class="p-3 text-white">${clients.length}</td>
                    <td class="p-3 text-white">${this.formatCurrency(totalRevenue)}</td>
                    <td class="p-3 text-white">${this.formatCurrency(avgRevenue)}</td>
                  </tr>
                `;
              }).join('')}
            </tbody>
          </table>
        </div>
      </div>
    `;
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
   */
  renderProductsTab(report) {
    const { summary } = report;
    const products = Object.entries(summary.salesByProduct);
    
    return `
      <div class="space-y-4">
        <h3 class="text-lg font-semibold text-white mb-4">–ê–Ω–∞–ª—ñ–∑ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö —Ñ–æ–∫—É—Å—É</h3>
        
        <div class="overflow-x-auto">
          <table class="w-full text-sm">
            <thead>
              <tr class="bg-gray-800">
                <th class="text-left p-3 text-gray-300">–ü—Ä–æ–¥—É–∫—Ç</th>
                <th class="text-left p-3 text-gray-300">–ö—ñ–ª—å–∫—ñ—Å—Ç—å</th>
                <th class="text-left p-3 text-gray-300">–í–∏—Ä—É—á–∫–∞</th>
                <th class="text-left p-3 text-gray-300">–ö–ª—ñ—î–Ω—Ç—ñ–≤</th>
                <th class="text-left p-3 text-gray-300">–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞</th>
              </tr>
            </thead>
            <tbody>
              ${products.map(([product, data]) => {
                const avgPrice = data.totalQuantity > 0 ? data.totalRevenue / data.totalQuantity : 0;
                return `
                  <tr class="border-b border-gray-700">
                    <td class="p-3 text-white">${this.getNomenclatureName(product)}</td>
                    <td class="p-3 text-white">${data.totalQuantity}</td>
                    <td class="p-3 text-white">${this.formatCurrency(data.totalRevenue)}</td>
                    <td class="p-3 text-white">${data.clientCount}</td>
                    <td class="p-3 text-white">${this.formatCurrency(avgPrice)}</td>
                  </tr>
                `;
              }).join('')}
            </tbody>
          </table>
        </div>
      </div>
    `;
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  renderClientsTab(report) {
    const { breakdown } = report;
    const clients = Object.keys(breakdown.salesByClient);
    
    return `
      <div class="space-y-4">
        <h3 class="text-lg font-semibold text-white mb-4">–î–µ—Ç–∞–ª—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤ (${clients.length})</h3>
        
        <div class="overflow-x-auto max-h-96">
          <table class="w-full text-sm">
            <thead class="sticky top-0 bg-gray-800">
              <tr>
                <th class="text-left p-3 text-gray-300">–ö–ª—ñ—î–Ω—Ç</th>
                <th class="text-left p-3 text-gray-300">–ú–µ–Ω–µ–¥–∂–µ—Ä</th>
                <th class="text-left p-3 text-gray-300">–ü—Ä–æ–¥–∞–∂—ñ–≤</th>
                <th class="text-left p-3 text-gray-300">–í–∏—Ä—É—á–∫–∞</th>
                <th class="text-left p-3 text-gray-300">–û—Å—Ç–∞–Ω–Ω—è –ø–æ–∫—É–ø–∫–∞</th>
              </tr>
            </thead>
            <tbody>
              ${clients.map(clientCode => {
                const clientSales = breakdown.salesByClient[clientCode];
                const totalRevenue = clientSales.reduce((sum, sale) => sum + (sale['–í—ã—Ä—É—á–∫–∞'] || 0), 0);
                const lastSale = clientSales.length > 0 ? 
                  clientSales.sort((a, b) => new Date(b['–î–∞—Ç–∞']) - new Date(a['–î–∞—Ç–∞']))[0] : null;
                
                return `
                  <tr class="border-b border-gray-700">
                    <td class="p-3 text-white">${this.getClientName(clientCode)}</td>
                    <td class="p-3 text-white">${this.getClientManager(clientCode)}</td>
                    <td class="p-3 text-white">${clientSales.length}</td>
                    <td class="p-3 text-white">${this.formatCurrency(totalRevenue)}</td>
                    <td class="p-3 text-white">${lastSale ? this.formatDate(lastSale['–î–∞—Ç–∞']) : '–ù–µ–º–∞—î'}</td>
                  </tr>
                `;
              }).join('')}
            </tbody>
          </table>
        </div>
      </div>
    `;
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  renderRecommendationsTab(report) {
    const { recommendations } = report;
    
    return `
      <div class="space-y-4">
        <h3 class="text-lg font-semibold text-white mb-4">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</h3>
        
        <div class="space-y-3">
          ${recommendations.map((rec, index) => `
            <div class="bg-gray-800 rounded-lg p-4 border-l-4 ${this.getRecommendationColor(rec.type)}">
              <div class="flex items-start">
                <div class="flex-shrink-0 mr-3">
                  ${rec.type === 'success' ? '‚úÖ' : rec.type === 'warning' ? '‚ö†Ô∏è' : 'üí°'}
                </div>
                <div class="flex-1">
                  <p class="text-white">${rec.message}</p>
                  ${rec.action ? `<p class="text-gray-400 text-sm mt-1">–î—ñ—è: ${rec.action}</p>` : ''}
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      </div>
    `;
  }
  
  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ CSV
   */
  exportReportToCSV(report) {
    try {
      const { summary, breakdown } = report;
      
      // –°–æ–∑–¥–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ
      let csvContent = 'data:text/csv;charset=utf-8,';
      
      // –ó–∞–≥–æ–ª–æ–≤–æ–∫
      csvContent += '–ó–≤—ñ—Ç –∑–∞–¥–∞—á—ñ: ' + report.taskTitle + '\n';
      csvContent += '–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: ' + this.formatDate(report.createdAt) + '\n\n';
      
      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      csvContent += '–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n';
      csvContent += '–ü–∞—Ä–∞–º–µ—Ç—Ä,–ó–Ω–∞—á–µ–Ω–Ω—è\n';
      csvContent += `–í—Å—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤,${summary.totalClients}\n`;
      csvContent += `–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∏—Ä—É—á–∫–∞,${summary.totalRevenue}\n`;
      csvContent += `–°–µ—Ä–µ–¥–Ω—è –≤–∏—Ä—É—á–∫–∞,${summary.avgRevenue}\n`;
      csvContent += `–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤,${summary.managersCount}\n\n`;
      
      // –ü–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
      csvContent += '–ê–Ω–∞–ª—ñ–∑ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö\n';
      csvContent += '–ú–µ–Ω–µ–¥–∂–µ—Ä,–ö–ª—ñ—î–Ω—Ç—ñ–≤,–í–∏—Ä—É—á–∫–∞,–°–µ—Ä–µ–¥–Ω—è –≤–∏—Ä—É—á–∫–∞\n';
      Object.entries(breakdown.byManager).forEach(([manager, clients]) => {
        const totalRevenue = clients.reduce((sum, client) => sum + (client.sum || 0), 0);
        const avgRevenue = totalRevenue / clients.length;
        csvContent += `${manager},${clients.length},${totalRevenue},${avgRevenue}\n`;
      });
      csvContent += '\n';
      
      // –ü–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
      csvContent += '–ê–Ω–∞–ª—ñ–∑ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö\n';
      csvContent += '–ü—Ä–æ–¥—É–∫—Ç,–ö—ñ–ª—å–∫—ñ—Å—Ç—å,–í–∏—Ä—É—á–∫–∞,–ö–ª—ñ—î–Ω—Ç—ñ–≤,–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞\n';
      Object.entries(summary.salesByProduct).forEach(([product, data]) => {
        const avgPrice = data.totalQuantity > 0 ? data.totalRevenue / data.totalQuantity : 0;
        csvContent += `${this.getNomenclatureName(product)},${data.totalQuantity},${data.totalRevenue},${data.clientCount},${avgPrice}\n`;
      });
      
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const encodedUri = encodeURI(csvContent);
      const link = document.createElement('a');
      link.setAttribute('href', encodedUri);
      link.setAttribute('download', `focus_report_${report.taskId}_${new Date().toISOString().split('T')[0]}.csv`);
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      console.log('‚úÖ –ó–≤—ñ—Ç –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤ CSV');
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –∑–≤—ñ—Ç—É:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –∑–≤—ñ—Ç—É');
    }
  }
  
  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
   */
  formatCurrency(amount) {
    return new Intl.NumberFormat('uk-UA', {
      style: 'currency',
      currency: 'UAH'
    }).format(amount || 0);
  }
  
  formatDate(dateString) {
    if (!dateString) return '–ù–µ–º–∞—î';
    return new Date(dateString).toLocaleDateString('uk-UA');
  }
  
  getNomenclatureName(code) {
    const nomenclatureData = window.focus2Data?.nomenclatureData || {};
    return nomenclatureData[code] || code;
  }
  
  getClientName(code) {
    const clientManagerDirectory = window.focus2Data?.clientManagerDirectory || {};
    return clientManagerDirectory[code]?.name || code;
  }
  
  getClientManager(code) {
    const clientManagerDirectory = window.focus2Data?.clientManagerDirectory || {};
    return clientManagerDirectory[code]?.manager || '–ë–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞';
  }
  
  getRecommendationColor(type) {
    switch (type) {
      case 'success': return 'border-green-500';
      case 'warning': return 'border-yellow-500';
      case 'info': return 'border-blue-500';
      default: return 'border-gray-500';
    }
  }
  
  /**
   * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  viewReport(reportId) {
    try {
      console.log('üìä –ü–µ—Ä–µ–≥–ª—è–¥ –∑–≤—ñ—Ç—É:', reportId);
      
      const report = this.data.reports.find(r => r.id === reportId);
      if (!report) {
        console.error('‚ùå –ó–≤—ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:', reportId);
        return;
      }
      
      const detailsContainer = document.getElementById('report-details');
      if (detailsContainer) {
        detailsContainer.innerHTML = this.renderDetailedReport(report);
      }
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –∑–≤—ñ—Ç—É:', error);
    }
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  renderDetailedReport(report) {
    return `
      <div class="bg-gray-800 rounded-lg p-6">
        <div class="flex items-center justify-between mb-6">
          <div>
            <h3 class="text-xl font-bold text-white">${report.title}</h3>
            <p class="text-gray-400">${report.period}</p>
          </div>
          <button onclick="window.focus2Components?.reports?.exportReportToCSV('${report.id}')" 
                  class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-500">
            –ï–∫—Å–ø–æ—Ä—Ç CSV
          </button>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          ${this.renderDetailedStats(report)}
        </div>
        
        <div class="mt-6">
          <h4 class="text-lg font-semibold text-white mb-4">–î–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ</h4>
          ${this.renderDetailedData(report)}
        </div>
      </div>
    `;
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  renderDetailedStats(report) {
    const stats = report.data;
    
    return `
      <div class="bg-gray-700 rounded p-4">
        <h4 class="text-white font-semibold mb-2">–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
        <div class="space-y-2">
          <div class="flex justify-between">
            <span class="text-gray-400">–í—Å—å–æ–≥–æ –∑–∞–¥–∞—á:</span>
            <span class="text-white">${stats.total || 0}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-400">–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</span>
            <span class="text-white">${stats.completed || 0}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-400">–ö–æ–Ω–≤–µ—Ä—Å—ñ—è:</span>
            <span class="text-white">${stats.completionRate || 0}%</span>
          </div>
        </div>
      </div>
    `;
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  renderDetailedData(report) {
    const data = report.data;
    
    if (data.tasks && data.tasks.length > 0) {
      return `
        <div class="bg-gray-700 rounded p-4">
          <h4 class="text-white font-semibold mb-4">–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</h4>
          <div class="space-y-2">
            ${data.tasks.map(task => `
              <div class="flex items-center justify-between p-2 bg-gray-600 rounded">
                <span class="text-white">${task.title}</span>
                <span class="text-gray-400">${task.status}</span>
              </div>
            `).join('')}
          </div>
        </div>
      `;
    }
    
    return `
      <div class="bg-gray-700 rounded p-4">
        <p class="text-gray-400">–î–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ</p>
      </div>
    `;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤
window.viewReport = function(reportId) {
  console.log(`–ü–µ—Ä–µ–≥–ª—è–¥ –∑–≤—ñ—Ç—É: ${reportId}`);
  
  if (window.focus2Components?.reports) {
    window.focus2Components.reports.viewReport(reportId);
  } else {
    console.error('‚ùå –ú–æ–¥—É–ª—å –∑–≤—ñ—Ç—ñ–≤ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
  }
}; 