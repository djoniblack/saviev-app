// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–¥–∞—á –¥–ª—è –§–æ–∫—É—Å 2.0
import * as firebase from '../../firebase.js';
import { hasPermission } from '../../main.js';
import { FocusClientAnalyzer } from './clientAnalyzer.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
async function refreshFocus2Data() {
  try {
    const companyId = window.state?.currentCompanyId;
    if (companyId) {
      const tasksRef = firebase.collection(firebase.db, 'companies', companyId, 'focusTasks2');
      const snapshot = await firebase.getDocs(tasksRef);
      const tasks = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (window.focus2Data) {
        window.focus2Data.tasks = tasks;
      }
      
      console.log('‚úÖ –î–∞–Ω—ñ –∑–∞–¥–∞—á –æ–Ω–æ–≤–ª–µ–Ω–æ:', tasks.length);
      return tasks;
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞–¥–∞—á:', error);
  }
  return [];
}

export class FocusTaskConstructor {
  constructor() {
    this.currentTask = null;
    this.nomenclatureSelector = null;
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
   */
  async init(nomenclatureSelector) {
    this.nomenclatureSelector = nomenclatureSelector;
    console.log('üîß –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–¥–∞—á –§–æ–∫—É—Å 2.0 —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    console.log('üìã –û—Ç—Ä–∏–º–∞–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏:', this.nomenclatureSelector);
  }
  
  /**
   * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
   */
  showCreateModal() {
    if (!hasPermission('focus_create')) {
      alert('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ–∫—É—Å–Ω–∏—Ö –∑–∞–¥–∞—á!');
      return;
    }
    
    const modalHTML = `
      <div id="focus2-create-task-modal" class="fixed inset-0 bg-black bg-opacity-50 z-[70]">
        <div class="flex items-center justify-center min-h-screen p-4">
          <div class="bg-gray-800 rounded-lg shadow-xl w-full max-w-4xl max-h-[95vh] flex flex-col overflow-hidden">
            <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
            <div class="flex items-center justify-between p-6 border-b border-gray-700">
              <h3 class="text-xl font-semibold text-white">–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ 2.0</h3>
              <button id="close-focus2-create-modal" class="text-gray-400 hover:text-white">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            
            <!-- –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ -->
            <div class="flex-1 overflow-y-auto p-6">
              <form id="focus2-task-form" class="space-y-6">
                <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2">–ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ *</label>
                    <input type="text" id="focus2TaskTitle" class="w-full bg-gray-700 border border-gray-600 rounded-md text-white p-3" 
                           required maxlength="100" placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–¥–∞—á—ñ">
                  </div>
                  
                  <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2">–ü–µ—Ä—ñ–æ–¥ –¥—ñ—ó –∑–∞–¥–∞—á—ñ</label>
                    <div class="grid grid-cols-2 gap-2">
                      <input type="date" id="focus2TaskPeriodFrom" class="bg-gray-700 border border-gray-600 rounded-md text-white p-3">
                      <input type="date" id="focus2TaskPeriodTo" class="bg-gray-700 border border-gray-600 rounded-md text-white p-3">
                    </div>
                  </div>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-300 mb-2">–û–ø–∏—Å –∑–∞–¥–∞—á—ñ</label>
                  <textarea id="focus2TaskDescription" rows="3" 
                           class="w-full bg-gray-700 border border-gray-600 rounded-md text-white p-3"
                           placeholder="–û–ø–∏—à—ñ—Ç—å –º–µ—Ç—É —Ç–∞ –¥–µ—Ç–∞–ª—ñ –∑–∞–¥–∞—á—ñ"></textarea>
                </div>
                
                <!-- –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ -->
                <div>
                  <label class="block text-sm font-medium text-gray-300 mb-2">–§–æ–∫—É—Å–Ω–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞</label>
                  <div class="flex items-center space-x-2">
                    <button type="button" id="focus2SelectNomenclature" 
                            class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500 transition-colors">
                      –û–±—Ä–∞—Ç–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É
                    </button>
                    <span id="focus2SelectedNomenclatureCount" class="text-gray-400">0 –ø–æ–∑–∏—Ü—ñ–π –æ–±—Ä–∞–Ω–æ</span>
                  </div>
                  <div id="focus2NomenclatureList" class="mt-2 p-3 bg-gray-700 rounded-md min-h-[60px]">
                    <span class="text-gray-400">–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –Ω–µ –æ–±—Ä–∞–Ω–∞</span>
                  </div>
                </div>
                
                <!-- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ -->
                <div>
                  <label class="block text-sm font-medium text-gray-300 mb-2">–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∞–Ω–∞–ª—ñ–∑—É</label>
                  <div class="space-y-3">
                    <!-- Param1: –ö–ª–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫—É–ø–∞–ª–∏ —Ä–∞–Ω—å—à–µ, –Ω–æ –Ω–µ —Å–µ–π—á–∞—Å -->
                    <div class="flex items-start space-x-3">
                      <input type="checkbox" id="focus2Param1" class="mt-1">
                      <div class="flex-1">
                        <label for="focus2Param1" class="text-white font-medium">–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –∫—É–ø—É–≤–∞–ª–∏ —Ä–∞–Ω—ñ—à–µ, –∞–ª–µ –Ω–µ –∑–∞—Ä–∞–∑</label>
                        <p class="text-gray-400 text-sm">–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –∫—É–ø—É–≤–∞–ª–∏ —Ñ–æ–∫—É—Å–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –ø–µ—Ä—ñ–æ–¥—ñ, –∞–ª–µ –Ω–µ –∫—É–ø—É—é—Ç—å –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É</p>
                        <div id="focus2Param1Options" class="mt-2 hidden">
                          <select id="focus2Param1Period" class="bg-gray-700 border border-gray-600 rounded-md text-white p-2 text-sm">
                            <option value="month">–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –º—ñ—Å—è—Ü–µ–º</option>
                            <option value="quarter">–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –∫–≤–∞—Ä—Ç–∞–ª–æ–º</option>
                            <option value="custom">–ö–∞—Å—Ç–æ–º–Ω–∏–π –ø–µ—Ä—ñ–æ–¥</option>
                          </select>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Param2: –ö–ª–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π -->
                    <div class="flex items-start space-x-3">
                      <input type="checkbox" id="focus2Param2" class="mt-1">
                      <div class="flex-1">
                        <label for="focus2Param2" class="text-white font-medium">–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –Ω–µ –∫—É–ø—É–≤–∞–ª–∏ –ø–µ–≤–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤</label>
                        <p class="text-gray-400 text-sm">–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –Ω–µ —Ä–æ–±–∏–ª–∏ –ø–æ–∫—É–ø–æ–∫ —Ñ–æ–∫—É—Å–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –ø—Ä–æ—Ç—è–≥–æ–º –≤–∫–∞–∑–∞–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É</p>
                        <div id="focus2Param2Options" class="mt-2 hidden">
                          <div class="flex items-center space-x-2">
                            <input type="number" id="focus2Param2Days" min="1" max="365" value="30" 
                                   class="bg-gray-700 border border-gray-600 rounded-md text-white p-2 text-sm w-20">
                            <span class="text-gray-400 text-sm">–¥–Ω—ñ–≤</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Param3: –ö–ª–∏–µ–Ω—Ç—ã —Å –Ω–∏–∑–∫–æ–π —á–∞—Å—Ç–æ—Ç–æ–π –ø–æ–∫—É–ø–æ–∫ -->
                    <div class="flex items-start space-x-3">
                      <input type="checkbox" id="focus2Param3" class="mt-1">
                      <div class="flex-1">
                        <label for="focus2Param3" class="text-white font-medium">–ö–ª—ñ—î–Ω—Ç–∏ –∑ –Ω–∏–∑—å–∫–æ—é —á–∞—Å—Ç–æ—Ç–æ—é –ø–æ–∫—É–ø–æ–∫</label>
                        <p class="text-gray-400 text-sm">–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ —Ä—ñ–¥–∫–æ –∫—É–ø—É—é—Ç—å —Ñ–æ–∫—É—Å–Ω—ñ —Ç–æ–≤–∞—Ä–∏</p>
                        <div id="focus2Param3Options" class="mt-2 hidden">
                          <div class="flex items-center space-x-2">
                            <input type="number" id="focus2Param3Frequency" min="1" max="12" value="1" 
                                   class="bg-gray-700 border border-gray-600 rounded-md text-white p-2 text-sm w-20">
                            <span class="text-gray-400 text-sm">–ø–æ–∫—É–ø–æ–∫ –∑–∞ –º—ñ—Å—è—Ü—å</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Param4: –ö–ª–∏–µ–Ω—Ç—ã —Å –Ω–∏–∑—å–∫–æ—é —Å—É–º–æ—é –ø–æ–∫—É–ø–æ–∫ -->
                    <div class="flex items-start space-x-3">
                      <input type="checkbox" id="focus2Param4" class="mt-1">
                      <div class="flex-1">
                        <label for="focus2Param4" class="text-white font-medium">–ö–ª—ñ—î–Ω—Ç–∏ –∑ –Ω–∏–∑—å–∫–æ—é —Å—É–º–æ—é –ø–æ–∫—É–ø–æ–∫</label>
                        <p class="text-gray-400 text-sm">–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –∫—É–ø—É—é—Ç—å –Ω–∞ –Ω–µ–≤–µ–ª–∏–∫—ñ —Å—É–º–∏</p>
                        <div id="focus2Param4Options" class="mt-2 hidden">
                          <div class="flex items-center space-x-2">
                            <input type="number" id="focus2Param4Amount" min="1" value="1000" 
                                   class="bg-gray-700 border border-gray-600 rounded-md text-white p-2 text-sm w-32">
                            <span class="text-gray-400 text-sm">‚Ç¥ –∑–∞ –º—ñ—Å—è—Ü—å</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Param5: –ö–ª–∏–µ–Ω—Ç—ã –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ -->
                    <div class="flex items-start space-x-3">
                      <input type="checkbox" id="focus2Param5" class="mt-1">
                      <div class="flex-1">
                        <label for="focus2Param5" class="text-white font-medium">–ö–ª—ñ—î–Ω—Ç–∏ –∑ –ø–µ–≤–Ω–∏—Ö —Å–µ–≥–º–µ–Ω—Ç—ñ–≤</label>
                        <p class="text-gray-400 text-sm">–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –Ω–∞–ª–µ–∂–∞—Ç—å –¥–æ –≤–∫–∞–∑–∞–Ω–∏—Ö —Å–µ–≥–º–µ–Ω—Ç—ñ–≤</p>
                        <div id="focus2Param5Options" class="mt-2 hidden">
                          <div class="space-y-2">
                            <label class="flex items-center">
                              <input type="checkbox" id="focus2Param5VIP" class="mr-2">
                              <span class="text-white text-sm">VIP –∫–ª—ñ—î–Ω—Ç–∏</span>
                            </label>
                            <label class="flex items-center">
                              <input type="checkbox" id="focus2Param5Regular" class="mr-2">
                              <span class="text-white text-sm">–ó–≤–∏—á–∞–π–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏</span>
                            </label>
                            <label class="flex items-center">
                              <input type="checkbox" id="focus2Param5New" class="mr-2">
                              <span class="text-white text-sm">–ù–æ–≤—ñ –∫–ª—ñ—î–Ω—Ç–∏</span>
                            </label>
                            <label class="flex items-center">
                              <input type="checkbox" id="focus2Param5Inactive" class="mr-2">
                              <span class="text-white text-sm">–ù–µ–∞–∫—Ç–∏–≤–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏</span>
                            </label>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Param6: –ü–æ—Ö–æ–∂—ñ –∫–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –∫—É–ø—É–≤–∞–ª–∏ -->
                    <div class="flex items-start space-x-3">
                      <input type="checkbox" id="focus2Param6" class="mt-1">
                      <div class="flex-1">
                        <label for="focus2Param6" class="text-white font-medium">–ü–æ—Ö–æ–∂—ñ –∫–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –∫—É–ø—É–≤–∞–ª–∏</label>
                        <p class="text-gray-400 text-sm">–ö–ª—ñ—î–Ω—Ç–∏ –∑ —Å—Ö–æ–∂–æ—é —Å—Ñ–µ—Ä–æ—é –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ, —è–∫—ñ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –∫—É–ø—É–≤–∞–ª–∏ —Ñ–æ–∫—É—Å–Ω—ñ —Ç–æ–≤–∞—Ä–∏</p>
                        <div id="focus2Param6Options" class="mt-2 hidden">
                          <div class="flex items-center space-x-2">
                            <input type="number" id="focus2Param6Similarity" min="1" max="100" value="80"
                                   class="bg-gray-700 border border-gray-600 rounded-md text-white p-2 text-sm w-32">
                            <span class="text-gray-400 text-sm">% —Å—Ö–æ–∂–æ—Å—Ç—ñ</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Param7: –ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –±–µ—Ä—É—Ç—å X, –∞–ª–µ –Ω–µ –±–µ—Ä—É—Ç—å —Ç–æ–≤–∞—Ä–∏ –∑ —Ñ–æ–∫—É—Å–∞ -->
                    <div class="flex items-start space-x-3">
                      <input type="checkbox" id="focus2Param7" class="mt-1">
                      <div class="flex-1">
                        <label for="focus2Param7" class="text-white font-medium">–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –±–µ—Ä—É—Ç—å X, –∞–ª–µ –Ω–µ –±–µ—Ä—É—Ç—å —Ç–æ–≤–∞—Ä–∏ –∑ —Ñ–æ–∫—É—Å–∞</label>
                        <p class="text-gray-400 text-sm">–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –∫—É–ø—É—é—Ç—å –≤–∫–∞–∑–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏, –∞–ª–µ –Ω–µ –∫—É–ø—É—é—Ç—å —Ñ–æ–∫—É—Å–Ω—ñ</p>
                        <div id="focus2Param7Options" class="mt-2 hidden">
                          <div class="space-y-2">
                            <button type="button" id="focus2SelectParam7Products" 
                                    class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500 transition-colors text-sm">
                              –û–±—Ä–∞—Ç–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É X
                            </button>
                            <div id="focus2Param7ProductsDisplay" class="bg-gray-800 rounded p-3 min-h-[60px] text-sm text-gray-300">
                              –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ X –Ω–µ –æ–±—Ä–∞–Ω–∞
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </form>
            </div>
            
            <!-- –§—É—Ç–µ—Ä -->
            <div class="p-6 border-t border-gray-700 flex items-center justify-between">
              <button id="cancel-focus2-create-task" class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-500 transition-colors">
                –°–∫–∞—Å—É–≤–∞—Ç–∏
              </button>
              <button id="save-focus2-create-task" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500 transition-colors">
                –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫ body
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.setupCreateModalEventListeners();
    
    console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ –≤—ñ–¥–∫—Ä–∏—Ç–æ');
  }
  
  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è
   */
  setupCreateModalEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    const closeBtn = document.getElementById('close-focus2-create-modal');
    if (closeBtn) {
      closeBtn.onclick = () => this.closeCreateModal();
    }
    
    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    const cancelBtn = document.getElementById('cancel-focus2-create-task');
    if (cancelBtn) {
      cancelBtn.onclick = () => this.closeCreateModal();
    }
    
    // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const saveBtn = document.getElementById('save-focus2-create-task');
    if (saveBtn) {
      saveBtn.onclick = () => this.saveTask();
    }
    
    // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
    const nomenclatureBtn = document.getElementById('focus2SelectNomenclature');
    if (nomenclatureBtn) {
      nomenclatureBtn.onclick = () => {
        console.log('üîÑ –ö–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ –≤–∏–±–æ—Ä—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏');
        console.log('üìã this.nomenclatureSelector:', this.nomenclatureSelector);
        if (this.nomenclatureSelector && typeof this.nomenclatureSelector.openSelector === 'function') {
          console.log('‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –≥–æ—Ç–æ–≤–∏–π –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è');
          this.nomenclatureSelector.openSelector(
            this.getSelectedNomenclature(),
            'include',
            (selectedItems) => {
              console.log('‚úÖ –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –æ–±—Ä–∞–Ω–∞:', selectedItems);
              this.setSelectedNomenclature(selectedItems);
              this.updateNomenclatureDisplay();
            }
          );
        } else {
          console.error('‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
          console.log('üìã –¢–∏–ø nomenclatureSelector:', typeof this.nomenclatureSelector);
          console.log('üìã –ú–µ—Ç–æ–¥–∏ nomenclatureSelector:', this.nomenclatureSelector ? Object.keys(this.nomenclatureSelector) : 'null');
          alert('–ü–æ–º–∏–ª–∫–∞: —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –Ω–µ –≥–æ—Ç–æ–≤–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.');
        }
      };
    }
    
    // –§–æ—Ä–º–∞
    const form = document.getElementById('focus2-task-form');
    if (form) {
      form.onsubmit = (e) => {
        e.preventDefault();
        this.saveTask();
      };
    }
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    this.setupParameterEventListeners();
    
    // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
    this.setupNomenclatureSelectors();
  }
  
  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
   */
  setupParameterEventListeners() {
    // Param1
    const param1 = document.getElementById('focus2Param1');
    if (param1) {
      param1.addEventListener('change', (e) => {
        const options = document.getElementById('focus2Param1Options');
        if (options) {
          options.classList.toggle('hidden', !e.target.checked);
        }
      });
    }
    
    // Param2
    const param2 = document.getElementById('focus2Param2');
    if (param2) {
      param2.addEventListener('change', (e) => {
        const options = document.getElementById('focus2Param2Options');
        if (options) {
          options.classList.toggle('hidden', !e.target.checked);
        }
      });
    }
    
    // Param3
    const param3 = document.getElementById('focus2Param3');
    if (param3) {
      param3.addEventListener('change', (e) => {
        const options = document.getElementById('focus2Param3Options');
        if (options) {
          options.classList.toggle('hidden', !e.target.checked);
        }
      });
    }
    
    // Param4
    const param4 = document.getElementById('focus2Param4');
    if (param4) {
      param4.addEventListener('change', (e) => {
        const options = document.getElementById('focus2Param4Options');
        if (options) {
          options.classList.toggle('hidden', !e.target.checked);
        }
      });
    }
    
    // Param5
    const param5 = document.getElementById('focus2Param5');
    if (param5) {
      param5.addEventListener('change', (e) => {
        const options = document.getElementById('focus2Param5Options');
        if (options) {
          options.classList.toggle('hidden', !e.target.checked);
        }
      });
    }
    
    // Param6
    const param6 = document.getElementById('focus2Param6');
    if (param6) {
      param6.addEventListener('change', (e) => {
        const options = document.getElementById('focus2Param6Options');
        if (options) {
          options.classList.toggle('hidden', !e.target.checked);
        }
      });
    }
    
    // Param7
    const param7 = document.getElementById('focus2Param7');
    if (param7) {
      param7.addEventListener('change', (e) => {
        const options = document.getElementById('focus2Param7Options');
        if (options) {
          options.classList.toggle('hidden', !e.target.checked);
        }
      });
    }
  }
  
  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
   */
  setupNomenclatureSelectors() {
    // –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
    const mainSelector = document.getElementById('focus2SelectNomenclature');
    if (mainSelector) {
      mainSelector.addEventListener('click', () => {
        console.log('üîÑ –ö–ª—ñ–∫ –ø–æ –æ—Å–Ω–æ–≤–Ω—ñ–π –∫–Ω–æ–ø—Ü—ñ –≤–∏–±–æ—Ä—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏');
        if (this.nomenclatureSelector) {
          this.nomenclatureSelector.openSelector(
            this.getSelectedNomenclature(),
            'include',
            (selectedItems, filterType) => {
              this.setSelectedNomenclature(selectedItems);
              this.updateNomenclatureDisplay();
            }
          );
        }
      });
    } else {
      console.error('‚ùå –ö–Ω–æ–ø–∫–∞ focus2SelectNomenclature –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
    }
    

    
    // –°–µ–ª–µ–∫—Ç–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è Param7
    const param7Selector = document.getElementById('focus2SelectParam7Products');
    if (param7Selector) {
      param7Selector.addEventListener('click', () => {
        console.log('üîÑ –ö–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ –≤–∏–±–æ—Ä—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ X –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 7');
        console.log('üìã this.nomenclatureSelector:', this.nomenclatureSelector);
        
        if (this.nomenclatureSelector && typeof this.nomenclatureSelector.openSelector === 'function') {
          console.log('‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –≥–æ—Ç–æ–≤–∏–π –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 7');
          this.nomenclatureSelector.openSelector(
            this.getSelectedParam7Products(),
            'include',
            (selectedItems, filterType) => {
              console.log('‚úÖ –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ X –æ–±—Ä–∞–Ω–∞ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 7:', selectedItems);
              this.setSelectedParam7Products(selectedItems);
              this.updateParam7ProductsDisplay();
            }
          );
        } else {
          console.error('‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 7');
          alert('–ü–æ–º–∏–ª–∫–∞: —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –Ω–µ –≥–æ—Ç–æ–≤–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.');
        }
      });
    } else {
      console.error('‚ùå –ö–Ω–æ–ø–∫–∞ focus2SelectParam7Products –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
    }
  }
  
  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è
   */
  closeCreateModal() {
    const modal = document.getElementById('focus2-create-task-modal');
    if (modal) {
      modal.remove();
    }
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
   */
  async saveTask() {
    try {
      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
      const taskData = this.collectTaskData();
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!this.validateTaskData(taskData)) {
        return;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      this.showSaveProgress();
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Firebase
      const taskId = await this.createTaskInFirebase(taskData);
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      this.closeCreateModal();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      this.showSuccessNotification(taskId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
      await this.refreshTasksList();
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ:', error);
      this.showErrorNotification(error.message);
    }
  }
  
  /**
   * –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
   */
  collectTaskData() {
    return {
      title: document.getElementById('focus2TaskTitle')?.value?.trim() || '',
      description: document.getElementById('focus2TaskDescription')?.value?.trim() || '',
      periodFrom: document.getElementById('focus2TaskPeriodFrom')?.value || '',
      periodTo: document.getElementById('focus2TaskPeriodTo')?.value || '',
      products: this.getSelectedNomenclature(),
      parameters: {
        param1: {
          enabled: document.getElementById('focus2Param1')?.checked || false,
          period: document.getElementById('focus2Param1Period')?.value || 'month'
        },
        param2: {
          enabled: document.getElementById('focus2Param2')?.checked || false,
          days: parseInt(document.getElementById('focus2Param2Days')?.value || '30')
        },
        param3: {
          enabled: document.getElementById('focus2Param3')?.checked || false,
          frequency: parseInt(document.getElementById('focus2Param3Frequency')?.value || '1')
        },
        param4: {
          enabled: document.getElementById('focus2Param4')?.checked || false,
          amount: parseInt(document.getElementById('focus2Param4Amount')?.value || '1000')
        },
        param5: {
          enabled: document.getElementById('focus2Param5')?.checked || false,
          segments: {
            vip: document.getElementById('focus2Param5VIP')?.checked || false,
            regular: document.getElementById('focus2Param5Regular')?.checked || false,
            new: document.getElementById('focus2Param5New')?.checked || false,
            inactive: document.getElementById('focus2Param5Inactive')?.checked || false
          }
        },
        param6: {
          enabled: document.getElementById('focus2Param6')?.checked || false,
          similarity: parseInt(document.getElementById('focus2Param6Similarity')?.value || '80')
        },
        param7: {
          enabled: document.getElementById('focus2Param7')?.checked || false,
          products: this.getSelectedParam7Products()
        }
      },
      createdAt: new Date().toISOString(),
      createdBy: window.state?.currentUserId,
      status: 'active'
    };
  }
  
  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏
   */
  validateTaskData(taskData) {
    if (!taskData.title) {
      alert('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–¥–∞—á—ñ!');
      return false;
    }
    
    if (taskData.products.length === 0) {
      alert('–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –¥–ª—è —Ñ–æ–∫—É—Å—É!');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∫–ª—é—á–µ–Ω
    const hasEnabledParams = Object.values(taskData.parameters).some(param => param.enabled);
    if (!hasEnabledParams) {
      alert('–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –∞–Ω–∞–ª—ñ–∑—É!');
      return false;
    }
    
    return true;
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Firebase
   */
  async createTaskInFirebase(taskData) {
    const companyId = window.state?.currentCompanyId;
    if (!companyId) {
      throw new Error('–ö–æ–º–ø–∞–Ω—ñ—è –Ω–µ –≤–∏–±—Ä–∞–Ω–∞!');
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º clientsSnapshot –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º
    let clientsSnapshot = [];
    let hasSnapshot = false;
    
    if (window.focus2Data?.salesData && window.focus2Data?.nomenclatureData && window.focus2Data?.clientManagerDirectory) {
      try {
        console.log('üîç –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è clientsSnapshot –¥–ª—è –Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ...');
        
        const clientAnalyzer = new FocusClientAnalyzer();
        await clientAnalyzer.init(
          window.focus2Data.salesData,
          window.focus2Data.nomenclatureData,
          window.focus2Data.clientManagerDirectory
        );
        
        clientsSnapshot = await clientAnalyzer.generateClientsSnapshot(taskData);
        hasSnapshot = clientsSnapshot.length > 0;
        console.log('‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ clientsSnapshot:', clientsSnapshot.length, '–∫–ª—ñ—î–Ω—Ç—ñ–≤');
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó clientsSnapshot:', error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ clientsSnapshot
      }
    } else {
      console.warn('‚ö†Ô∏è –î–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∫–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–¥–∞—á—É –±–µ–∑ clientsSnapshot');
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –±–µ–∑ clientsSnapshot –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
    const taskDataWithoutSnapshot = {
      ...taskData,
      hasClientsSnapshot: hasSnapshot,
      clientsSnapshotCount: clientsSnapshot.length
    };
    
    const tasksRef = firebase.collection(firebase.db, 'companies', companyId, 'focusTasks2');
    const docRef = await firebase.addDoc(tasksRef, taskDataWithoutSnapshot);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å clientsSnapshot, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–æ–¥–∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if (hasSnapshot && clientsSnapshot.length > 0) {
      try {
        const snapshotRef = firebase.collection(firebase.db, 'companies', companyId, 'focusTasks2', docRef.id, 'clientsSnapshot');
        
        // –†–∞–∑–±–∏–≤–∞–µ–º clientsSnapshot –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
        const chunkSize = 1000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
        const chunks = [];
        
        for (let i = 0; i < clientsSnapshot.length; i += chunkSize) {
          chunks.push(clientsSnapshot.slice(i, i + chunkSize));
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        for (let i = 0; i < chunks.length; i++) {
          await firebase.addDoc(snapshotRef, {
            chunkIndex: i,
            totalChunks: chunks.length,
            clients: chunks[i],
            createdAt: new Date().toISOString()
          });
        }
        
        console.log('‚úÖ clientsSnapshot –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –æ–∫—Ä–µ–º—ñ–π –ø—ñ–¥–∫–æ–ª–µ–∫—Ü—ñ—ó:', chunks.length, '—á–∞—Å—Ç–∏–Ω');
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è clientsSnapshot:', error);
        // –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ snapshot –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
      }
    }
    
    console.log('‚úÖ –ó–∞–¥–∞—á—É —Å—Ç–≤–æ—Ä–µ–Ω–æ:', docRef.id);
    return docRef.id;
  }
  
  /**
   * –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   */
  showSaveProgress() {
    const saveBtn = document.getElementById('save-focus2-create-task');
    saveBtn.textContent = '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è...';
    saveBtn.disabled = true;
  }
  
  /**
   * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
   */
  showSuccessNotification(taskId) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    alert(`‚úÖ –ó–∞–¥–∞—á—É —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! ID: ${taskId}`);
  }
  
  /**
   * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   */
  showErrorNotification(message) {
    alert(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${message}`);
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
   */
  async refreshTasksList() {
    try {
      console.log('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á...');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase
      await refreshFocus2Data();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      const tasksContainer = document.getElementById('tasks-tab');
      if (tasksContainer && window.focus2Components?.ui) {
        await window.focus2Components.ui.loadTasksContent(tasksContainer);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      if (window.updateStatistics) {
        window.updateStatistics();
      }
      
      console.log('‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á:', error);
    }
  }
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π
  
  getSelectedNomenclature() {
    return window.focus2SelectedNomenclature || [];
  }
  
  setSelectedNomenclature(items) {
    window.focus2SelectedNomenclature = items;
  }
  

  
  getSelectedParam7Products() {
    return window.focus2SelectedParam7Products || [];
  }
  
  setSelectedParam7Products(items) {
    window.focus2SelectedParam7Products = items;
  }
  
  updateNomenclatureDisplay() {
    const container = document.getElementById('focus2NomenclatureList');
    const countElement = document.getElementById('focus2SelectedNomenclatureCount');
    const items = this.getSelectedNomenclature();
    
    if (countElement) {
      countElement.textContent = `${items.length} –ø–æ–∑–∏—Ü—ñ–π –æ–±—Ä–∞–Ω–æ`;
    }
    
    if (container) {
      if (items.length === 0) {
        container.innerHTML = '<span class="text-gray-400">–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –Ω–µ –æ–±—Ä–∞–Ω–∞</span>';
      } else {
        container.innerHTML = this.renderSelectedNomenclature(items);
      }
    }
  }
  

  
  updateParam7ProductsDisplay() {
    const container = document.getElementById('focus2Param7ProductsDisplay');
    const items = this.getSelectedParam7Products();
    
    if (container) {
      if (items.length === 0) {
        container.innerHTML = '<span class="text-gray-400 text-sm">–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ X –Ω–µ –æ–±—Ä–∞–Ω–∞</span>';
      } else if (items.length <= 5) {
        // –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ–π –º–∞–ª–æ, –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ
        container.innerHTML = items.map(code => 
          `<span class="inline-block bg-orange-600 text-white px-2 py-1 rounded text-sm mr-2 mb-2">
            ${this.getNomenclatureName(code)}
          </span>`
        ).join('');
      } else {
        // –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ–π –±–∞–≥–∞—Ç–æ, –ø–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3 —ñ –∫–Ω–æ–ø–∫—É
        container.innerHTML = `
          <div class="space-y-2">
            <div class="flex items-center justify-between">
              <span class="text-orange-400 text-sm font-medium">–û–±—Ä–∞–Ω–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ X (${items.length} –ø–æ–∑–∏—Ü—ñ–π)</span>
              <button type="button" onclick="window.focus2Components?.taskConstructor?.toggleParam7Details()" 
                      class="text-orange-400 hover:text-orange-300 text-sm">
                –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ
              </button>
            </div>
            <div id="param7Details" class="hidden space-y-2 max-h-40 overflow-y-auto">
              ${items.map(code => 
                `<span class="inline-block bg-orange-600 text-white px-2 py-1 rounded text-sm mr-2 mb-2">
                  ${this.getNomenclatureName(code)}
                </span>`
              ).join('')}
            </div>
            <div id="param7Preview">
              ${items.slice(0, 3).map(code => 
                `<span class="inline-block bg-orange-600 text-white px-2 py-1 rounded text-sm mr-2 mb-2">
                  ${this.getNomenclatureName(code)}
                </span>`
              ).join('')}
              <span class="inline-block bg-orange-500 text-white px-2 py-1 rounded text-sm mr-2 mb-2">
                ... —Ç–∞ —â–µ ${items.length - 3} –ø–æ–∑–∏—Ü—ñ–π
              </span>
            </div>
          </div>
        `;
      }
    }
  }
  
  getNomenclatureName(code) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ nomenclatureData (API –¥–∞–Ω–Ω—ã–µ)
    const nomenclatureData = window.focus2Data?.nomenclatureData || [];
    const item = nomenclatureData.find(n => n['–ö–æ–¥'] === code || n['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞.–ö–æ–¥'] === code);
    if (item) {
      return item['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] || item['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞.–ù–∞–∑–≤–∞–Ω–∏–µ'] || code;
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –≤ nomenclature (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    const nomenclature = window.focus2Data?.nomenclature || [];
    const categoryItem = nomenclature.find(n => n['–ö–æ–¥'] === code);
    if (categoryItem) {
      return categoryItem['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] || code;
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥
    return code;
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∏–±—Ä–∞–Ω–æ—ó –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏
   */
  renderSelectedNomenclature(products) {
    if (!products || products.length === 0) {
      return '<span class="text-gray-400">–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –Ω–µ –æ–±—Ä–∞–Ω–∞</span>';
    }
    
    // –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ–π –º–∞–ª–æ (–º–µ–Ω—à–µ 5), –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ
    if (products.length <= 5) {
      return `
        <div class="space-y-2">
          ${products.map(code => `
            <span class="inline-block bg-blue-600 text-white px-2 py-1 rounded text-sm mr-2 mb-2">
              ${this.getNomenclatureName(code)}
            </span>
          `).join('')}
        </div>
      `;
    }
    
    // –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ–π –±–∞–≥–∞—Ç–æ, –ø–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3 —ñ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ"
    return `
      <div class="space-y-2">
        <div class="flex items-center justify-between">
          <span class="text-white font-medium">–û–±—Ä–∞–Ω–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ (${products.length} –ø–æ–∑–∏—Ü—ñ–π)</span>
          <button type="button" onclick="window.focus2Components?.taskConstructor?.toggleNomenclatureDetails()" 
                  class="text-blue-400 hover:text-blue-300 text-sm">
            –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ
          </button>
        </div>
        <div id="nomenclatureDetails" class="hidden space-y-2 max-h-40 overflow-y-auto">
          ${products.map(code => `
            <span class="inline-block bg-blue-600 text-white px-2 py-1 rounded text-sm mr-2 mb-2">
              ${this.getNomenclatureName(code)}
            </span>
          `).join('')}
        </div>
        <div id="nomenclaturePreview" class="space-y-2">
          ${products.slice(0, 3).map(code => `
            <span class="inline-block bg-blue-600 text-white px-2 py-1 rounded text-sm mr-2 mb-2">
              ${this.getNomenclatureName(code)}
            </span>
          `).join('')}
          <span class="inline-block bg-blue-500 text-white px-2 py-1 rounded text-sm mr-2 mb-2">
            ... —Ç–∞ —â–µ ${products.length - 3} –ø–æ–∑–∏—Ü—ñ–π
          </span>
        </div>
      </div>
    `;
  }
  
  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
   */
  toggleNomenclatureDetails() {
    const detailsElement = document.getElementById('nomenclatureDetails');
    const previewElement = document.getElementById('nomenclaturePreview');
    const button = document.querySelector('button[onclick*="toggleNomenclatureDetails"]');
    
    if (detailsElement && previewElement && button) {
      const isHidden = detailsElement.classList.contains('hidden');
      
      if (isHidden) {
        detailsElement.classList.remove('hidden');
        previewElement.classList.add('hidden');
        button.textContent = '–°—Ö–æ–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ';
      } else {
        detailsElement.classList.add('hidden');
        previewElement.classList.remove('hidden');
        button.textContent = '–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ';
      }
    }
  }
  
  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –¥–ª—è Param7
   */
  toggleParam7Details() {
    const detailsElement = document.getElementById('param7Details');
    const previewElement = document.getElementById('param7Preview');
    const button = document.querySelector('button[onclick*="toggleParam7Details"]');
    
    if (detailsElement && previewElement && button) {
      const isHidden = detailsElement.classList.contains('hidden');
      
      if (isHidden) {
        detailsElement.classList.remove('hidden');
        previewElement.classList.add('hidden');
        button.textContent = '–°—Ö–æ–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ';
      } else {
        detailsElement.classList.add('hidden');
        previewElement.classList.remove('hidden');
        button.textContent = '–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ';
      }
    }
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∏–±—Ä–∞–Ω–æ—ó –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –¥–ª—è Param7 (—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è)
   */
  renderSelectedParam7Nomenclature(products) {
    if (!products || products.length === 0) {
      return '<span class="text-gray-400">–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ X –Ω–µ –æ–±—Ä–∞–Ω–∞</span>';
    }
    
    // –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ–π –º–∞–ª–æ (–º–µ–Ω—à–µ 5), –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ
    if (products.length <= 5) {
      return `
        <div class="space-y-2">
          ${products.map(code => `
            <span class="inline-block bg-orange-600 text-white px-2 py-1 rounded text-sm mr-2 mb-2">
              ${this.getNomenclatureName(code)}
            </span>
          `).join('')}
        </div>
      `;
    }
    
    // –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ–π –±–∞–≥–∞—Ç–æ, –ø–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3 —ñ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ"
    return `
      <div class="space-y-2">
        <div class="flex items-center justify-between">
          <span class="text-white font-medium">–û–±—Ä–∞–Ω–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ X (${products.length} –ø–æ–∑–∏—Ü—ñ–π)</span>
          <button type="button" onclick="window.focus2Components?.taskConstructor?.toggleEditParam7Details()" 
                  class="text-blue-400 hover:text-blue-300 text-sm">
            –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ
          </button>
        </div>
        <div id="editParam7Details" class="hidden space-y-2 max-h-40 overflow-y-auto">
          ${products.map(code => `
            <span class="inline-block bg-orange-600 text-white px-2 py-1 rounded text-sm mr-2 mb-2">
              ${this.getNomenclatureName(code)}
            </span>
          `).join('')}
        </div>
        <div id="editParam7Preview" class="space-y-2">
          ${products.slice(0, 3).map(code => `
            <span class="inline-block bg-orange-600 text-white px-2 py-1 rounded text-sm mr-2 mb-2">
              ${this.getNomenclatureName(code)}
            </span>
          `).join('')}
          <span class="inline-block bg-orange-500 text-white px-2 py-1 rounded text-sm mr-2 mb-2">
            ... —Ç–∞ —â–µ ${products.length - 3} –ø–æ–∑–∏—Ü—ñ–π
          </span>
        </div>
      </div>
    `;
  }
  
  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –¥–ª—è Param7 (—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è)
   */
  toggleEditParam7Details() {
    const detailsElement = document.getElementById('editParam7Details');
    const previewElement = document.getElementById('editParam7Preview');
    const button = document.querySelector('button[onclick*="toggleEditParam7Details"]');
    
    if (detailsElement && previewElement && button) {
      const isHidden = detailsElement.classList.contains('hidden');
      
      if (isHidden) {
        detailsElement.classList.remove('hidden');
        previewElement.classList.add('hidden');
        button.textContent = '–°—Ö–æ–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ';
      } else {
        detailsElement.classList.add('hidden');
        previewElement.classList.remove('hidden');
        button.textContent = '–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ';
      }
    }
  }
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ clientsSnapshot –∏–∑ –ø–æ–¥–∫–æ–ª–ª–µ–∫—Ü–∏–∏
   */
  async loadClientsSnapshot(taskId) {
    const companyId = window.state?.currentCompanyId;
    if (!companyId) {
      throw new Error('–ö–æ–º–ø–∞–Ω—ñ—è –Ω–µ –≤–∏–±—Ä–∞–Ω–∞!');
    }
    
    try {
      const snapshotRef = firebase.collection(firebase.db, 'companies', companyId, 'focusTasks2', taskId, 'clientsSnapshot');
      const snapshot = await firebase.getDocs(snapshotRef);
      
      if (snapshot.empty) {
        console.log('‚ö†Ô∏è clientsSnapshot –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∑–∞–¥–∞—á—ñ:', taskId);
        return [];
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ snapshot
      const chunks = [];
      snapshot.forEach(doc => {
        chunks.push({
          chunkIndex: doc.data().chunkIndex,
          clients: doc.data().clients
        });
      });
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
      chunks.sort((a, b) => a.chunkIndex - b.chunkIndex);
      const clientsSnapshot = chunks.flatMap(chunk => chunk.clients);
      
      console.log('‚úÖ clientsSnapshot –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', clientsSnapshot.length, '–∫–ª—ñ—î–Ω—Ç—ñ–≤');
      return clientsSnapshot;
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è clientsSnapshot:', error);
      return [];
    }
  }
  
  /**
   * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
   */
  async editTask(taskId) {
    try {
      console.log('‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ:', taskId);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      const confirmed = confirm('‚ö†Ô∏è –£–≤–∞–≥–∞! –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ –º–æ–∂–µ –≤–ø–ª–∏–Ω—É—Ç–∏ –Ω–∞ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ —Ç–∞ –∞–Ω–∞–ª—ñ–∑. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?');
      if (!confirmed) {
        return;
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É
      const tasks = window.focus2Data?.tasks || [];
      const task = tasks.find(t => t.id === taskId);
      
      if (!task) {
        throw new Error('–ó–∞–¥–∞—á—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      this.showEditModal(task);
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ: ' + error.message);
    }
  }
  
  /**
   * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  showEditModal(task) {
    const modalHTML = `
      <div id="focus2-edit-task-modal" class="fixed inset-0 bg-black bg-opacity-50 z-[70]">
        <div class="flex items-center justify-center min-h-screen p-4">
          <div class="bg-gray-800 rounded-lg shadow-xl w-full max-w-4xl max-h-[95vh] flex flex-col overflow-hidden">
            <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
            <div class="flex items-center justify-between p-6 border-b border-gray-700">
              <h3 class="text-xl font-semibold text-white">–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ñ–æ–∫—É—Å–Ω–æ—ó –∑–∞–¥–∞—á—ñ 2.0</h3>
              <button id="close-focus2-edit-modal" class="text-gray-400 hover:text-white">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            
            <!-- –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ -->
            <div class="flex-1 overflow-y-auto p-6">
              <form id="focus2-edit-task-form" class="space-y-6">
                <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2">–ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ *</label>
                    <input type="text" id="editFocus2TaskTitle" class="w-full bg-gray-700 border border-gray-600 rounded-md text-white p-3" 
                           required maxlength="100" placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–¥–∞—á—ñ" value="${task.title || ''}">
                  </div>
                  
                  <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2">–ü–µ—Ä—ñ–æ–¥ –¥—ñ—ó –∑–∞–¥–∞—á—ñ</label>
                    <div class="grid grid-cols-2 gap-2">
                      <input type="date" id="editFocus2TaskPeriodFrom" class="bg-gray-700 border border-gray-600 rounded-md text-white p-3" value="${task.periodFrom || ''}">
                      <input type="date" id="editFocus2TaskPeriodTo" class="bg-gray-700 border border-gray-600 rounded-md text-white p-3" value="${task.periodTo || ''}">
                    </div>
                  </div>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-300 mb-2">–û–ø–∏—Å –∑–∞–¥–∞—á—ñ</label>
                  <textarea id="editFocus2TaskDescription" rows="3" 
                           class="w-full bg-gray-700 border border-gray-600 rounded-md text-white p-3"
                           placeholder="–û–ø–∏—à—ñ—Ç—å –º–µ—Ç—É —Ç–∞ –¥–µ—Ç–∞–ª—ñ –∑–∞–¥–∞—á—ñ">${task.description || ''}</textarea>
                </div>
                
                <!-- –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ -->
                <div>
                  <label class="block text-sm font-medium text-gray-300 mb-2">–§–æ–∫—É—Å–Ω–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞</label>
                  <div class="flex items-center space-x-2">
                    <button type="button" id="editFocus2SelectNomenclature" 
                            class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500 transition-colors">
                      –û–±—Ä–∞—Ç–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É
                    </button>
                    <span id="editFocus2SelectedNomenclatureCount" class="text-gray-400">${(task.products || []).length} –ø–æ–∑–∏—Ü—ñ–π –æ–±—Ä–∞–Ω–æ</span>
                  </div>
                  <div id="editFocus2NomenclatureList" class="mt-2 p-3 bg-gray-700 rounded-md min-h-[60px]">
                    ${this.renderSelectedNomenclature(task.products || [])}
                  </div>
                </div>
                
                <!-- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ -->
                <div>
                  <label class="block text-sm font-medium text-gray-300 mb-2">–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∞–Ω–∞–ª—ñ–∑—É</label>
                  <div class="space-y-3">
                    <!-- Param1: –ö–ª–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫—É–ø–∞–ª–∏ —Ä–∞–Ω—å—à–µ, –Ω–æ –Ω–µ —Å–µ–π—á–∞—Å -->
                    <div class="flex items-start space-x-3">
                      <input type="checkbox" id="editFocus2Param1" class="mt-1" ${task.parameters?.param1?.enabled ? 'checked' : ''}>
                      <div class="flex-1">
                        <label for="editFocus2Param1" class="text-white font-medium">–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –∫—É–ø—É–≤–∞–ª–∏ —Ä–∞–Ω—ñ—à–µ, –∞–ª–µ –Ω–µ –∑–∞—Ä–∞–∑</label>
                        <p class="text-gray-400 text-sm">–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –∫—É–ø—É–≤–∞–ª–∏ —Ñ–æ–∫—É—Å–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –ø–µ—Ä—ñ–æ–¥—ñ, –∞–ª–µ –Ω–µ –∫—É–ø—É—é—Ç—å –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É</p>
                        <div id="editFocus2Param1Options" class="mt-2 ${task.parameters?.param1?.enabled ? '' : 'hidden'}">
                          <select id="editFocus2Param1Period" class="bg-gray-700 border border-gray-600 rounded-md text-white p-2 text-sm">
                            <option value="month" ${task.parameters?.param1?.period === 'month' ? 'selected' : ''}>–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –º—ñ—Å—è—Ü–µ–º</option>
                            <option value="quarter" ${task.parameters?.param1?.period === 'quarter' ? 'selected' : ''}>–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –∫–≤–∞—Ä—Ç–∞–ª–æ–º</option>
                            <option value="custom" ${task.parameters?.param1?.period === 'custom' ? 'selected' : ''}>–ö–∞—Å—Ç–æ–º–Ω–∏–π –ø–µ—Ä—ñ–æ–¥</option>
                          </select>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Param2: –ö–ª–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π -->
                    <div class="flex items-start space-x-3">
                      <input type="checkbox" id="editFocus2Param2" class="mt-1" ${task.parameters?.param2?.enabled ? 'checked' : ''}>
                      <div class="flex-1">
                        <label for="editFocus2Param2" class="text-white font-medium">–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –Ω–µ –∫—É–ø—É–≤–∞–ª–∏ –ø–µ–≤–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤</label>
                        <p class="text-gray-400 text-sm">–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –Ω–µ —Ä–æ–±–∏–ª–∏ –ø–æ–∫—É–ø–æ–∫ —Ñ–æ–∫—É—Å–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –ø—Ä–æ—Ç—è–≥–æ–º –≤–∫–∞–∑–∞–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É</p>
                        <div id="editFocus2Param2Options" class="mt-2 ${task.parameters?.param2?.enabled ? '' : 'hidden'}">
                          <div class="flex items-center space-x-2">
                            <input type="number" id="editFocus2Param2Days" min="1" max="365" value="${task.parameters?.param2?.days || 30}" 
                                   class="bg-gray-700 border border-gray-600 rounded-md text-white p-2 text-sm w-20">
                            <span class="text-gray-400 text-sm">–¥–Ω—ñ–≤</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Param3: –ö–ª–∏–µ–Ω—Ç—ã —Å –Ω–∏–∑–∫–æ–π —á–∞—Å—Ç–æ—Ç–æ–π –ø–æ–∫—É–ø–æ–∫ -->
                    <div class="flex items-start space-x-3">
                      <input type="checkbox" id="editFocus2Param3" class="mt-1" ${task.parameters?.param3?.enabled ? 'checked' : ''}>
                      <div class="flex-1">
                        <label for="editFocus2Param3" class="text-white font-medium">–ö–ª—ñ—î–Ω—Ç–∏ –∑ –Ω–∏–∑—å–∫–æ—é —á–∞—Å—Ç–æ—Ç–æ—é –ø–æ–∫—É–ø–æ–∫</label>
                        <p class="text-gray-400 text-sm">–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ —Ä—ñ–¥–∫–æ –∫—É–ø—É—é—Ç—å —Ñ–æ–∫—É—Å–Ω—ñ —Ç–æ–≤–∞—Ä–∏</p>
                        <div id="editFocus2Param3Options" class="mt-2 ${task.parameters?.param3?.enabled ? '' : 'hidden'}">
                          <div class="flex items-center space-x-2">
                            <input type="number" id="editFocus2Param3Frequency" min="1" max="12" value="${task.parameters?.param3?.frequency || 1}" 
                                   class="bg-gray-700 border border-gray-600 rounded-md text-white p-2 text-sm w-20">
                            <span class="text-gray-400 text-sm">–ø–æ–∫—É–ø–æ–∫ –∑–∞ –º—ñ—Å—è—Ü—å</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Param4: –ö–ª–∏–µ–Ω—Ç—ã —Å –Ω–∏–∑—å–∫–æ—é —Å—É–º–æ—é –ø–æ–∫—É–ø–æ–∫ -->
                    <div class="flex items-start space-x-3">
                      <input type="checkbox" id="editFocus2Param4" class="mt-1" ${task.parameters?.param4?.enabled ? 'checked' : ''}>
                      <div class="flex-1">
                        <label for="editFocus2Param4" class="text-white font-medium">–ö–ª—ñ—î–Ω—Ç–∏ –∑ –Ω–∏–∑—å–∫–æ—é —Å—É–º–æ—é –ø–æ–∫—É–ø–æ–∫</label>
                        <p class="text-gray-400 text-sm">–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –∫—É–ø—É—é—Ç—å –Ω–∞ –Ω–µ–≤–µ–ª–∏–∫—ñ —Å—É–º–∏</p>
                        <div id="editFocus2Param4Options" class="mt-2 ${task.parameters?.param4?.enabled ? '' : 'hidden'}">
                          <div class="flex items-center space-x-2">
                            <input type="number" id="editFocus2Param4Amount" min="1" value="${task.parameters?.param4?.amount || 1000}" 
                                   class="bg-gray-700 border border-gray-600 rounded-md text-white p-2 text-sm w-32">
                            <span class="text-gray-400 text-sm">‚Ç¥ –∑–∞ –º—ñ—Å—è—Ü—å</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Param5: –ö–ª–∏–µ–Ω—Ç—ã –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ -->
                    <div class="flex items-start space-x-3">
                      <input type="checkbox" id="editFocus2Param5" class="mt-1" ${task.parameters?.param5?.enabled ? 'checked' : ''}>
                      <div class="flex-1">
                        <label for="editFocus2Param5" class="text-white font-medium">–ö–ª—ñ—î–Ω—Ç–∏ –∑ –ø–µ–≤–Ω–∏—Ö —Å–µ–≥–º–µ–Ω—Ç—ñ–≤</label>
                        <p class="text-gray-400 text-sm">–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –Ω–∞–ª–µ–∂–∞—Ç—å –¥–æ –≤–∫–∞–∑–∞–Ω–∏—Ö —Å–µ–≥–º–µ–Ω—Ç—ñ–≤</p>
                        <div id="editFocus2Param5Options" class="mt-2 ${task.parameters?.param5?.enabled ? '' : 'hidden'}">
                          <div class="space-y-2">
                            <label class="flex items-center">
                              <input type="checkbox" id="editFocus2Param5VIP" class="mr-2" ${task.parameters?.param5?.segments?.vip ? 'checked' : ''}>
                              <span class="text-white text-sm">VIP –∫–ª—ñ—î–Ω—Ç–∏</span>
                            </label>
                            <label class="flex items-center">
                              <input type="checkbox" id="editFocus2Param5Regular" class="mr-2" ${task.parameters?.param5?.segments?.regular ? 'checked' : ''}>
                              <span class="text-white text-sm">–ó–≤–∏—á–∞–π–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏</span>
                            </label>
                            <label class="flex items-center">
                              <input type="checkbox" id="editFocus2Param5New" class="mr-2" ${task.parameters?.param5?.segments?.new ? 'checked' : ''}>
                              <span class="text-white text-sm">–ù–æ–≤—ñ –∫–ª—ñ—î–Ω—Ç–∏</span>
                            </label>
                            <label class="flex items-center">
                              <input type="checkbox" id="editFocus2Param5Inactive" class="mr-2" ${task.parameters?.param5?.segments?.inactive ? 'checked' : ''}>
                              <span class="text-white text-sm">–ù–µ–∞–∫—Ç–∏–≤–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏</span>
                            </label>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Param6: –ü–æ—Ö–æ–∂—ñ –∫–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –∫—É–ø—É–≤–∞–ª–∏ -->
                    <div class="flex items-start space-x-3">
                      <input type="checkbox" id="editFocus2Param6" class="mt-1" ${task.parameters?.param6?.enabled ? 'checked' : ''}>
                      <div class="flex-1">
                        <label for="editFocus2Param6" class="text-white font-medium">–ü–æ—Ö–æ–∂—ñ –∫–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –∫—É–ø—É–≤–∞–ª–∏</label>
                        <p class="text-gray-400 text-sm">–ö–ª—ñ—î–Ω—Ç–∏ –∑ —Å—Ö–æ–∂–æ—é —Å—Ñ–µ—Ä–æ—é –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ, —è–∫—ñ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –∫—É–ø—É–≤–∞–ª–∏ —Ñ–æ–∫—É—Å–Ω—ñ —Ç–æ–≤–∞—Ä–∏</p>
                        <div id="editFocus2Param6Options" class="mt-2 ${task.parameters?.param6?.enabled ? '' : 'hidden'}">
                          <div class="flex items-center space-x-2">
                            <input type="number" id="editFocus2Param6Similarity" min="1" max="100" value="${task.parameters?.param6?.similarity || 80}"
                                   class="bg-gray-700 border border-gray-600 rounded-md text-white p-2 text-sm w-32">
                            <span class="text-gray-400 text-sm">% —Å—Ö–æ–∂–æ—Å—Ç—ñ</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Param7: –ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –±–µ—Ä—É—Ç—å X, –∞–ª–µ –Ω–µ –±–µ—Ä—É—Ç—å —Ç–æ–≤–∞—Ä–∏ –∑ —Ñ–æ–∫—É—Å–∞ -->
                    <div class="flex items-start space-x-3">
                      <input type="checkbox" id="editFocus2Param7" class="mt-1" ${task.parameters?.param7?.enabled ? 'checked' : ''}>
                      <div class="flex-1">
                        <label for="editFocus2Param7" class="text-white font-medium">–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –±–µ—Ä—É—Ç—å X, –∞–ª–µ –Ω–µ –±–µ—Ä—É—Ç—å —Ç–æ–≤–∞—Ä–∏ –∑ —Ñ–æ–∫—É—Å–∞</label>
                        <p class="text-gray-400 text-sm">–ö–ª—ñ—î–Ω—Ç–∏, —è–∫—ñ –∫—É–ø—É—é—Ç—å –≤–∫–∞–∑–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏, –∞–ª–µ –Ω–µ –∫—É–ø—É—é—Ç—å —Ñ–æ–∫—É—Å–Ω—ñ</p>
                        <div id="editFocus2Param7Options" class="mt-2 ${task.parameters?.param7?.enabled ? '' : 'hidden'}">
                          <div class="space-y-2">
                            <button type="button" id="editFocus2SelectParam7Products" 
                                    class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500 transition-colors text-sm">
                              –û–±—Ä–∞—Ç–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É X
                            </button>
                            <div id="editFocus2Param7ProductsDisplay" class="bg-gray-800 rounded p-3 min-h-[60px] text-sm text-gray-300">
                              ${this.renderSelectedParam7Nomenclature(task.parameters?.param7?.products || [])}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </form>
            </div>
            
            <!-- –§—É—Ç–µ—Ä -->
            <div class="p-6 border-t border-gray-700 flex items-center justify-between">
              <button id="cancel-focus2-edit-task" class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-500 transition-colors">
                –°–∫–∞—Å—É–≤–∞—Ç–∏
              </button>
              <button id="save-focus2-edit-task" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500 transition-colors">
                –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫ body
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.setupEditModalEventListeners(task);
    
    console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ –≤—ñ–¥–∫—Ä–∏—Ç–æ');
  }
    
  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  setupEditModalEventListeners(task) {
    const modal = document.getElementById('focus2-edit-task-modal');
    if (!modal) return;
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const closeModal = () => {
      modal.remove();
    };
    
    const closeBtn = modal.querySelector('#close-focus2-edit-modal');
    const cancelBtn = modal.querySelector('#cancel-focus2-edit-task');
    const saveBtn = modal.querySelector('#save-focus2-edit-task');
    
    closeBtn.onclick = closeModal;
    cancelBtn.onclick = closeModal;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
    const selectNomenclatureBtn = modal.querySelector('#editFocus2SelectNomenclature');
    const nomenclatureList = modal.querySelector('#editFocus2NomenclatureList');
    const nomenclatureCount = modal.querySelector('#editFocus2SelectedNomenclatureCount');
    
    let selectedProducts = task.products || [];
    
    selectNomenclatureBtn.onclick = () => {
      if (this.nomenclatureSelector) {
        this.nomenclatureSelector.openSelector(
          selectedProducts,
          'include',
          (selectedCodes) => {
            selectedProducts = selectedCodes;
            nomenclatureList.innerHTML = this.renderSelectedNomenclature(selectedProducts);
            nomenclatureCount.textContent = `${selectedProducts.length} –ø–æ–∑–∏—Ü—ñ–π –æ–±—Ä–∞–Ω–æ`;
          }
        );
      }
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    this.setupEditParameterEventListeners(modal);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã Param7
    const selectParam7ProductsBtn = modal.querySelector('#editFocus2SelectParam7Products');
    const param7ProductsDisplay = modal.querySelector('#editFocus2Param7ProductsDisplay');
    
    let selectedParam7Products = task.parameters?.param7?.products || [];
    
    if (selectParam7ProductsBtn) {
      selectParam7ProductsBtn.onclick = () => {
        if (this.nomenclatureSelector) {
          this.nomenclatureSelector.openSelector(
            selectedParam7Products,
            'include',
            (selectedCodes) => {
              selectedParam7Products = selectedCodes;
              param7ProductsDisplay.innerHTML = this.renderSelectedNomenclature(selectedParam7Products);
            }
          );
        }
      };
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    saveBtn.onclick = async () => {
      try {
        const formData = this.collectEditFormData(modal, task, selectedProducts, selectedParam7Products);
        await this.updateTaskInFirebase(task.id, formData);
        
        console.log('‚úÖ –ó–∞–¥–∞—á—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ');
        closeModal();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        await this.refreshTasksList();
        
        alert('‚úÖ –ó–∞–¥–∞—á—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ');
        
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ: ' + error.message);
      }
    };
  }
  
  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  setupEditParameterEventListeners(modal) {
    // Param1
    const param1Checkbox = modal.querySelector('#editFocus2Param1');
    const param1Options = modal.querySelector('#editFocus2Param1Options');
    
    if (param1Checkbox && param1Options) {
      param1Checkbox.onchange = () => {
        param1Options.style.display = param1Checkbox.checked ? 'block' : 'none';
      };
    }
    
    // Param2
    const param2Checkbox = modal.querySelector('#editFocus2Param2');
    const param2Options = modal.querySelector('#editFocus2Param2Options');
    
    if (param2Checkbox && param2Options) {
      param2Checkbox.onchange = () => {
        param2Options.style.display = param2Checkbox.checked ? 'block' : 'none';
      };
    }
    
    // Param3
    const param3Checkbox = modal.querySelector('#editFocus2Param3');
    const param3Options = modal.querySelector('#editFocus2Param3Options');
    
    if (param3Checkbox && param3Options) {
      param3Checkbox.onchange = () => {
        param3Options.style.display = param3Checkbox.checked ? 'block' : 'none';
      };
    }
    
    // Param4
    const param4Checkbox = modal.querySelector('#editFocus2Param4');
    const param4Options = modal.querySelector('#editFocus2Param4Options');
    
    if (param4Checkbox && param4Options) {
      param4Checkbox.onchange = () => {
        param4Options.style.display = param4Checkbox.checked ? 'block' : 'none';
      };
    }
    
    // Param5
    const param5Checkbox = modal.querySelector('#editFocus2Param5');
    const param5Options = modal.querySelector('#editFocus2Param5Options');
    
    if (param5Checkbox && param5Options) {
      param5Checkbox.onchange = () => {
        param5Options.style.display = param5Checkbox.checked ? 'block' : 'none';
      };
    }
    
    // Param6
    const param6Checkbox = modal.querySelector('#editFocus2Param6');
    const param6Options = modal.querySelector('#editFocus2Param6Options');
    
    if (param6Checkbox && param6Options) {
      param6Checkbox.onchange = () => {
        param6Options.style.display = param6Checkbox.checked ? 'block' : 'none';
      };
    }
    
    // Param7
    const param7Checkbox = modal.querySelector('#editFocus2Param7');
    const param7Options = modal.querySelector('#editFocus2Param7Options');
    
    if (param7Checkbox && param7Options) {
      param7Checkbox.onchange = () => {
        param7Options.style.display = param7Checkbox.checked ? 'block' : 'none';
      };
    }
  }
  
  /**
   * –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  collectEditFormData(modal, task, selectedProducts = null, selectedParam7Products = null) {
    const title = modal.querySelector('#editFocus2TaskTitle').value.trim();
    const description = modal.querySelector('#editFocus2TaskDescription').value.trim();
    const products = selectedProducts || task.products || [];
    
    const parameters = {
      param1: {
        enabled: modal.querySelector('#editFocus2Param1').checked,
        period: modal.querySelector('#editFocus2Param1Period')?.value || task.parameters?.param1?.period || 'month'
      },
      param2: {
        enabled: modal.querySelector('#editFocus2Param2').checked,
        days: parseInt(modal.querySelector('#editFocus2Param2Days')?.value || task.parameters?.param2?.days || 30)
      },
      param3: {
        enabled: modal.querySelector('#editFocus2Param3').checked,
        frequency: parseInt(modal.querySelector('#editFocus2Param3Frequency')?.value || task.parameters?.param3?.frequency || 1)
      },
      param4: {
        enabled: modal.querySelector('#editFocus2Param4').checked,
        amount: parseInt(modal.querySelector('#editFocus2Param4Amount')?.value || task.parameters?.param4?.amount || 1000)
      },
      param5: {
        enabled: modal.querySelector('#editFocus2Param5').checked,
        segments: {
          vip: modal.querySelector('#editFocus2Param5VIP')?.checked || false,
          regular: modal.querySelector('#editFocus2Param5Regular')?.checked || false,
          new: modal.querySelector('#editFocus2Param5New')?.checked || false,
          inactive: modal.querySelector('#editFocus2Param5Inactive')?.checked || false
        }
      },
      param6: {
        enabled: modal.querySelector('#editFocus2Param6').checked,
        similarity: parseInt(modal.querySelector('#editFocus2Param6Similarity')?.value || task.parameters?.param6?.similarity || 80)
      },
      param7: {
        enabled: modal.querySelector('#editFocus2Param7').checked,
        products: selectedParam7Products || task.parameters?.param7?.products || []
      }
    };
    
    const periodFrom = modal.querySelector('#editFocus2TaskPeriodFrom').value;
    const periodTo = modal.querySelector('#editFocus2TaskPeriodTo').value;
    
    return {
      title,
      description,
      products,
      parameters,
      periodFrom,
      periodTo,
      updatedAt: new Date().toISOString()
    };
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Firebase
   */
  async updateTaskInFirebase(taskId, taskData) {
    try {
      const companyId = window.state?.currentCompanyId;
      if (!companyId) {
        throw new Error('ID –∫–æ–º–ø–∞–Ω—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      }
      
      const taskRef = firebase.doc(firebase.db, 'companies', companyId, 'focusTasks2', taskId);
      await firebase.updateDoc(taskRef, taskData);
      
      console.log('‚úÖ –ó–∞–¥–∞—á—É –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ Firebase:', taskId);
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ –≤ Firebase:', error);
      throw error;
    }
  }
  
  /**
   * –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
   */
  async archiveTask(taskId) {
    try {
      console.log('üì¶ –ê—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ:', taskId);
      
      const companyId = window.state?.currentCompanyId;
      if (!companyId) {
        throw new Error('ID –∫–æ–º–ø–∞–Ω—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      }
      
      const taskRef = firebase.doc(firebase.db, 'companies', companyId, 'focusTasks2', taskId);
      await firebase.updateDoc(taskRef, {
        status: 'archived',
        archivedAt: new Date().toISOString()
      });
      
      console.log('‚úÖ –ó–∞–¥–∞—á—É –∞—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ:', taskId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
      await this.refreshTasksList();
      
      alert('‚úÖ –ó–∞–¥–∞—á—É —É—Å–ø—ñ—à–Ω–æ –∞—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ');
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –∞—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ: ' + error.message);
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á
   */
  async updateTaskStatuses() {
    try {
      console.log('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑–∞–¥–∞—á...');
      
      const tasks = window.focus2Data?.tasks || [];
      const now = new Date();
      let updatedCount = 0;
      
      for (const task of tasks) {
        if (task.status === 'active' && task.periodTo) {
          const endDate = new Date(task.periodTo);
          
          // –ï—Å–ª–∏ —Å—Ä–æ–∫ –∑–∞–¥–∞—á–∏ –∏—Å—Ç–µ–∫, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "completed"
          if (endDate < now) {
            try {
              const companyId = window.state?.currentCompanyId;
              if (companyId) {
                const taskRef = firebase.doc(firebase.db, 'companies', companyId, 'focusTasks2', task.id);
                await firebase.updateDoc(taskRef, {
                  status: 'completed',
                  completedAt: now.toISOString()
                });
                
                console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "completed":', task.id);
                updatedCount++;
              }
            } catch (error) {
              console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–¥–∞—á—ñ:', task.id, error);
            }
          }
        }
      }
      
      if (updatedCount > 0) {
        console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑–∞–¥–∞—á: ${updatedCount}`);
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á
        await this.refreshTasksList();
      }
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑–∞–¥–∞—á:', error);
    }
  }
} 