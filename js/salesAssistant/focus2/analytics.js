// –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è Focus 2.0
import * as firebase from '../../firebase.js';

export class FocusAnalytics {
  constructor() {
    this.data = {
      tasks: [],
      clients: [],
      sales: [],
      notes: {}
    };
    this.charts = {};
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  async init() {
    try {
      console.log('üìä –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –§–æ–∫—É—Å 2.0...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      await this.loadAnalyticsData();
      
      console.log('‚úÖ –ú–æ–¥—É–ª—å –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏:', error);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  async loadAnalyticsData() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      this.data.tasks = window.focus2Data?.tasks || [];
      this.data.clients = window.focus2Data?.clients || [];
      this.data.sales = window.focus2Data?.salesData || [];
      
      console.log('üìä –î–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', {
        tasks: this.data.tasks.length,
        clients: this.data.clients.length,
        sales: this.data.sales.length
      });
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏:', error);
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
   */
  calculateMetrics() {
    const activeTasks = this.data.tasks.filter(t => t.status !== 'archived');
    const totalClients = this.data.clients.length;
    
    // –†–∞—Å—á–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    const completedTasks = activeTasks.filter(t => t.status === 'completed').length;
    const conversionRate = activeTasks.length > 0 ? (completedTasks / activeTasks.length) * 100 : 0;
    
    // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
    const totalRevenue = this.data.sales.reduce((sum, sale) => sum + (sale.–í—ã—Ä—É—á–∫–∞ || 0), 0);
    const avgOrderValue = this.data.sales.length > 0 ? totalRevenue / this.data.sales.length : 0;
    
    // –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    const managerStats = this.calculateManagerStats();
    
    return {
      activeTasks: activeTasks.length,
      totalClients,
      conversionRate: Math.round(conversionRate * 100) / 100,
      avgOrderValue: Math.round(avgOrderValue * 100) / 100,
      managerStats,
      taskTrends: this.calculateTaskTrends(),
      clientSegments: this.calculateClientSegments()
    };
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
   */
  calculateManagerStats() {
    const managerMap = new Map();
    
    this.data.clients.forEach(client => {
      const manager = client.manager || '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π';
      if (!managerMap.has(manager)) {
        managerMap.set(manager, {
          name: manager,
          clients: 0,
          totalRevenue: 0,
          avgOrderValue: 0,
          tasks: 0
        });
      }
      
      const stats = managerMap.get(manager);
      stats.clients++;
      stats.totalRevenue += client.sum || 0;
    });
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    managerMap.forEach(stats => {
      stats.avgOrderValue = stats.clients > 0 ? stats.totalRevenue / stats.clients : 0;
    });
    
    return Array.from(managerMap.values()).sort((a, b) => b.totalRevenue - a.totalRevenue);
  }

  /**
   * –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞–¥–∞—á
   */
  calculateTaskTrends() {
    const now = new Date();
    const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
    const lastQuarter = new Date(now.getFullYear(), Math.floor(now.getMonth() / 3) * 3, 1);
    
    const tasksThisMonth = this.data.tasks.filter(t => new Date(t.createdAt) >= lastMonth);
    const tasksThisQuarter = this.data.tasks.filter(t => new Date(t.createdAt) >= lastQuarter);
    
    return {
      thisMonth: tasksThisMonth.length,
      thisQuarter: tasksThisQuarter.length,
      total: this.data.tasks.length,
      completionRate: this.calculateCompletionRate()
    };
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  calculateClientSegments() {
    const segments = {
      vip: { count: 0, revenue: 0 },
      regular: { count: 0, revenue: 0 },
      new: { count: 0, revenue: 0 },
      inactive: { count: 0, revenue: 0 }
    };
    
    this.data.clients.forEach(client => {
      const revenue = client.sum || 0;
      let segment = 'new';
      
      if (revenue > 10000) segment = 'vip';
      else if (revenue > 1000) segment = 'regular';
      else if (revenue === 0) segment = 'inactive';
      
      segments[segment].count++;
      segments[segment].revenue += revenue;
    });
    
    return segments;
  }

  /**
   * –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
   */
  calculateCompletionRate() {
    const completedTasks = this.data.tasks.filter(t => t.status === 'completed').length;
    const totalTasks = this.data.tasks.length;
    return totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
   */
  getTopManagers(limit = 5) {
    const managerStats = this.calculateManagerStats();
    return managerStats.slice(0, limit);
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á
   */
  calculateAverageTaskDuration() {
    const completedTasks = this.data.tasks.filter(t => t.status === 'completed' && t.completedAt);
    
    if (completedTasks.length === 0) return 0;
    
    const totalDuration = completedTasks.reduce((sum, task) => {
      const created = new Date(task.createdAt);
      const completed = new Date(task.completedAt);
      return sum + (completed - created);
    }, 0);
    
    return Math.round(totalDuration / completedTasks.length / (1000 * 60 * 60 * 24)); // –≤ –¥–Ω—è—Ö
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  render() {
    const metrics = this.calculateMetrics();
    
    return `
      <div class="focus2-analytics">
        <!-- –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div class="bg-gray-800 rounded-lg p-6">
            <h3 class="text-gray-400 text-sm mb-2">–ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á</h3>
            <p class="text-3xl font-bold text-white">${metrics.activeTasks}</p>
          </div>
          <div class="bg-gray-800 rounded-lg p-6">
            <h3 class="text-gray-400 text-sm mb-2">–ö–æ–Ω–≤–µ—Ä—Å—ñ—è</h3>
            <p class="text-3xl font-bold text-green-400">${metrics.conversionRate}%</p>
          </div>
          <div class="bg-gray-800 rounded-lg p-6">
            <h3 class="text-gray-400 text-sm mb-2">–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫</h3>
            <p class="text-3xl font-bold text-blue-400">${metrics.avgOrderValue.toFixed(2)} ‚Ç¥</p>
          </div>
          <div class="bg-gray-800 rounded-lg p-6">
            <h3 class="text-gray-400 text-sm mb-2">–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–∞–¥–∞—á</h3>
            <p class="text-3xl font-bold text-yellow-400">${this.calculateAverageTaskDuration()} –¥–Ω.</p>
          </div>
        </div>

        <!-- –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º -->
          <div class="bg-gray-800 rounded-lg p-6">
            <h3 class="text-xl font-semibold text-white mb-4">–¢–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤</h3>
            <div class="space-y-4">
              ${this.renderManagerStats(metrics.managerStats.slice(0, 5))}
            </div>
          </div>

          <!-- –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ -->
          <div class="bg-gray-800 rounded-lg p-6">
            <h3 class="text-xl font-semibold text-white mb-4">–°–µ–≥–º–µ–Ω—Ç–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤</h3>
            <div class="space-y-4">
              ${this.renderClientSegments(metrics.clientSegments)}
            </div>
          </div>
        </div>

        <!-- –¢—Ä–µ–Ω–¥—ã –∏ –¥–∏–Ω–∞–º–∏–∫–∞ -->
        <div class="bg-gray-800 rounded-lg p-6">
          <h3 class="text-xl font-semibold text-white mb-4">–¢—Ä–µ–Ω–¥–∏ —Ç–∞ –¥–∏–Ω–∞–º—ñ–∫–∞</h3>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="text-center">
              <h4 class="text-gray-400 text-sm mb-2">–ó–∞–¥–∞—á —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è</h4>
              <p class="text-2xl font-bold text-blue-400">${metrics.taskTrends.thisMonth}</p>
            </div>
            <div class="text-center">
              <h4 class="text-gray-400 text-sm mb-2">–ó–∞–¥–∞—á —Ü—å–æ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª—É</h4>
              <p class="text-2xl font-bold text-green-400">${metrics.taskTrends.thisQuarter}</p>
            </div>
            <div class="text-center">
              <h4 class="text-gray-400 text-sm mb-2">–í—Å—å–æ–≥–æ –∑–∞–¥–∞—á</h4>
              <p class="text-2xl font-bold text-white">${metrics.taskTrends.total}</p>
            </div>
          </div>
        </div>

        <!-- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ -->
        <div class="bg-gray-800 rounded-lg p-6 mt-8">
          <h3 class="text-xl font-semibold text-white mb-4">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</h3>
          <div class="space-y-3">
            ${this.generateRecommendations(metrics)}
          </div>
        </div>
      </div>
    `;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
   */
  renderManagerStats(managers) {
    return managers.map(manager => `
      <div class="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
        <div>
          <p class="text-white font-medium">${manager.name}</p>
          <p class="text-gray-400 text-sm">${manager.clients} –∫–ª—ñ—î–Ω—Ç—ñ–≤</p>
        </div>
        <div class="text-right">
          <p class="text-green-400 font-semibold">${manager.totalRevenue.toFixed(2)} ‚Ç¥</p>
          <p class="text-gray-400 text-sm">${manager.avgOrderValue.toFixed(2)} ‚Ç¥/–∫–ª—ñ—î–Ω—Ç</p>
        </div>
      </div>
    `).join('');
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  renderClientSegments(segments) {
    const segmentColors = {
      vip: 'text-purple-400',
      regular: 'text-blue-400',
      new: 'text-green-400',
      inactive: 'text-gray-400'
    };

    const segmentNames = {
      vip: 'VIP –∫–ª—ñ—î–Ω—Ç–∏',
      regular: '–†–µ–≥—É–ª—è—Ä–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏',
      new: '–ù–æ–≤—ñ –∫–ª—ñ—î–Ω—Ç–∏',
      inactive: '–ù–µ–∞–∫—Ç–∏–≤–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏'
    };

    return Object.entries(segments).map(([key, data]) => `
      <div class="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
        <div>
          <p class="text-white font-medium">${segmentNames[key]}</p>
          <p class="text-gray-400 text-sm">${data.count} –∫–ª—ñ—î–Ω—Ç—ñ–≤</p>
        </div>
        <div class="text-right">
          <p class="${segmentColors[key]} font-semibold">${data.revenue.toFixed(2)} ‚Ç¥</p>
          <p class="text-gray-400 text-sm">${data.count > 0 ? (data.revenue / data.count).toFixed(2) : 0} ‚Ç¥/–∫–ª—ñ—î–Ω—Ç</p>
        </div>
      </div>
    `).join('');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  generateRecommendations(metrics) {
    const recommendations = [];
    
    if (metrics.conversionRate < 50) {
      recommendations.push({
        type: 'warning',
        message: '–ù–∏–∑—å–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å—ñ—è –∑–∞–¥–∞—á. –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á.',
        action: '–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –Ω–µ–≤–¥–∞–ª—ñ –∑–∞–¥–∞—á—ñ'
      });
    }
    
    if (metrics.avgOrderValue < 1000) {
      recommendations.push({
        type: 'info',
        message: '–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫ –Ω–∏–∂—á–µ –Ω–æ—Ä–º–∏. –ú–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —á–µ—Ä–µ–∑ —Ñ–æ–∫—É—Å–Ω—ñ –∑–∞–¥–∞—á—ñ.',
        action: '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —á–µ–∫—É'
      });
    }
    
    if (this.calculateAverageTaskDuration() > 30) {
      recommendations.push({
        type: 'priority',
        message: '–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–¥–∞—á –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞. –ü–æ—Ç—Ä—ñ–±–Ω–æ –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å.',
        action: '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–æ—Ü–µ—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è'
      });
    }
    
    const topManager = metrics.managerStats[0];
    if (topManager && topManager.totalRevenue > 50000) {
      recommendations.push({
        type: 'success',
        message: `–ú–µ–Ω–µ–¥–∂–µ—Ä ${topManager.name} –ø–æ–∫–∞–∑—É—î –≤—ñ–¥–º—ñ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏. –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –π–æ–≥–æ –¥–æ—Å–≤—ñ–¥.`,
        action: '–î–æ—Å–ª—ñ–¥–∏—Ç–∏ –º–µ—Ç–æ–¥–∏–∫—É'
      });
    }
    
    return recommendations.map(rec => `
      <div class="flex items-start space-x-3 p-3 bg-gray-700 rounded-lg">
        <div class="flex-shrink-0">
          <div class="w-2 h-2 rounded-full ${this.getRecommendationColor(rec.type)} mt-2"></div>
        </div>
        <div class="flex-1">
          <p class="text-white">${rec.message}</p>
          ${rec.action ? `
            <button class="mt-2 px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-500">
              ${rec.action}
            </button>
          ` : ''}
        </div>
      </div>
    `).join('');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   */
  getRecommendationColor(type) {
    const colors = {
      success: 'bg-green-500',
      warning: 'bg-yellow-500',
      priority: 'bg-red-500',
      info: 'bg-blue-500'
    };
    return colors[type] || 'bg-gray-500';
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async refresh() {
    await this.loadAnalyticsData();
    return this.render();
  }
} 