// dataService.js - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Focus 2.0
import * as firebase from '../../firebase.js';

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const cache = new Map();
const cacheTimestamps = new Map();
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// API endpoints
const API_ENDPOINTS = {
  sales: 'https://fastapi.lookfort.com/nomenclature.analysis',
  clientLinks: 'https://fastapi.lookfort.com/nomenclature.analysis?mode=company_url',
  nomenclature: 'https://fastapi.lookfort.com/nomenclature.analysis?mode=nomenclature_category',
  deals: 'https://fastapi.lookfort.com/nomenclature.analysis?mode=dela',
  calls: 'https://fastapi.lookfort.com/nomenclature.analysis?mode=calls'
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
 */
function isCacheValid(key) {
  const timestamp = cacheTimestamps.get(key);
  if (!timestamp) return false;
  return Date.now() - timestamp < CACHE_DURATION;
}

/**
 * Fetch —Å —Ç–∞–π–º–∞—É—Ç–æ–º
 */
async function fetchWithTimeout(resource, options = {}, timeout = 10000) {
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), timeout);

  try {
    const response = await fetch(resource, {
      ...options,
      signal: controller.signal
    });
    
    clearTimeout(id);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    return response;
  } catch (error) {
    clearTimeout(id);
    if (error.name === 'AbortError') {
      throw new Error('Request timeout');
    }
    throw error;
  }
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
async function fetchData(key, endpoint, options = {}) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (cache.has(key) && isCacheValid(key)) {
    console.log(`üìã –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∫–µ—à –¥–ª—è ${key}`);
    return cache.get(key);
  }

  try {
    console.log(`üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${key}...`);
    const response = await fetchWithTimeout(endpoint, options);
    const data = await response.json();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    cache.set(key, data);
    cacheTimestamps.set(key, Date.now());
    
    console.log(`‚úÖ ${key} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:`, Array.isArray(data) ? data.length : 'object');
    return data;
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${key}:`, error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª–∏
    if (cache.has(key)) {
      console.warn(`‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π –∫–µ—à –¥–ª—è ${key}`);
      return cache.get(key);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return Array.isArray(cache.get(key)) ? [] : {};
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
 */
export async function getSalesData() {
  return fetchData('sales', API_ENDPOINTS.sales);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
 */
export async function getClientLinks() {
  return fetchData('clientLinks', API_ENDPOINTS.clientLinks);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
 */
export async function getNomenclatureData() {
  return fetchData('nomenclature', API_ENDPOINTS.nomenclature);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–¥–µ–ª–æ–∫
 */
export async function getDealsData() {
  return fetchData('deals', API_ENDPOINTS.deals);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∑–≤–æ–Ω–∫–æ–≤
 */
export async function getCallsData() {
  return fetchData('calls', API_ENDPOINTS.calls);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä
 */
export async function getClientManagerDirectory() {
  const clientLinks = await getClientLinks();
  const directory = {};
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
  Object.keys(clientLinks).forEach(clientCode => {
    directory[clientCode] = {
      link: clientLinks[clientCode],
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –æ—Ç–¥–µ–ª–∞
      manager: '–ë–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
      department: '–ë–µ–∑ –≤—ñ–¥–¥—ñ–ª—É'
    };
  });
  
  return directory;
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firebase
 */
export async function getFirebaseData(collectionPath, options = {}) {
  const cacheKey = `firebase_${collectionPath.join('_')}`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (cache.has(cacheKey) && isCacheValid(cacheKey)) {
    return cache.get(cacheKey);
  }

  try {
    console.log(`üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Firebase –¥–∞–Ω–∏—Ö: ${collectionPath.join('/')}`);
    
    const ref = firebase.collection(firebase.db, ...collectionPath);
    const snapshot = await firebase.getDocs(ref);
    const data = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    cache.set(cacheKey, data);
    cacheTimestamps.set(cacheKey, Date.now());
    
    console.log(`‚úÖ Firebase –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${data.length} –∑–∞–ø–∏—Å—ñ–≤`);
    return data;
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Firebase –¥–∞–Ω–∏—Ö:`, error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (cache.has(cacheKey)) {
      console.warn(`‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π –∫–µ—à –¥–ª—è Firebase –¥–∞–Ω–∏—Ö`);
      return cache.get(cacheKey);
    }
    
    return [];
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–¥–µ–ª–æ–≤ –∏–∑ Firebase
 */
export async function getDepartments(companyId) {
  if (!companyId) return [];
  return getFirebaseData(['companies', companyId, 'departments']);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ Firebase
 */
export async function getEmployees(companyId) {
  if (!companyId) return [];
  return getFirebaseData(['companies', companyId, 'employees']);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ Firebase
 */
export async function getFocusTasks(companyId) {
  if (!companyId) return [];
  return getFirebaseData(['companies', companyId, 'focusTasks2']);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –∑–∞–¥–∞—á–∏
 */
export async function getTaskNotes(companyId, taskId) {
  if (!companyId || !taskId) return {};
  
  try {
    const notesRef = firebase.collection(firebase.db, 'companies', companyId, 'focusTasks2', taskId, 'notes');
    const snapshot = await firebase.getDocs(notesRef);
    const notes = {};
    snapshot.docs.forEach(doc => { 
      notes[doc.id] = doc.data(); 
    });
    
    return notes;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–µ—Ç–æ–∫:', error);
    return {};
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
 */
export async function saveTaskNote(companyId, taskId, clientCode, note) {
  if (!companyId || !taskId || !clientCode) {
    throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
  }
  
  try {
    // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–ª—è
    Object.keys(note).forEach(k => {
      if (note[k] === undefined || note[k] === null || (typeof note[k] === 'number' && isNaN(note[k]))) {
        delete note[k];
      }
    });
    
    const noteRef = firebase.doc(firebase.db, 'companies', companyId, 'focusTasks2', taskId, 'notes', clientCode);
    await firebase.setDoc(noteRef, note, { merge: true });
    
    console.log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞:', { taskId, clientCode, note });
    return true;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–µ—Ç–∫–∏:', error);
    throw error;
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
 */
export function clearCache(key = null) {
  if (key) {
    cache.delete(key);
    cacheTimestamps.delete(key);
    console.log(`üóëÔ∏è –ö–µ—à –æ—á–∏—â–µ–Ω–æ –¥–ª—è ${key}`);
  } else {
    cache.clear();
    cacheTimestamps.clear();
    console.log('üóëÔ∏è –í–µ—Å—å –∫–µ—à –æ—á–∏—â–µ–Ω–æ');
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
 */
export function getCacheStats() {
  return {
    size: cache.size,
    keys: Array.from(cache.keys()),
    timestamps: Object.fromEntries(cacheTimestamps)
  };
}

/**
 * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export async function preloadAllData() {
  console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...');
  
  const promises = [
    getSalesData(),
    getClientLinks(),
    getNomenclatureData(),
    getDealsData(),
    getCallsData()
  ];
  
  try {
    const results = await Promise.allSettled(promises);
    const successCount = results.filter(r => r.status === 'fulfilled').length;
    console.log(`‚úÖ –ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${successCount}/${promises.length} —É—Å–ø—ñ—à–Ω–æ`);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', error);
  }
} 