// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ Focus 2.0
import * as firebase from '../../firebase.js';

let focusClientLinks = null;

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
 */
async function loadFocusClientLinks() {
  if (focusClientLinks) return focusClientLinks;
  
  try {
    console.log('üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤...');
    const res = await fetch('https://fastapi.lookfort.com/nomenclature.analysis?mode=company_url');
    const arr = await res.json();
    focusClientLinks = {};
    arr.forEach(c => { 
      focusClientLinks[c['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥']] = c['–ø–æ—Å–∏–ª–∞–Ω–Ω—è']; 
    });
    console.log('‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', Object.keys(focusClientLinks).length);
    return focusClientLinks;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤:', error);
    return {};
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –∑–∞–¥–∞—á–∏
 */
export async function getFocusNotes(taskId) {
  try {
    const companyId = window.state?.currentCompanyId;
    if (!companyId) {
      console.error('‚ùå –ö–æ–º–ø–∞–Ω—ñ—è –Ω–µ –≤–∏–±—Ä–∞–Ω–∞');
      return {};
    }
    
    const notesRef = firebase.collection(firebase.db, 'companies', companyId, 'focusTasks2', taskId, 'notes');
    const snapshot = await firebase.getDocs(notesRef);
    const notes = {};
    snapshot.docs.forEach(doc => { 
      notes[doc.id] = doc.data(); 
    });
    
    console.log('‚úÖ –ó–∞–º–µ—Ç–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–ª—è –∑–∞–¥–∞—á—ñ:', taskId, Object.keys(notes).length);
    return notes;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–µ—Ç–æ–∫:', error);
    return {};
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
 */
export async function setFocusNote(taskId, clientCode, note) {
  try {
    const companyId = window.state?.currentCompanyId;
    if (!companyId || !taskId || !clientCode) {
      console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', { companyId, taskId, clientCode });
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è note –Ω–∞ undefined/null/NaN
    Object.keys(note).forEach(k => {
      if (note[k] === undefined || note[k] === null || (typeof note[k] === 'number' && isNaN(note[k]))) {
        console.warn(`‚ö†Ô∏è –£–¥–∞–ª—è—é –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ note[${k}]`, note[k]);
        delete note[k];
      }
    });
    
    const noteRef = firebase.doc(firebase.db, 'companies', companyId, 'focusTasks2', taskId, 'notes', clientCode);
    await firebase.setDoc(noteRef, note, { merge: true });
    
    console.log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞:', { taskId, clientCode, note });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–µ—Ç–∫–∏:', error);
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
 */
export async function getClientLink(clientCode) {
  const links = await loadFocusClientLinks();
  return links[clientCode] || null;
}

/**
 * –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –∫ —Ç–∞–±–ª–∏—Ü–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
 */
export function attachTableHandlers(taskId) {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∞—Ç—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
  document.querySelectorAll('.focus-commdate').forEach(input => {
    input.onchange = (e) => {
      const clientCode = String(input.dataset.cid);
      console.log('üìÖ –ó–º—ñ–Ω–∞ –¥–∞—Ç–∏ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó:', clientCode, input.value);
      setFocusNote(taskId, clientCode, { commDate: input.value });
    };
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  document.querySelectorAll('.focus-done').forEach(checkbox => {
    checkbox.onchange = (e) => {
      const clientCode = String(checkbox.dataset.cid);
      console.log('‚úÖ –ó–º—ñ–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:', clientCode, checkbox.checked);
      setFocusNote(taskId, clientCode, { done: checkbox.checked });
    };
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  document.querySelectorAll('.focus-comment').forEach(input => {
    input.onchange = (e) => {
      const clientCode = String(input.dataset.cid);
      console.log('üí¨ –ó–º—ñ–Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—è:', clientCode, input.value);
      setFocusNote(taskId, clientCode, { comment: input.value });
    };
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  document.querySelectorAll('.focus-priority').forEach(select => {
    select.onchange = (e) => {
      const clientCode = String(select.dataset.cid);
      console.log('‚≠ê –ó–º—ñ–Ω–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É:', clientCode, select.value);
      setFocusNote(taskId, clientCode, { priority: select.value });
    };
  });
  
  console.log('‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ –¥–ª—è –∑–∞–¥–∞—á—ñ:', taskId);
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
 */
export function renderClientsTableWithNotes(taskId, clients, notes = {}) {
  return `
    <div class="overflow-x-auto">
      <table class="min-w-full text-sm bg-gray-800 rounded-lg overflow-hidden">
        <thead>
          <tr class="bg-gray-700 text-gray-300">
            <th class="px-3 py-2 text-left">–ö–ª—ñ—î–Ω—Ç</th>
            <th class="px-3 py-2 text-left">–ú–µ–Ω–µ–¥–∂–µ—Ä</th>
            <th class="px-3 py-2 text-left">–°—Ñ–µ—Ä–∞</th>
            <th class="px-3 py-2 text-left">–ü–∞—Ä–∞–º–µ—Ç—Ä–∏</th>
            <th class="px-3 py-2 text-left">–°—É–º–∞</th>
            <th class="px-3 py-2 text-left">–û—Å—Ç–∞–Ω–Ω—è –ø–æ–∫—É–ø–∫–∞</th>
            <th class="px-3 py-2 text-left">–î–∞—Ç–∞ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó</th>
            <th class="px-3 py-2 text-center">–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è</th>
            <th class="px-3 py-2 text-center">–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç</th>
            <th class="px-3 py-2 text-left">–ö–æ–º–µ–Ω—Ç–∞—Ä</th>
          </tr>
        </thead>
        <tbody>
          ${clients.map(client => {
            const note = notes[client.code] || {};
            const clientName = client.link ? 
              `<a href="${client.link}" target="_blank" class="text-blue-400 underline hover:text-blue-600">${client.name}</a>` : 
              client.name;
            
            return `
              <tr class="border-b border-gray-700 hover:bg-gray-700">
                <td class="px-3 py-2 text-gray-200">
                  <div>
                    <div class="font-medium">${clientName}</div>
                    <div class="text-gray-400 text-xs">${client.code}</div>
                  </div>
                </td>
                <td class="px-3 py-2 text-gray-300">${client.manager || '-'}</td>
                <td class="px-3 py-2 text-gray-300">${client.sphere || '-'}</td>
                <td class="px-3 py-2 text-gray-300">
                  <div class="text-xs">
                    ${(() => {
                      const paramLabels = {
                        param1: '–ö—É–ø—É–≤–∞–ª–∏ —Ä–∞–Ω—ñ—à–µ',
                        param2: '–ù–µ –∫—É–ø—É–≤–∞–ª–∏ –¥–Ω—ñ–≤',
                        param3: '–ù–∏–∑—å–∫–∞ —á–∞—Å—Ç–æ—Ç–∞',
                        param4: '–ù–∏–∑—å–∫–∞ —Å—É–º–∞',
                        param5: '–ü–µ–≤–Ω—ñ —Å–µ–≥–º–µ–Ω—Ç–∏',
                        param6: '–ü–æ—Ö–æ–∂—ñ –∫–ª—ñ—î–Ω—Ç–∏',
                        param7: '–ë–µ—Ä—É—Ç—å X'
                      };
                      
                      return client.params && Array.isArray(client.params) ? 
                        client.params.map(param => paramLabels[param] || param).join(', ') : '-';
                    })()}
                  </div>
                </td>
                <td class="px-3 py-2 text-green-400">${client.sum ? client.sum.toFixed(2) : '-'}</td>
                <td class="px-3 py-2 text-gray-300">${client.lastDate ? new Date(client.lastDate).toLocaleDateString('uk-UA') : '-'}</td>
                <td class="px-3 py-2">
                  <input type="date" 
                         value="${note.commDate || ''}" 
                         data-cid="${client.code}" 
                         class="focus-commdate bg-gray-900 text-gray-200 rounded px-2 py-1 text-xs">
                </td>
                <td class="px-3 py-2 text-center">
                  <input type="checkbox" 
                         data-cid="${client.code}" 
                         class="focus-done" 
                         ${note.done ? 'checked' : ''}>
                </td>
                <td class="px-3 py-2 text-center">
                  <select data-cid="${client.code}" 
                          class="focus-priority bg-gray-900 text-gray-200 rounded px-2 py-1 text-xs">
                    <option value="">-</option>
                    <option value="low" ${note.priority === 'low' ? 'selected' : ''}>–ù–∏–∑—å–∫–∏–π</option>
                    <option value="medium" ${note.priority === 'medium' ? 'selected' : ''}>–°–µ—Ä–µ–¥–Ω—ñ–π</option>
                    <option value="high" ${note.priority === 'high' ? 'selected' : ''}>–í–∏—Å–æ–∫–∏–π</option>
                    <option value="urgent" ${note.priority === 'urgent' ? 'selected' : ''}>–¢–µ—Ä–º—ñ–Ω–æ–≤–æ</option>
                  </select>
                </td>
                <td class="px-3 py-2">
                  <input type="text" 
                         value="${note.comment || ''}" 
                         data-cid="${client.code}" 
                         class="focus-comment bg-gray-900 text-gray-200 rounded px-2 py-1 text-xs w-full"
                         placeholder="–ö–æ–º–µ–Ω—Ç–∞—Ä...">
                </td>
              </tr>
            `;
          }).join('')}
        </tbody>
      </table>
    </div>
  `;
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV
 */
export function exportToCSV(clients, notes = {}) {
  let csv = '–ö–ª—ñ—î–Ω—Ç,–ö–æ–¥,–ú–µ–Ω–µ–¥–∂–µ—Ä,–°—Ñ–µ—Ä–∞,–ü–∞—Ä–∞–º–µ—Ç—Ä–∏,–°—É–º–∞,–û—Å—Ç–∞–Ω–Ω—è –ø–æ–∫—É–ø–∫–∞,–î–∞—Ç–∞ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó,–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è,–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç,–ö–æ–º–µ–Ω—Ç–∞—Ä\n';
  
  const paramLabels = {
    param1: '–ö—É–ø—É–≤–∞–ª–∏ —Ä–∞–Ω—ñ—à–µ',
    param2: '–ù–µ –∫—É–ø—É–≤–∞–ª–∏ –¥–Ω—ñ–≤',
    param3: '–ù–∏–∑—å–∫–∞ —á–∞—Å—Ç–æ—Ç–∞',
    param4: '–ù–∏–∑—å–∫–∞ —Å—É–º–∞',
    param5: '–ü–µ–≤–Ω—ñ —Å–µ–≥–º–µ–Ω—Ç–∏',
    param6: '–ü–æ—Ö–æ–∂—ñ –∫–ª—ñ—î–Ω—Ç–∏',
    param7: '–ë–µ—Ä—É—Ç—å X'
  };
  
  clients.forEach(client => {
    const note = notes[client.code] || {};
    const clientName = client.name.replace(/"/g, '""');
    const comment = (note.comment || '').replace(/"/g, '""');
    
    // –§–æ—Ä–º—É—î–º–æ —Ä—è–¥–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    const clientParams = client.params && Array.isArray(client.params) ? 
      client.params.map(param => paramLabels[param] || param).join('; ') : '';
    
    csv += `"${clientName}","${client.code}","${client.manager || ''}","${client.sphere || ''}","${clientParams}",${client.sum || 0},"${client.lastDate ? new Date(client.lastDate).toLocaleDateString('uk-UA') : ''}","${note.commDate || ''}","${note.done ? '–¢–∞–∫' : '–ù—ñ'}","${note.priority || ''}","${comment}"\n`;
  });
  
  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `focus_clients_${new Date().toISOString().split('T')[0]}.csv`;
  a.click();
  URL.revokeObjectURL(url);
  
  console.log('‚úÖ –î–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤ CSV');
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∑–∞–º–µ—Ç–æ–∫
 */
export async function initNotesModule() {
  try {
    await loadFocusClientLinks();
    console.log('‚úÖ –ú–æ–¥—É–ª—å –∑–∞–º–µ—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–¥—É–ª—è –∑–∞–º–µ—Ç–æ–∫:', error);
  }
} 